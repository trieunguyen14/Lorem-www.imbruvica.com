(function(global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    var deletedIds = [];
    var slice = deletedIds.slice;
    var concat = deletedIds.concat;
    var push = deletedIds.push;
    var indexOf = deletedIds.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var version = "1.11.2", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === "array";
        },
        isWindow: function(obj) {
            return obj != null && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {
                return false;
            }
            if (support.ownLast) {
                for (key in obj) {
                    return hasOwn.call(obj, key);
                }
            }
            for (key in obj) {}
            return key === undefined || hasOwn.call(obj, key);
        },
        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(data) {
            if (data && jQuery.trim(data)) {
                (window.execScript || function(data) {
                    window["eval"].call(window, data);
                })(data);
            }
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) {
                    return indexOf.call(arr, elem, i);
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) {
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }
            return -1;
        },
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            while (j < len) {
                first[i++] = second[j++];
            }
            if (len !== len) {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: function() {
            return +new Date();
        },
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            var i = 0, len = list.length;
            for (;i < len; i++) {
                if (list[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, unloadHandler = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            nodeType = context.nodeType;
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed && documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType !== 1 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;
            if (parent && parent !== parent.top) {
                if (parent.addEventListener) {
                    parent.addEventListener("unload", unloadHandler, false);
                } else if (parent.attachEvent) {
                    parent.attachEvent("onunload", unloadHandler);
                }
            }
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
                    if (div.querySelectorAll("[msallowcapture^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                        rbuggyQSA.push("~=");
                    }
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                    if (!div.querySelectorAll("a#" + expando + "+*").length) {
                        rbuggyQSA.push(".#.+[+~]");
                    }
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    if (div.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(div) {
                    support.disconnectedMatch = matches.call(div, "div");
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return elem.disabled === false;
                },
                disabled: function(elem) {
                    return elem.disabled === true;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                outerCache[dir] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) {
                    outermostContext = context !== document && context;
                }
                for (;i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function(div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ":not(" + expr + ")";
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) {
            return this;
        }
        if (typeof selector === "string") {
            if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                match = [ null, selector, null ];
            } else {
                match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            if (jQuery.isFunction(this[match])) {
                                this[match](context[match]);
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem && elem.parentNode) {
                        if (elem.id !== match[2]) {
                            return rootjQuery.find(selector);
                        }
                        this.length = 1;
                        this[0] = elem;
                    }
                    this.context = document;
                    this.selector = selector;
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        } else if (jQuery.isFunction(selector)) {
            return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
        }
        if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    ret = jQuery.unique(ret);
                }
                if (rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
            }
            return this.pushStack(ret);
        };
    });
    var rnotwhite = /\S+/g;
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else if (memory) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && type !== "string") {
                                add(arg);
                            }
                        });
                    })(arguments);
                    if (firing) {
                        firingLength = list.length;
                    } else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                if (list) {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) {
                        stack.push(args);
                    } else {
                        fire(args);
                    }
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function() {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function(subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else if (!--remaining) {
                        deferred.resolveWith(contexts, values);
                    }
                };
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [ jQuery ]);
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
            detach();
            jQuery.ready();
        }
    }
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === "complete") {
                setTimeout(jQuery.ready);
            } else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                top.doScroll("left");
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }
                            detach();
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };
    var strundefined = typeof undefined;
    var i;
    for (i in jQuery(support)) {
        break;
    }
    support.ownLast = i !== "0";
    support.inlineBlockNeedsLayout = false;
    jQuery(function() {
        var val, div, body, container;
        body = document.getElementsByTagName("body")[0];
        if (!body || !body.style) {
            return;
        }
        div = document.createElement("div");
        container = document.createElement("div");
        container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
        body.appendChild(container).appendChild(div);
        if (typeof div.style.zoom !== strundefined) {
            div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
            support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
            if (val) {
                body.style.zoom = 1;
            }
        }
        body.removeChild(container);
    });
    (function() {
        var div = document.createElement("div");
        if (support.deleteExpando == null) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
        div = null;
    })();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return nodeType !== 1 && nodeType !== 9 ? false : !noData || noData !== true && elem.getAttribute("classid") === noData;
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }
        return true;
    }
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
            return;
        }
        if (!id) {
            if (isNode) {
                id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }
        if (!cache[id]) {
            cache[id] = isNode ? {} : {
                toJSON: jQuery.noop
            };
        }
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }
            thisCache = thisCache.data;
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }
        if (typeof name === "string") {
            ret = thisCache[name];
            if (ret == null) {
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) {
            return;
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) {
                    if (name in thisCache) {
                        name = [ name ];
                    } else {
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [ name ];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }
                i = name.length;
                while (i--) {
                    delete thisCache[name[i]];
                }
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return;
                }
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }
        if (isNode) {
            jQuery.cleanData([ elem ], true);
        } else if (support.deleteExpando || cache != cache.window) {
            delete cache[id];
        } else {
            cache[id] = null;
        }
    }
    jQuery.extend({
        cache: {},
        noData: {
            "applet ": true,
            "embed ": true,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }
            return arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHidden = function(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    };
    var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = key == null;
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (;i < length; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    };
    var rcheckableType = /^(?:checkbox|radio)$/i;
    (function() {
        var input = document.createElement("input"), div = document.createElement("div"), fragment = document.createDocumentFragment();
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        support.leadingWhitespace = div.firstChild.nodeType === 3;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
        input.type = "checkbox";
        input.checked = true;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        support.noCloneEvent = true;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        if (support.deleteExpando == null) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
    })();
    (function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            submit: true,
            change: true,
            focusin: true
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = div.attributes[eventName].expando === false;
            }
        }
        div = null;
    })();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, "events");
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                for (;cur != this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {}
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === strundefined) {
                elem[name] = null;
            }
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, "submitBubbles", true);
                    }
                });
            },
            postDispatch: function(event) {
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },
            teardown: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.remove(this, "._submit");
            }
        };
    }
    if (!support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function() {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },
            handle: function(event) {
                var elem = event.target;
                if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function() {
                jQuery.event.remove(this, "._change");
                return !rformElems.test(this.nodeName);
            }
        };
    }
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    jQuery._data(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        jQuery._removeData(doc, fix);
                    } else {
                        jQuery._data(doc, fix, attaches);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        if (rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (;(elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
        }
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (dest.nodeType !== 1) {
            return;
        }
        nodeName = dest.nodeName.toLowerCase();
        if (!support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
            dest.removeAttribute(jQuery.expando);
        }
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }
            if (support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                dest.innerHTML = src.innerHTML;
            }
        } else if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true);
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement("div"));
                        tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }
                        if (!support.tbody) {
                            elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp.textContent = "";
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }
                        tmp = safe.lastChild;
                    }
                }
            }
            if (tmp) {
                safe.removeChild(tmp);
            }
            if (!support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special;
            for (;(elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (cache[id]) {
                            delete cache[id];
                            if (deleteExpando) {
                                delete elem[internalKey];
                            } else if (typeof elem.removeAttribute !== strundefined) {
                                elem.removeAttribute(internalKey);
                            } else {
                                elem[internalKey] = null;
                            }
                            deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        remove: function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;(elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(elem, this);
                }
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    if (jQuery._evalUrl) {
                                        jQuery._evalUrl(node.src);
                                    }
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === "none" || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    (function() {
        var shrinkWrapBlocksVal;
        support.shrinkWrapBlocks = function() {
            if (shrinkWrapBlocksVal != null) {
                return shrinkWrapBlocksVal;
            }
            shrinkWrapBlocksVal = false;
            var div, body, container;
            body = document.getElementsByTagName("body")[0];
            if (!body || !body.style) {
                return;
            }
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
                div.appendChild(document.createElement("div")).style.width = "5px";
                shrinkWrapBlocksVal = div.offsetWidth !== 3;
            }
            body.removeChild(container);
            return shrinkWrapBlocksVal;
        };
    })();
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles, curCSS, rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            if (elem.ownerDocument.defaultView.opener) {
                return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
            }
            return window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;
            if (computed) {
                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret === undefined ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : undefined;
            if (ret == null && style && style[name]) {
                ret = style[name];
            }
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }
            return ret === undefined ? ret : ret + "" || "auto";
        };
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                var condition = conditionFn();
                if (condition == null) {
                    return;
                }
                if (condition) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    (function() {
        var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;
        div = document.createElement("div");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        style = a && a.style;
        if (!style) {
            return;
        }
        style.cssText = "float:left;opacity:.5";
        support.opacity = style.opacity === "0.5";
        support.cssFloat = !!style.cssFloat;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";
        jQuery.extend(support, {
            reliableHiddenOffsets: function() {
                if (reliableHiddenOffsetsVal == null) {
                    computeStyleTests();
                }
                return reliableHiddenOffsetsVal;
            },
            boxSizingReliable: function() {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return boxSizingReliableVal;
            },
            pixelPosition: function() {
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return pixelPositionVal;
            },
            reliableMarginRight: function() {
                if (reliableMarginRightVal == null) {
                    computeStyleTests();
                }
                return reliableMarginRightVal;
            }
        });
        function computeStyleTests() {
            var div, body, container, contents;
            body = document.getElementsByTagName("body")[0];
            if (!body || !body.style) {
                return;
            }
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
            pixelPositionVal = boxSizingReliableVal = false;
            reliableMarginRightVal = true;
            if (window.getComputedStyle) {
                pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%";
                boxSizingReliableVal = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";
                contents = div.appendChild(document.createElement("div"));
                contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                contents.style.marginRight = contents.style.width = "0";
                div.style.width = "1px";
                reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);
                div.removeChild(contents);
            }
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            contents = div.getElementsByTagName("td");
            contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
            reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
            if (reliableHiddenOffsetsVal) {
                contents[0].style.display = "";
                contents[1].style.display = "none";
                reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
            }
            body.removeChild(container);
        }
    })();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);
                if (display && display !== "none" || !hidden) {
                    jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {}
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });
    if (!support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
            },
            set: function(elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                style.zoom = 1;
                if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                    style.removeAttribute("filter");
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
            }
        };
    }
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) {
            return jQuery.swap(elem, {
                display: "inline-block"
            }, curCSS, [ elem, "marginRight" ]);
        }
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";
                } else {
                    style.zoom = 1;
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!support.shrinkWrapBlocks()) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                display = undefined;
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = jQuery._data(elem, "fxshow", {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            } else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || jQuery._data(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input, div, select, a, opt;
        div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = div.className !== "t";
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = a.getAttribute("href") === "/a";
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
    })();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {
                            try {
                                option.selected = optionSet = true;
                            } catch (_) {
                                option.scrollHeight;
                            }
                        } else {
                            option.selected = false;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === strundefined) {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name);
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false;
                        } else {
                            elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
                        }
                    } else {
                        jQuery.attr(elem, name, "");
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
            } else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            if (!isXML) {
                return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
            }
        };
    });
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    elem.defaultValue = value;
                } else {
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                }
                ret.value = value += "";
                if (name === "value" || value === elem.getAttribute(name)) {
                    return value;
                }
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            if (!isXML) {
                return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
            }
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) {
                    return ret.value;
                }
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    if (!support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return elem.style.cssText = value + "";
            }
        };
    }
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    if (!support.hrefNormalized) {
        jQuery.each([ "href", "src" ], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    if (!support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === strundefined || type === "boolean") {
                    if (this.className) {
                        jQuery._data(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now();
    var rquery = /\?/;
    var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) {
            return window.JSON.parse(data + "");
        }
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            if (requireNonComma && comma) {
                depth = 0;
            }
            if (depth === 0) {
                return token;
            }
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            if (window.DOMParser) {
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else {
                xml = new ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = undefined;
        }
        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType.charAt(0) === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        } else {
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    if (window.attachEvent) {
        window.attachEvent("onunload", function() {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        });
    }
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = support.ajax = !!xhrSupported;
    if (xhrSupported) {
        jQuery.ajaxTransport(function(options) {
            if (!options.crossDomain || support.cors) {
                var callback;
                return {
                    send: function(headers, complete) {
                        var i, xhr = options.xhr(), id = ++xhrId;
                        xhr.open(options.type, options.url, options.async, options.username, options.password);
                        if (options.xhrFields) {
                            for (i in options.xhrFields) {
                                xhr[i] = options.xhrFields[i];
                            }
                        }
                        if (options.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(options.mimeType);
                        }
                        if (!options.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
                        for (i in headers) {
                            if (headers[i] !== undefined) {
                                xhr.setRequestHeader(i, headers[i] + "");
                            }
                        }
                        xhr.send(options.hasContent && options.data || null);
                        callback = function(_, isAbort) {
                            var status, statusText, responses;
                            if (callback && (isAbort || xhr.readyState === 4)) {
                                delete xhrCallbacks[id];
                                callback = undefined;
                                xhr.onreadystatechange = jQuery.noop;
                                if (isAbort) {
                                    if (xhr.readyState !== 4) {
                                        xhr.abort();
                                    }
                                } else {
                                    responses = {};
                                    status = xhr.status;
                                    if (typeof xhr.responseText === "string") {
                                        responses.text = xhr.responseText;
                                    }
                                    try {
                                        statusText = xhr.statusText;
                                    } catch (e) {
                                        statusText = "";
                                    }
                                    if (!status && options.isLocal && !options.crossDomain) {
                                        status = responses.text ? 200 : 404;
                                    } else if (status === 1223) {
                                        status = 204;
                                    }
                                }
                            }
                            if (responses) {
                                complete(status, statusText, responses, xhr.getAllResponseHeaders());
                            }
                        };
                        if (!options.async) {
                            callback();
                        } else if (xhr.readyState === 4) {
                            setTimeout(callback);
                        } else {
                            xhr.onreadystatechange = xhrCallbacks[id] = callback;
                        }
                    },
                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                            script = null;
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
            return [ context.createElement(parsed[1]) ];
        }
        parsed = jQuery.buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
            });
        }
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
        },
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, parentOffset = {
                top: 0,
                left: 0
            }, elem = this[0];
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
});

window.Modernizr = function(window, document, undefined) {
    var version = "2.8.3", Modernizr = {}, enableClasses = true, docElement = document.documentElement, mod = "modernizr", modElem = document.createElement(mod), mStyle = modElem.style, inputElem = document.createElement("input"), smile = ":)", toString = {}.toString, prefixes = " -webkit- -moz- -o- -ms- ".split(" "), omPrefixes = "Webkit Moz O ms", cssomPrefixes = omPrefixes.split(" "), domPrefixes = omPrefixes.toLowerCase().split(" "), ns = {
        svg: "http://www.w3.org/2000/svg"
    }, tests = {}, inputs = {}, attrs = {}, classes = [], slice = classes.slice, featureName, injectElementWithStyles = function(rule, callback, nodes, testnames) {
        var style, ret, node, docOverflow, div = document.createElement("div"), body = document.body, fakeBody = body || document.createElement("body");
        if (parseInt(nodes, 10)) {
            while (nodes--) {
                node = document.createElement("div");
                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                div.appendChild(node);
            }
        }
        style = [ "&#173;", '<style id="s', mod, '">', rule, "</style>" ].join("");
        div.id = mod;
        (body ? div : fakeBody).innerHTML += style;
        fakeBody.appendChild(div);
        if (!body) {
            fakeBody.style.background = "";
            fakeBody.style.overflow = "hidden";
            docOverflow = docElement.style.overflow;
            docElement.style.overflow = "hidden";
            docElement.appendChild(fakeBody);
        }
        ret = callback(div, rule);
        if (!body) {
            fakeBody.parentNode.removeChild(fakeBody);
            docElement.style.overflow = docOverflow;
        } else {
            div.parentNode.removeChild(div);
        }
        return !!ret;
    }, testMediaQuery = function(mq) {
        var matchMedia = window.matchMedia || window.msMatchMedia;
        if (matchMedia) {
            return matchMedia(mq) && matchMedia(mq).matches || false;
        }
        var bool;
        injectElementWithStyles("@media " + mq + " { #" + mod + " { position: absolute; } }", function(node) {
            bool = (window.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle)["position"] == "absolute";
        });
        return bool;
    }, isEventSupported = function() {
        var TAGNAMES = {
            select: "input",
            change: "input",
            submit: "form",
            reset: "form",
            error: "img",
            load: "img",
            abort: "img"
        };
        function isEventSupported(eventName, element) {
            element = element || document.createElement(TAGNAMES[eventName] || "div");
            eventName = "on" + eventName;
            var isSupported = eventName in element;
            if (!isSupported) {
                if (!element.setAttribute) {
                    element = document.createElement("div");
                }
                if (element.setAttribute && element.removeAttribute) {
                    element.setAttribute(eventName, "");
                    isSupported = is(element[eventName], "function");
                    if (!is(element[eventName], "undefined")) {
                        element[eventName] = undefined;
                    }
                    element.removeAttribute(eventName);
                }
            }
            element = null;
            return isSupported;
        }
        return isEventSupported;
    }(), _hasOwnProperty = {}.hasOwnProperty, hasOwnProp;
    if (!is(_hasOwnProperty, "undefined") && !is(_hasOwnProperty.call, "undefined")) {
        hasOwnProp = function(object, property) {
            return _hasOwnProperty.call(object, property);
        };
    } else {
        hasOwnProp = function(object, property) {
            return property in object && is(object.constructor.prototype[property], "undefined");
        };
    }
    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) {
            var target = this;
            if (typeof target != "function") {
                throw new TypeError();
            }
            var args = slice.call(arguments, 1), bound = function() {
                if (this instanceof bound) {
                    var F = function() {};
                    F.prototype = target.prototype;
                    var self = new F();
                    var result = target.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) {
                        return result;
                    }
                    return self;
                } else {
                    return target.apply(that, args.concat(slice.call(arguments)));
                }
            };
            return bound;
        };
    }
    function setCss(str) {
        mStyle.cssText = str;
    }
    function setCssAll(str1, str2) {
        return setCss(prefixes.join(str1 + ";") + (str2 || ""));
    }
    function is(obj, type) {
        return typeof obj === type;
    }
    function contains(str, substr) {
        return !!~("" + str).indexOf(substr);
    }
    function testProps(props, prefixed) {
        for (var i in props) {
            var prop = props[i];
            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == "pfx" ? prop : true;
            }
        }
        return false;
    }
    function testDOMProps(props, obj, elem) {
        for (var i in props) {
            var item = obj[props[i]];
            if (item !== undefined) {
                if (elem === false) return props[i];
                if (is(item, "function")) {
                    return item.bind(elem || obj);
                }
                return item;
            }
        }
        return false;
    }
    function testPropsAll(prop, prefixed, elem) {
        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + " " + cssomPrefixes.join(ucProp + " ") + ucProp).split(" ");
        if (is(prefixed, "string") || is(prefixed, "undefined")) {
            return testProps(props, prefixed);
        } else {
            props = (prop + " " + domPrefixes.join(ucProp + " ") + ucProp).split(" ");
            return testDOMProps(props, prefixed, elem);
        }
    }
    tests["flexbox"] = function() {
        return testPropsAll("flexWrap");
    };
    tests["flexboxlegacy"] = function() {
        return testPropsAll("boxDirection");
    };
    tests["canvas"] = function() {
        var elem = document.createElement("canvas");
        return !!(elem.getContext && elem.getContext("2d"));
    };
    tests["canvastext"] = function() {
        return !!(Modernizr["canvas"] && is(document.createElement("canvas").getContext("2d").fillText, "function"));
    };
    tests["webgl"] = function() {
        return !!window.WebGLRenderingContext;
    };
    tests["touch"] = function() {
        var bool;
        if ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) {
            bool = true;
        } else {
            injectElementWithStyles([ "@media (", prefixes.join("touch-enabled),("), mod, ")", "{#modernizr{top:9px;position:absolute}}" ].join(""), function(node) {
                bool = node.offsetTop === 9;
            });
        }
        return bool;
    };
    tests["geolocation"] = function() {
        return "geolocation" in navigator;
    };
    tests["postmessage"] = function() {
        return !!window.postMessage;
    };
    tests["websqldatabase"] = function() {
        return !!window.openDatabase;
    };
    tests["indexedDB"] = function() {
        return !!testPropsAll("indexedDB", window);
    };
    tests["hashchange"] = function() {
        return isEventSupported("hashchange", window) && (document.documentMode === undefined || document.documentMode > 7);
    };
    tests["history"] = function() {
        return !!(window.history && history.pushState);
    };
    tests["draganddrop"] = function() {
        var div = document.createElement("div");
        return "draggable" in div || "ondragstart" in div && "ondrop" in div;
    };
    tests["websockets"] = function() {
        return "WebSocket" in window || "MozWebSocket" in window;
    };
    tests["rgba"] = function() {
        setCss("background-color:rgba(150,255,150,.5)");
        return contains(mStyle.backgroundColor, "rgba");
    };
    tests["hsla"] = function() {
        setCss("background-color:hsla(120,40%,100%,.5)");
        return contains(mStyle.backgroundColor, "rgba") || contains(mStyle.backgroundColor, "hsla");
    };
    tests["multiplebgs"] = function() {
        setCss("background:url(https://),url(https://),red url(https://)");
        return /(url\s*\(.*?){3}/.test(mStyle.background);
    };
    tests["backgroundsize"] = function() {
        return testPropsAll("backgroundSize");
    };
    tests["borderimage"] = function() {
        return testPropsAll("borderImage");
    };
    tests["borderradius"] = function() {
        return testPropsAll("borderRadius");
    };
    tests["boxshadow"] = function() {
        return testPropsAll("boxShadow");
    };
    tests["textshadow"] = function() {
        return document.createElement("div").style.textShadow === "";
    };
    tests["opacity"] = function() {
        setCssAll("opacity:.55");
        return /^0.55$/.test(mStyle.opacity);
    };
    tests["cssanimations"] = function() {
        return testPropsAll("animationName");
    };
    tests["csscolumns"] = function() {
        return testPropsAll("columnCount");
    };
    tests["cssgradients"] = function() {
        var str1 = "background-image:", str2 = "gradient(linear,left top,right bottom,from(#9f9),to(white));", str3 = "linear-gradient(left top,#9f9, white);";
        setCss((str1 + "-webkit- ".split(" ").join(str2 + str1) + prefixes.join(str3 + str1)).slice(0, -str1.length));
        return contains(mStyle.backgroundImage, "gradient");
    };
    tests["cssreflections"] = function() {
        return testPropsAll("boxReflect");
    };
    tests["csstransforms"] = function() {
        return !!testPropsAll("transform");
    };
    tests["csstransforms3d"] = function() {
        var ret = !!testPropsAll("perspective");
        if (ret && "webkitPerspective" in docElement.style) {
            injectElementWithStyles("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}", function(node, rule) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
            });
        }
        return ret;
    };
    tests["csstransitions"] = function() {
        return testPropsAll("transition");
    };
    tests["fontface"] = function() {
        var bool;
        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function(node, rule) {
            var style = document.getElementById("smodernizr"), sheet = style.sheet || style.styleSheet, cssText = sheet ? sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || "" : "";
            bool = /src/i.test(cssText) && cssText.indexOf(rule.split(" ")[0]) === 0;
        });
        return bool;
    };
    tests["generatedcontent"] = function() {
        var bool;
        injectElementWithStyles([ "#", mod, "{font:0/0 a}#", mod, ':after{content:"', smile, '";visibility:hidden;font:3px/1 a}' ].join(""), function(node) {
            bool = node.offsetHeight >= 3;
        });
        return bool;
    };
    tests["video"] = function() {
        var elem = document.createElement("video"), bool = false;
        try {
            if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, "");
                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, "");
                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, "");
            }
        } catch (e) {}
        return bool;
    };
    tests["audio"] = function() {
        var elem = document.createElement("audio"), bool = false;
        try {
            if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, "");
                bool.mp3 = elem.canPlayType("audio/mpeg;").replace(/^no$/, "");
                bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, "");
                bool.m4a = (elem.canPlayType("audio/x-m4a;") || elem.canPlayType("audio/aac;")).replace(/^no$/, "");
            }
        } catch (e) {}
        return bool;
    };
    tests["localstorage"] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch (e) {
            return false;
        }
    };
    tests["sessionstorage"] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch (e) {
            return false;
        }
    };
    tests["webworkers"] = function() {
        return !!window.Worker;
    };
    tests["applicationcache"] = function() {
        return !!window.applicationCache;
    };
    tests["svg"] = function() {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, "svg").createSVGRect;
    };
    tests["inlinesvg"] = function() {
        var div = document.createElement("div");
        div.innerHTML = "<svg/>";
        return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
    };
    tests["smil"] = function() {
        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, "animate")));
    };
    tests["svgclippaths"] = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, "clipPath")));
    };
    function webforms() {
        Modernizr["input"] = function(props) {
            for (var i = 0, len = props.length; i < len; i++) {
                attrs[props[i]] = !!(props[i] in inputElem);
            }
            if (attrs.list) {
                attrs.list = !!(document.createElement("datalist") && window.HTMLDataListElement);
            }
            return attrs;
        }("autocomplete autofocus list placeholder max min multiple pattern required step".split(" "));
        Modernizr["inputtypes"] = function(props) {
            for (var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++) {
                inputElem.setAttribute("type", inputElemType = props[i]);
                bool = inputElem.type !== "text";
                if (bool) {
                    inputElem.value = smile;
                    inputElem.style.cssText = "position:absolute;visibility:hidden;";
                    if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {
                        docElement.appendChild(inputElem);
                        defaultView = document.defaultView;
                        bool = defaultView.getComputedStyle && defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== "textfield" && inputElem.offsetHeight !== 0;
                        docElement.removeChild(inputElem);
                    } else if (/^(search|tel)$/.test(inputElemType)) {} else if (/^(url|email)$/.test(inputElemType)) {
                        bool = inputElem.checkValidity && inputElem.checkValidity() === false;
                    } else {
                        bool = inputElem.value != smile;
                    }
                }
                inputs[props[i]] = !!bool;
            }
            return inputs;
        }("search tel url email datetime date month week time datetime-local number range color".split(" "));
    }
    for (var feature in tests) {
        if (hasOwnProp(tests, feature)) {
            featureName = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();
            classes.push((Modernizr[featureName] ? "" : "no-") + featureName);
        }
    }
    Modernizr.input || webforms();
    Modernizr.addTest = function(feature, test) {
        if (typeof feature == "object") {
            for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                    Modernizr.addTest(key, feature[key]);
                }
            }
        } else {
            feature = feature.toLowerCase();
            if (Modernizr[feature] !== undefined) {
                return Modernizr;
            }
            test = typeof test == "function" ? test() : test;
            if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += " " + (test ? "" : "no-") + feature;
            }
            Modernizr[feature] = test;
        }
        return Modernizr;
    };
    setCss("");
    modElem = inputElem = null;
    (function(window, document) {
        var version = "3.7.0";
        var options = window.html5 || {};
        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
        var supportsHtml5Styles;
        var expando = "_html5shiv";
        var expanID = 0;
        var expandoData = {};
        var supportsUnknownElements;
        (function() {
            try {
                var a = document.createElement("a");
                a.innerHTML = "<xyz></xyz>";
                supportsHtml5Styles = "hidden" in a;
                supportsUnknownElements = a.childNodes.length == 1 || function() {
                    document.createElement("a");
                    var frag = document.createDocumentFragment();
                    return typeof frag.cloneNode == "undefined" || typeof frag.createDocumentFragment == "undefined" || typeof frag.createElement == "undefined";
                }();
            } catch (e) {
                supportsHtml5Styles = true;
                supportsUnknownElements = true;
            }
        })();
        function addStyleSheet(ownerDocument, cssText) {
            var p = ownerDocument.createElement("p"), parent = ownerDocument.getElementsByTagName("head")[0] || ownerDocument.documentElement;
            p.innerHTML = "x<style>" + cssText + "</style>";
            return parent.insertBefore(p.lastChild, parent.firstChild);
        }
        function getElements() {
            var elements = html5.elements;
            return typeof elements == "string" ? elements.split(" ") : elements;
        }
        function getExpandoData(ownerDocument) {
            var data = expandoData[ownerDocument[expando]];
            if (!data) {
                data = {};
                expanID++;
                ownerDocument[expando] = expanID;
                expandoData[expanID] = data;
            }
            return data;
        }
        function createElement(nodeName, ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createElement(nodeName);
            }
            if (!data) {
                data = getExpandoData(ownerDocument);
            }
            var node;
            if (data.cache[nodeName]) {
                node = data.cache[nodeName].cloneNode();
            } else if (saveClones.test(nodeName)) {
                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
            } else {
                node = data.createElem(nodeName);
            }
            return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
        }
        function createDocumentFragment(ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createDocumentFragment();
            }
            data = data || getExpandoData(ownerDocument);
            var clone = data.frag.cloneNode(), i = 0, elems = getElements(), l = elems.length;
            for (;i < l; i++) {
                clone.createElement(elems[i]);
            }
            return clone;
        }
        function shivMethods(ownerDocument, data) {
            if (!data.cache) {
                data.cache = {};
                data.createElem = ownerDocument.createElement;
                data.createFrag = ownerDocument.createDocumentFragment;
                data.frag = data.createFrag();
            }
            ownerDocument.createElement = function(nodeName) {
                if (!html5.shivMethods) {
                    return data.createElem(nodeName);
                }
                return createElement(nodeName, ownerDocument, data);
            };
            ownerDocument.createDocumentFragment = Function("h,f", "return function(){" + "var n=f.cloneNode(),c=n.createElement;" + "h.shivMethods&&(" + getElements().join().replace(/[\w\-]+/g, function(nodeName) {
                data.createElem(nodeName);
                data.frag.createElement(nodeName);
                return 'c("' + nodeName + '")';
            }) + ");return n}")(html5, data.frag);
        }
        function shivDocument(ownerDocument) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            var data = getExpandoData(ownerDocument);
            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
                data.hasCSS = !!addStyleSheet(ownerDocument, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}" + "mark{background:#FF0;color:#000}" + "template{display:none}");
            }
            if (!supportsUnknownElements) {
                shivMethods(ownerDocument, data);
            }
            return ownerDocument;
        }
        var html5 = {
            elements: options.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
            version: version,
            shivCSS: options.shivCSS !== false,
            supportsUnknownElements: supportsUnknownElements,
            shivMethods: options.shivMethods !== false,
            type: "default",
            shivDocument: shivDocument,
            createElement: createElement,
            createDocumentFragment: createDocumentFragment
        };
        window.html5 = html5;
        shivDocument(document);
    })(this, document);
    Modernizr._version = version;
    Modernizr._prefixes = prefixes;
    Modernizr._domPrefixes = domPrefixes;
    Modernizr._cssomPrefixes = cssomPrefixes;
    Modernizr.mq = testMediaQuery;
    Modernizr.hasEvent = isEventSupported;
    Modernizr.testProp = function(prop) {
        return testProps([ prop ]);
    };
    Modernizr.testAllProps = testPropsAll;
    Modernizr.testStyles = injectElementWithStyles;
    Modernizr.prefixed = function(prop, obj, elem) {
        if (!obj) {
            return testPropsAll(prop, "pfx");
        } else {
            return testPropsAll(prop, obj, elem);
        }
    };
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (enableClasses ? " js " + classes.join(" ") : "");
    return Modernizr;
}(this, this.document);

var libFuncName = null;

if (typeof jQuery === "undefined" && typeof Zepto === "undefined" && typeof $ === "function") {
    libFuncName = $;
} else if (typeof jQuery === "function") {
    libFuncName = jQuery;
} else if (typeof Zepto === "function") {
    libFuncName = Zepto;
} else {
    throw new TypeError();
}

(function($, window, document, undefined) {
    "use strict";
    $("head").append('<meta class="foundation-mq-small">');
    $("head").append('<meta class="foundation-mq-medium">');
    $("head").append('<meta class="foundation-mq-large">');
    window.matchMedia = window.matchMedia || function(doc, undefined) {
        "use strict";
        var bool, docElem = doc.documentElement, refNode = docElem.firstElementChild || docElem.firstChild, fakeBody = doc.createElement("body"), div = doc.createElement("div");
        div.id = "mq-test-1";
        div.style.cssText = "position:absolute;top:-100em";
        fakeBody.style.background = "none";
        fakeBody.appendChild(div);
        return function(q) {
            div.innerHTML = '&shy;<style media="' + q + '"> #mq-test-1 { width: 42px; }</style>';
            docElem.insertBefore(fakeBody, refNode);
            bool = div.offsetWidth === 42;
            docElem.removeChild(fakeBody);
            return {
                matches: bool,
                media: q
            };
        };
    }(document);
    if (!Array.prototype.filter) {
        Array.prototype.filter = function(fun) {
            "use strict";
            if (this == null) {
                throw new TypeError();
            }
            var t = Object(this), len = t.length >>> 0;
            if (typeof fun !== "function") {
                return;
            }
            var res = [], thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in t) {
                    var val = t[i];
                    if (fun && fun.call(thisp, val, i, t)) {
                        res.push(val);
                    }
                }
            }
            return res;
        };
    }
    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }
            var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {}, fBound = function() {
                return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
            };
            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();
            return fBound;
        };
    }
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(searchElement) {
            "use strict";
            if (this == null) {
                throw new TypeError();
            }
            var t = Object(this);
            var len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }
            var n = 0;
            if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n != n) {
                    n = 0;
                } else if (n != 0 && n != Infinity && n != -Infinity) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }
            if (n >= len) {
                return -1;
            }
            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
            for (;k < len; k++) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        };
    }
    $.fn.stop = $.fn.stop || function() {
        return this;
    };
    window.Foundation = {
        name: "Foundation",
        version: "4.3.2",
        cache: {},
        media_queries: {
            small: $(".foundation-mq-small").css("font-family").replace(/\'/g, ""),
            medium: $(".foundation-mq-medium").css("font-family").replace(/\'/g, ""),
            large: $(".foundation-mq-large").css("font-family").replace(/\'/g, "")
        },
        stylesheet: $("<style></style>").appendTo("head")[0].sheet,
        init: function(scope, libraries, method, options, response, nc) {
            var library_arr, args = [ scope, method, options, response ], responses = [], nc = nc || false;
            if (nc) this.nc = nc;
            this.rtl = /rtl/i.test($("html").attr("dir"));
            this.scope = scope || this.scope;
            if (libraries && typeof libraries === "string" && !/reflow/i.test(libraries)) {
                if (/off/i.test(libraries)) return this.off();
                library_arr = libraries.split(" ");
                if (library_arr.length > 0) {
                    for (var i = library_arr.length - 1; i >= 0; i--) {
                        responses.push(this.init_lib(library_arr[i], args));
                    }
                }
            } else {
                if (/reflow/i.test(libraries)) args[1] = "reflow";
                for (var lib in this.libs) {
                    responses.push(this.init_lib(lib, args));
                }
            }
            if (typeof libraries === "function") {
                args.unshift(libraries);
            }
            return this.response_obj(responses, args);
        },
        response_obj: function(response_arr, args) {
            for (var i = 0, len = args.length; i < len; i++) {
                if (typeof args[i] === "function") {
                    return args[i]({
                        errors: response_arr.filter(function(s) {
                            if (typeof s === "string") return s;
                        })
                    });
                }
            }
            return response_arr;
        },
        init_lib: function(lib, args) {
            return this.trap(function() {
                if (this.libs.hasOwnProperty(lib)) {
                    this.patch(this.libs[lib]);
                    return this.libs[lib].init.apply(this.libs[lib], args);
                } else {
                    return function() {};
                }
            }.bind(this), lib);
        },
        trap: function(fun, lib) {
            if (!this.nc) {
                try {
                    return fun();
                } catch (e) {
                    return this.error({
                        name: lib,
                        message: "could not be initialized",
                        more: e.name + " " + e.message
                    });
                }
            }
            return fun();
        },
        patch: function(lib) {
            this.fix_outer(lib);
            lib.scope = this.scope;
            lib.rtl = this.rtl;
        },
        inherit: function(scope, methods) {
            var methods_arr = methods.split(" ");
            for (var i = methods_arr.length - 1; i >= 0; i--) {
                if (this.lib_methods.hasOwnProperty(methods_arr[i])) {
                    this.libs[scope.name][methods_arr[i]] = this.lib_methods[methods_arr[i]];
                }
            }
        },
        random_str: function(length) {
            var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
            if (!length) {
                length = Math.floor(Math.random() * chars.length);
            }
            var str = "";
            for (var i = 0; i < length; i++) {
                str += chars[Math.floor(Math.random() * chars.length)];
            }
            return str;
        },
        libs: {},
        lib_methods: {
            set_data: function(node, data) {
                var id = [ this.name, +new Date(), Foundation.random_str(5) ].join("-");
                Foundation.cache[id] = data;
                node.attr("data-" + this.name + "-id", id);
                return data;
            },
            get_data: function(node) {
                return Foundation.cache[node.attr("data-" + this.name + "-id")];
            },
            remove_data: function(node) {
                if (node) {
                    delete Foundation.cache[node.attr("data-" + this.name + "-id")];
                    node.attr("data-" + this.name + "-id", "");
                } else {
                    $("[data-" + this.name + "-id]").each(function() {
                        delete Foundation.cache[$(this).attr("data-" + this.name + "-id")];
                        $(this).attr("data-" + this.name + "-id", "");
                    });
                }
            },
            throttle: function(fun, delay) {
                var timer = null;
                return function() {
                    var context = this, args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(function() {
                        fun.apply(context, args);
                    }, delay);
                };
            },
            data_options: function(el) {
                var opts = {}, ii, p, opts_arr = (el.attr("data-options") || ":").split(";"), opts_len = opts_arr.length;
                function isNumber(o) {
                    return !isNaN(o - 0) && o !== null && o !== "" && o !== false && o !== true;
                }
                function trim(str) {
                    if (typeof str === "string") return $.trim(str);
                    return str;
                }
                for (ii = opts_len - 1; ii >= 0; ii--) {
                    p = opts_arr[ii].split(":");
                    if (/true/i.test(p[1])) p[1] = true;
                    if (/false/i.test(p[1])) p[1] = false;
                    if (isNumber(p[1])) p[1] = parseInt(p[1], 10);
                    if (p.length === 2 && p[0].length > 0) {
                        opts[trim(p[0])] = trim(p[1]);
                    }
                }
                return opts;
            },
            delay: function(fun, delay) {
                return setTimeout(fun, delay);
            },
            scrollTo: function(el, to, duration) {
                if (duration < 0) return;
                var difference = to - $(window).scrollTop();
                var perTick = difference / duration * 10;
                this.scrollToTimerCache = setTimeout(function() {
                    if (!isNaN(parseInt(perTick, 10))) {
                        window.scrollTo(0, $(window).scrollTop() + perTick);
                        this.scrollTo(el, to, duration - 10);
                    }
                }.bind(this), 10);
            },
            scrollLeft: function(el) {
                if (!el.length) return;
                return "scrollLeft" in el[0] ? el[0].scrollLeft : el[0].pageXOffset;
            },
            empty: function(obj) {
                if (obj.length && obj.length > 0) return false;
                if (obj.length && obj.length === 0) return true;
                for (var key in obj) {
                    if (hasOwnProperty.call(obj, key)) return false;
                }
                return true;
            },
            addCustomRule: function(rule, media) {
                if (media === undefined) {
                    Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
                } else {
                    var query = Foundation.media_queries[media];
                    if (query !== undefined) {
                        Foundation.stylesheet.insertRule("@media " + Foundation.media_queries[media] + "{ " + rule + " }");
                    }
                }
            }
        },
        fix_outer: function(lib) {
            lib.outerHeight = function(el, bool) {
                if (typeof Zepto === "function") {
                    return el.height();
                }
                if (typeof bool !== "undefined") {
                    return el.outerHeight(bool);
                }
                return el.outerHeight();
            };
            lib.outerWidth = function(el, bool) {
                if (typeof Zepto === "function") {
                    return el.width();
                }
                if (typeof bool !== "undefined") {
                    return el.outerWidth(bool);
                }
                return el.outerWidth();
            };
        },
        error: function(error) {
            return error.name + " " + error.message + "; " + error.more;
        },
        off: function() {
            $(this.scope).off(".fndtn");
            $(window).off(".fndtn");
            return true;
        },
        zj: $
    };
    $.fn.foundation = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        return this.each(function() {
            Foundation.init.apply(Foundation, [ this ].concat(args));
            return this;
        });
    };
})(libFuncName, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.forms = {
        name: "forms",
        version: "4.3.2",
        cache: {},
        settings: {
            disable_class: "no-custom",
            last_combo: null
        },
        init: function(scope, method, options) {
            if (typeof method === "object") {
                $.extend(true, this.settings, method);
            }
            if (typeof method !== "string") {
                if (!this.settings.init) {
                    this.events();
                }
                this.assemble();
                return this.settings.init;
            } else {
                return this[method].call(this, options);
            }
        },
        assemble: function() {
            var forms = this;
            $('.form.custom input[type="radio"], [type="checkbox"]', $(this.scope)).not('[data-customforms="disabled"]').not("." + this.settings.disable_class).each(function (idx, sel) {
                forms.set_custom_markup(sel);                
            }).change(function() {
                forms.set_custom_markup(this);
            });
            $(".form.custom select", $(this.scope)).not('[data-customforms="disabled"]').not("." + this.settings.disable_class).not("[multiple=multiple]").each(this.append_custom_select);
        },
        events: function() {
            var self = this;
            $(this.scope).on("click.fndtn.forms", ".form.custom span.custom.checkbox", function(e) {
                e.preventDefault();
                e.stopPropagation();
                self.toggle_checkbox($(this));
            }).on("click.fndtn.forms", ".form.custom span.custom.radio", function(e) {
                e.preventDefault();
                e.stopPropagation();
                self.toggle_radio($(this));                
            }).on("change.fndtn.forms", ".form.custom select", function(e, force_refresh) {
                if ($(this).is('[data-customforms="disabled"]')) return;
                self.refresh_custom_select($(this), force_refresh);
                // Set the selected state hidden field BLT 11/12/2015
                $("#cphMainContent_C012_hidSelectedState").val($(this).find("option:selected").val());
            }).on("click.fndtn.forms", ".form.custom label", function(e) {
                if ($(e.target).is("label")) {
                    var $associatedElement = $("#" + self.escape($(this).attr("for"))).not('[data-customforms="disabled"]'), $customCheckbox, $customRadio;
                    if ($associatedElement.length !== 0) {
                        if ($associatedElement.attr("type") === "checkbox") {
                            e.preventDefault();
                            $customCheckbox = $(this).find("span.custom.checkbox");
                            if ($customCheckbox.length === 0) {
                                $customCheckbox = $associatedElement.add(this).siblings("span.custom.checkbox").first();
                            }
                            self.toggle_checkbox($customCheckbox);
                        } else if ($associatedElement.attr("type") === "radio") {
                            e.preventDefault();
                            $customRadio = $(this).find("span.custom.radio");
                            if ($customRadio.length === 0) {
                                $customRadio = $associatedElement.add(this).siblings("span.custom.radio").first();
                            }
                            self.toggle_radio($customRadio);
                        }
                    }
                }
            }).on("mousedown.fndtn.forms", ".form.custom div.custom.dropdown", function() {
                return false;
            }).on("click.fndtn.forms", ".form.custom div.custom.dropdown a.current, .form.custom div.custom.dropdown a.selector", function(e) {
                var $this = $(this), $dropdown = $this.closest("div.custom.dropdown"), $select = getFirstPrevSibling($dropdown, "select");
                if (!$dropdown.hasClass("open")) $(self.scope).trigger("click");
                e.preventDefault();
                if (false === $select.is(":disabled")) {
                    $dropdown.toggleClass("open");
                    if ($dropdown.hasClass("open")) {
                        $(self.scope).on("click.fndtn.forms.customdropdown", function() {
                            $dropdown.removeClass("open");
                            $(self.scope).off(".fndtn.forms.customdropdown");
                        });
                    } else {
                        $(self.scope).on(".fndtn.forms.customdropdown");
                    }
                    return false;
                }
            }).on("click.fndtn.forms touchend.fndtn.forms", ".form.custom div.custom.dropdown li", function(e) {
                var $this = $(this), $customDropdown = $this.closest("div.custom.dropdown"), $select = getFirstPrevSibling($customDropdown, "select"), selectedIndex = 0;
                e.preventDefault();
                e.stopPropagation();
                if (!$(this).hasClass("disabled")) {
                    $("div.dropdown").not($customDropdown).removeClass("open");
                    var $oldThis = $this.closest("ul").find("li.selected");
                    $oldThis.removeClass("selected");
                    $this.addClass("selected");
                    $customDropdown.removeClass("open").find("a.current").text($this.text());
                    $this.closest("ul").find("li").each(function(index) {
                        if ($this[0] === this) {
                            selectedIndex = index;
                        }
                    });
                    $select[0].selectedIndex = selectedIndex;
                    $select.data("prevalue", $oldThis.html());
                    if (typeof document.createEvent != "undefined") {
                        var event = document.createEvent("HTMLEvents");
                        event.initEvent("change", true, true);
                        $select[0].dispatchEvent(event);
                    } else {
                        $select[0].fireEvent("onchange");
                    }
                }
            });
            $(window).on("keydown", function(e) {
                var focus = document.activeElement, self = Foundation.libs.forms, dropdown = $(".custom.dropdown"), select = getFirstPrevSibling(dropdown, "select"), inputs = $("input,select,textarea,button");
                if (dropdown.length > 0 && dropdown.hasClass("open")) {
                    e.preventDefault();
                    if (e.which === 9) {
                        $(inputs[$(inputs).index(select) + 1]).focus();
                        dropdown.removeClass("open");
                    }
                    if (e.which === 13) {
                        dropdown.find("li.selected").trigger("click");
                    }
                    if (e.which === 27) {
                        dropdown.removeClass("open");
                    }
                    if (e.which >= 65 && e.which <= 90) {
                        var next = self.go_to(dropdown, e.which), current = dropdown.find("li.selected");
                        if (next) {
                            current.removeClass("selected");
                            self.scrollTo(next.addClass("selected"), 300);
                        }
                    }
                    if (e.which === 38) {
                        var current = dropdown.find("li.selected"), prev = current.prev(":not(.disabled)");
                        if (prev.length > 0) {
                            prev.parent()[0].scrollTop = prev.parent().scrollTop() - self.outerHeight(prev);
                            current.removeClass("selected");
                            prev.addClass("selected");
                        }
                    } else if (e.which === 40) {
                        var current = dropdown.find("li.selected"), next = current.next(":not(.disabled)");
                        if (next.length > 0) {
                            next.parent()[0].scrollTop = next.parent().scrollTop() + self.outerHeight(next);
                            current.removeClass("selected");
                            next.addClass("selected");
                        }
                    }
                }
            });
            $(window).on("keyup", function(e) {
                var focus = document.activeElement, dropdown = $(".custom.dropdown");
                if (focus === dropdown.find(".current")[0]) {
                    dropdown.find(".selector").focus().click();
                }
            });
            this.settings.init = true;
        },
        go_to: function(dropdown, character) {
            var lis = dropdown.find("li"), count = lis.length;
            if (count > 0) {
                for (var i = 0; i < count; i++) {
                    var first_letter = lis.eq(i).text().charAt(0).toLowerCase();
                    if (first_letter === String.fromCharCode(character).toLowerCase()) return lis.eq(i);
                }
            }
        },
        scrollTo: function(el, duration) {
            if (duration < 0) return;
            var parent = el.parent();
            var li_height = this.outerHeight(el);
            var difference = li_height * el.index() - parent.scrollTop();
            var perTick = difference / duration * 10;
            this.scrollToTimerCache = setTimeout(function() {
                if (!isNaN(parseInt(perTick, 10))) {
                    parent[0].scrollTop = parent.scrollTop() + perTick;
                    this.scrollTo(el, duration - 10);
                }
            }.bind(this), 10);
        },
        set_custom_markup: function(sel) {
            var $this = $(sel), type = $this.attr("type"), $span = $this.next("span.custom." + type);
            if (!$this.parent().hasClass("switch")) {
                $this.addClass("hidden-field");
            }
            if ($span.length === 0) {
                $span = $('<span class="custom ' + type + '"></span>').insertAfter($this);
            }
           
            $span.toggleClass("checked", $this.is(":checked"));
            $span.toggleClass("disabled", $this.is(":disabled"));
        },
        append_custom_select: function (idx, sel) {
            var self = Foundation.libs.forms, $this = $(sel), $customSelect = $this.next("div.custom.dropdown"), $customList = $customSelect.find("ul"), $selectCurrent = $customSelect.find(".current"), $selector = $customSelect.find(".selector"), $options = $this.find("option"), $selectedOption = $options.filter(":selected"), copyClasses = $this.attr("class") ? $this.attr("class").split(" ") : [], maxWidth = 0, liHtml = "", $listItems, $currentSelect = false;
            if ($customSelect.length === 0) {
                var customSelectSize = $this.hasClass("small") ? "small" : $this.hasClass("medium") ? "medium" : $this.hasClass("large") ? "large" : $this.hasClass("expand") ? "expand" : "";
                $customSelect = $('<div class="' + [ "custom", "dropdown", customSelectSize ].concat(copyClasses).filter(function(item, idx, arr) {
                    if (item === "") return false;
                    return arr.indexOf(item) === idx;
                }).join(" ") + '"><a href="#" class="selector"></a><ul /></div>');
                $selector = $customSelect.find(".selector");
                $customList = $customSelect.find("ul");
                liHtml = $options.map(function() {
                    var copyClasses = $(this).attr("class") ? $(this).attr("class") : "";
                    return "<li class='" + copyClasses + "'>" + $(this).html() + "</li>";
                }).get().join("");
                $customList.append(liHtml);
                $currentSelect = $customSelect.prepend('<a href="#" class="current">' + ($selectedOption.html() || "") + "</a>").find(".current");
                $this.after($customSelect).addClass("hidden-field");
            } else {
                liHtml = $options.map(function() {
                    return "<li>" + $(this).html() + "</li>";
                }).get().join("");
                $customList.html("").append(liHtml);
            }
            self.assign_id($this, $customSelect);
            $customSelect.toggleClass("disabled", $this.is(":disabled"));
            $listItems = $customList.find("li");
            self.cache[$customSelect.data("id")] = $listItems.length;
            $options.each(function(index) {
                if (this.selected) {
                    $listItems.eq(index).addClass("selected");
                    if ($currentSelect) {
                        $currentSelect.html($(this).html());
                    }
                }
                if ($(this).is(":disabled")) {
                    $listItems.eq(index).addClass("disabled");
                }
            });
            if (!$customSelect.is(".small, .medium, .large, .expand")) {
                $customSelect.addClass("open");
                var self = Foundation.libs.forms;
                self.hidden_fix.adjust($customList);
                maxWidth = self.outerWidth($listItems) > maxWidth ? self.outerWidth($listItems) : maxWidth;
                Foundation.libs.forms.hidden_fix.reset();
                $customSelect.removeClass("open");
            }
        },
        assign_id: function($select, $customSelect) {
            var id = [ +new Date(), Foundation.random_str(5) ].join("-");
            $select.attr("data-id", id);
            $customSelect.attr("data-id", id);
        },
        refresh_custom_select: function($select, force_refresh) {
            var self = this;
            var maxWidth = 0, $customSelect = $select.next(), $options = $select.find("option"), $customList = $customSelect.find("ul"), $listItems = $customSelect.find("li"), $selectedValue = "";
            if ($options.length !== this.cache[$customSelect.data("id")] || force_refresh) {
                $customList.html("");
                var customSelectHtml = "";
                $options.each(function() {
                    var $this = $(this), thisHtml = $this.html(), thisSelected = this.selected;
                    customSelectHtml += '<li class="' + (thisSelected ? " selected " : "") + ($this.is(":disabled") ? " disabled " : "") + '">' + thisHtml + "</li>";
                    if (thisSelected) {
                        $customSelect.find(".current").html(thisHtml);
                    }
                });
                $customList.html(customSelectHtml);
                $customSelect.removeAttr("style");
                $customList.removeAttr("style");
                $customSelect.find("li").each(function() {
                    $customSelect.addClass("open");
                    if (self.outerWidth($(this)) > maxWidth) {
                        maxWidth = self.outerWidth($(this));
                    }
                    $customSelect.removeClass("open");
                });
                $listItems = $customSelect.find("li");
                this.cache[$customSelect.data("id")] = $listItems.length;                
            }
        },
        refresh_custom_selection: function ($select) {
            var selectedValue = $("option:selected", $select).text();
            $("a.current", $select.next()).text(selectedValue);
        },
        toggle_checkbox: function ($element) {
            var $input = $element.prev(), input = $input[0];
            // Test for undefined to handle Janssen LSO BLT 11/1/2017
            if (input == undefined) return;
            if (false === $input.is(":disabled")) {
                input.checked = input.checked ? false : true;
                $element.toggleClass("checked");
                $input.trigger("change");
            }
        },
        toggle_radio: function ($element) {
            var $input = $element.prev(), $form = $input.closest(".form.custom"), input = $input[0];
            if (false === $input.is(":disabled")) {
                $form.find('input[type="radio"][name="' + this.escape($input.attr("name")) + '"]').next().not($element).removeClass("checked");
                if (!$element.hasClass("checked")) {
                    $element.toggleClass("checked");
                }
                input.checked = $element.hasClass("checked");
                $input.trigger("change");
                // Set the id selected in the hidden field BLT 11/12/2015
                var hidItem = $input.next().next();
                var hidId = hidItem.val();
                // Check the name of the selected item to determine which hidden field to save to BLT 01/18/16
                if (input.name == "radioPT") {
                    $("#cphMainContent_C012_hidSelectedPatientPrescribedType").val(hidId);
                }
                else if (input.name == "radioPI") {
                    $("#cphMainContent_C012_hidSelectedPatientIndication").val(hidId);
                }
            }
        },
        escape: function(text) {
            if (!text) return "";
            return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        },
        hidden_fix: {
            tmp: [],
            hidden: null,
            adjust: function($child) {
                var _self = this;
                _self.hidden = $child.parents();
                _self.hidden = _self.hidden.add($child).filter(":hidden");
                _self.hidden.each(function() {
                    var $elem = $(this);
                    _self.tmp.push($elem.attr("style"));
                    $elem.css({
                        visibility: "hidden",
                        display: "block"
                    });
                });
            },
            reset: function() {
                var _self = this;
                _self.hidden.each(function(i) {
                    var $elem = $(this), _tmp = _self.tmp[i];
                    if (_tmp === undefined) $elem.removeAttr("style"); else $elem.attr("style", _tmp);
                });
                _self.tmp = [];
                _self.hidden = null;
            }
        },
        off: function() {
            $(this.scope).off(".fndtn.forms");
        },
        reflow: function() {}
    };
    var getFirstPrevSibling = function($el, selector) {
        var $el = $el.prev();
        while ($el.length) {
            if ($el.is(selector)) return $el;
            $el = $el.prev();
        }
        return $();
    };
})(Foundation.zj, this, this.document);

(function($, window, document, undefined) {
    "use strict";
    Foundation.libs.reveal = {
        name: "reveal",
        version: "4.3.2",
        locked: false,
        settings: {
            animation: "fadeAndPop",
            animationSpeed: 250,
            closeOnBackgroundClick: true,
            closeOnEsc: true,
            dismissModalClass: "close-reveal-modal",
            bgClass: "reveal-modal-bg",
            open: function() {},
            opened: function() {},
            close: function() {},
            closed: function() {},
            bg: $(".reveal-modal-bg"),
            css: {
                open: {
                    opacity: 0,
                    visibility: "visible",
                    display: "block"
                },
                close: {
                    opacity: 1,
                    visibility: "hidden",
                    display: "none"
                }
            }
        },
        init: function(scope, method, options) {
            Foundation.inherit(this, "data_options delay");
            if (typeof method === "object") {
                $.extend(true, this.settings, method);
            } else if (typeof options !== "undefined") {
                $.extend(true, this.settings, options);
            }
            if (typeof method !== "string") {
                this.events();
                return this.settings.init;
            } else {
                return this[method].call(this, options);
            }
        },
        events: function() {
            var self = this;
            $(this.scope).off(".fndtn.reveal").on("click.fndtn.reveal", "[data-reveal-id]", function(e) {
                e.preventDefault();
                if (!self.locked) {
                    var element = $(this), ajax = element.data("reveal-ajax");
                    self.locked = true;
                    if (typeof ajax === "undefined") {
                        self.open.call(self, element);
                    } else {
                        var url = ajax === true ? element.attr("href") : ajax;
                        self.open.call(self, element, {
                            url: url
                        });
                    }
                }
            }).on("click.fndtn.reveal touchend", this.close_targets(), function(e) {
                e.preventDefault();
                if (!self.locked) {
                    var settings = $.extend({}, self.settings, self.data_options($(".reveal-modal.open"))), bgClicked = $(e.target)[0] === $("." + settings.bgClass)[0];
                    if (bgClicked && !settings.closeOnBackgroundClick) {
                        return;
                    }
                    self.locked = true;
                    self.close.call(self, bgClicked ? $(".reveal-modal.open") : $(this).closest(".reveal-modal"));
                }
            });
            if ($(this.scope).hasClass("reveal-modal")) {
                $(this.scope).on("open.fndtn.reveal", this.settings.open).on("opened.fndtn.reveal", this.settings.opened).on("opened.fndtn.reveal", this.open_video).on("close.fndtn.reveal", this.settings.close).on("closed.fndtn.reveal", this.settings.closed).on("closed.fndtn.reveal", this.close_video);
            } else {
                $(this.scope).on("open.fndtn.reveal", ".reveal-modal", this.settings.open).on("opened.fndtn.reveal", ".reveal-modal", this.settings.opened).on("opened.fndtn.reveal", ".reveal-modal", this.open_video).on("close.fndtn.reveal", ".reveal-modal", this.settings.close).on("closed.fndtn.reveal", ".reveal-modal", this.settings.closed).on("closed.fndtn.reveal", ".reveal-modal", this.close_video);
            }
            $("body").bind("keyup.reveal", function(event) {
                var open_modal = $(".reveal-modal.open"), settings = $.extend({}, self.settings, self.data_options(open_modal));
                if (event.which === 27 && settings.closeOnEsc) {
                    open_modal.foundation("reveal", "close");
                }
            });
            return true;
        },
        open: function(target, ajax_settings) {
            if (target) {
                if (typeof target.selector !== "undefined") {
                    var modal = $("#" + target.data("reveal-id"));
                } else {
                    var modal = $(this.scope);
                    ajax_settings = target;
                }
            } else {
                var modal = $(this.scope);
            }
            if (!modal.hasClass("open")) {
                var open_modal = $(".reveal-modal.open");
                if (typeof modal.data("css-top") === "undefined") {
                    modal.data("css-top", parseInt(modal.css("top"), 10)).data("offset", this.cache_offset(modal));
                }
                modal.trigger("open");
                if (open_modal.length < 1) {
                    this.toggle_bg();
                }
                if (typeof ajax_settings === "undefined" || !ajax_settings.url) {
                    this.hide(open_modal, this.settings.css.close);
                    this.show(modal, this.settings.css.open);
                } else {
                    var self = this, old_success = typeof ajax_settings.success !== "undefined" ? ajax_settings.success : null;
                    $.extend(ajax_settings, {
                        success: function(data, textStatus, jqXHR) {
                            if ($.isFunction(old_success)) {
                                old_success(data, textStatus, jqXHR);
                            }
                            modal.html(data);
                            $(modal).foundation("section", "reflow");
                            self.hide(open_modal, self.settings.css.close);
                            self.show(modal, self.settings.css.open);
                        }
                    });
                    $.ajax(ajax_settings);
                }
            }
        },
        close: function(modal) {
            var modal = modal && modal.length ? modal : $(this.scope), open_modals = $(".reveal-modal.open");
            if (open_modals.length > 0) {
                this.locked = true;
                modal.trigger("close");
                this.toggle_bg();
                this.hide(open_modals, this.settings.css.close);
            }
        },
        close_targets: function() {
            var base = "." + this.settings.dismissModalClass;
            if (this.settings.closeOnBackgroundClick) {
                return base + ", ." + this.settings.bgClass;
            }
            return base;
        },
        toggle_bg: function() {
            if ($("." + this.settings.bgClass).length === 0) {
                this.settings.bg = $("<div />", {
                    "class": this.settings.bgClass
                }).appendTo("body");
            }
            if (this.settings.bg.filter(":visible").length > 0) {
                this.hide(this.settings.bg);
            } else {
                this.show(this.settings.bg);
            }
        },
        show: function(el, css) {
            if (css) {
                if (el.parent("body").length === 0) {
                    var placeholder = el.wrap('<div style="display: none;" />').parent();
                    el.on("closed.fndtn.reveal.wrapped", function() {
                        el.detach().appendTo(placeholder);
                        el.unwrap().unbind("closed.fndtn.reveal.wrapped");
                    });
                    el.detach().appendTo("body");
                }
                if (/pop/i.test(this.settings.animation)) {
                    css.top = $(window).scrollTop() - el.data("offset") + "px";
                    var end_css = {
                        top: $(window).scrollTop() + el.data("css-top") + "px",
                        opacity: 1
                    };
                    return this.delay(function() {
                        return el.css(css).animate(end_css, this.settings.animationSpeed, "linear", function() {
                            this.locked = false;
                            el.trigger("opened");
                        }.bind(this)).addClass("open");
                    }.bind(this), this.settings.animationSpeed / 2);
                }
                if (/fade/i.test(this.settings.animation)) {
                    var end_css = {
                        opacity: 1
                    };
                    return this.delay(function() {
                        return el.css(css).animate(end_css, this.settings.animationSpeed, "linear", function() {
                            this.locked = false;
                            el.trigger("opened");
                        }.bind(this)).addClass("open");
                    }.bind(this), this.settings.animationSpeed / 2);
                }
                return el.css(css).show().css({
                    opacity: 1
                }).addClass("open").trigger("opened");
            }
            if (/fade/i.test(this.settings.animation)) {
                return el.fadeIn(this.settings.animationSpeed / 2);
            }
            return el.show();
        },
        hide: function(el, css) {
            if (css) {
                if (/pop/i.test(this.settings.animation)) {
                    var end_css = {
                        top: -$(window).scrollTop() - el.data("offset") + "px",
                        opacity: 0
                    };
                    return this.delay(function() {
                        return el.animate(end_css, this.settings.animationSpeed, "linear", function() {
                            this.locked = false;
                            el.css(css).trigger("closed");
                        }.bind(this)).removeClass("open");
                    }.bind(this), this.settings.animationSpeed / 2);
                }
                if (/fade/i.test(this.settings.animation)) {
                    var end_css = {
                        opacity: 0
                    };
                    return this.delay(function() {
                        return el.animate(end_css, this.settings.animationSpeed, "linear", function() {
                            this.locked = false;
                            el.css(css).trigger("closed");
                        }.bind(this)).removeClass("open");
                    }.bind(this), this.settings.animationSpeed / 2);
                }
                return el.hide().css(css).removeClass("open").trigger("closed");
            }
            if (/fade/i.test(this.settings.animation)) {
                return el.fadeOut(this.settings.animationSpeed / 2);
            }
            return el.hide();
        },
        close_video: function(e) {
            var video = $(this).find(".flex-video"), iframe = video.find("iframe");
            if (iframe.length > 0) {
                iframe.attr("data-src", iframe[0].src);
                iframe.attr("src", "about:blank");
                video.hide();
            }
        },
        open_video: function(e) {
            var video = $(this).find(".flex-video"), iframe = video.find("iframe");
            if (iframe.length > 0) {
                var data_src = iframe.attr("data-src");
                if (typeof data_src === "string") {
                    iframe[0].src = iframe.attr("data-src");
                } else {
                    var src = iframe[0].src;
                    iframe[0].src = undefined;
                    iframe[0].src = src;
                }
                video.show();
            }
        },
        cache_offset: function(modal) {
            var offset = modal.show().height() + parseInt(modal.css("top"), 10);
            modal.hide();
            return offset;
        },
        off: function() {
            $(this.scope).off(".fndtn.reveal");
        },
        reflow: function() {}
    };
})(Foundation.zj, this, this.document);

(function ($, window, document, undefined) {
    "use strict";
    Foundation.libs.tooltips = {
        name: "tooltips",
        version: "4.3.2",
        settings: {
            selector: ".has-tip",
            additionalInheritableClasses: [],
            tooltipClass: ".tooltip",
            touchCloseText: "tap to close",
            appendTo: "body",
            "disable-for-touch": false,
            tipTemplate: function (selector, content) {
                return '<span data-selector="' + selector + '" class="' + Foundation.libs.tooltips.settings.tooltipClass.substring(1) + '">' + content + '<span class="nub"></span></span>';
            }
        },
        cache: {},
        init: function (scope, method, options) {
            Foundation.inherit(this, "data_options");
            var self = this;
            if (typeof method === "object") {
                $.extend(true, this.settings, method);
            } else if (typeof options !== "undefined") {
                $.extend(true, this.settings, options);
            }
            if (typeof method !== "string") {
                if (Modernizr.touch) {
                    $(this.scope).on("click.fndtn.tooltip touchstart.fndtn.tooltip touchend.fndtn.tooltip", "[data-tooltip]", function(e) {
                        var settings = $.extend({}, self.settings, self.data_options($(this)));
                        if (!settings["disable-for-touch"]) {
                            e.preventDefault();
                            $(settings.tooltipClass).hide();
                            self.showOrCreateTip($(this));
                        }
                    }).on("click.fndtn.tooltip touchstart.fndtn.tooltip touchend.fndtn.tooltip", this.settings.tooltipClass, function(e) {
                        e.preventDefault();
                        $(this).fadeOut(150);
                    });
                } else {
                    $(this.scope).on("mouseenter.fndtn.tooltip mouseleave.fndtn.tooltip", "[data-tooltip]", function (e) {
                        var $this = $(this);
                        if (/enter|over/i.test(e.type)) {
                            self.showOrCreateTip($this);
                        } else if (e.type === "mouseout" || e.type === "mouseleave") {
                            self.hide($this);
                        }
                    });
                }
            } else {
                return this[method].call(this, options);
            }
        },
        showOrCreateTip: function ($target) {
            var $tip = this.getTip($target);
            if ($tip && $tip.length > 0) {
                return this.show($target);
            }
            return this.create($target);
        },
        getTip: function($target) {
            var selector = this.selector($target), tip = null;
            if (selector) {
                tip = $('span[data-selector="' + selector + '"]' + this.settings.tooltipClass);
            }
            return typeof tip === "object" ? tip : false;
        },
        selector: function($target) {
            var id = $target.attr("id"), dataSelector = $target.attr("data-tooltip") || $target.attr("data-selector");
            if ((id && id.length < 1 || !id) && typeof dataSelector != "string") {
                dataSelector = "tooltip" + Math.random().toString(36).substring(7);
                $target.attr("data-selector", dataSelector);
            }
            return id && id.length > 0 ? id : dataSelector;
        },
        create: function($target) {
            var $tip = $(this.settings.tipTemplate(this.selector($target), $("<div></div>").html($target.attr("title")).html())), classes = this.inheritable_classes($target);
            $tip.addClass(classes).appendTo(this.settings.appendTo);
            if (Modernizr.touch) {
                $tip.append('<span class="tap-to-close">' + this.settings.touchCloseText + "</span>");
            }
            $target.removeAttr("title").attr("title", "");
            this.show($target);
        },
        reposition: function(target, tip, classes) {
            var width, nub, nubHeight, nubWidth, column, objPos;
            tip.css("visibility", "hidden").show();
            width = target.data("width");
            nub = tip.children(".nub");
            nubHeight = this.outerHeight(nub);
            nubWidth = this.outerHeight(nub);
            objPos = function(obj, top, right, bottom, left, width) {
                return obj.css({
                    top: top ? top : "auto",
                    bottom: bottom ? bottom : "auto",
                    left: left ? left : "auto",
                    right: right ? right : "auto",
                    width: width ? width : "auto"
                }).end();
            };
            objPos(tip, target.offset().top + this.outerHeight(target) + 10, "auto", "auto", target.offset().left, width);
            if ($(window).width() < 767) {
                objPos(tip, target.offset().top + this.outerHeight(target) + 10, "auto", "auto", 12.5, $(this.scope).width());
                tip.addClass("tip-override");
                objPos(nub, -nubHeight, "auto", "auto", target.offset().left);
            } else {
                var left = target.offset().left;
                if (Foundation.rtl) {
                    left = target.offset().left + target.offset().width - this.outerWidth(tip);
                }
                objPos(tip, target.offset().top + this.outerHeight(target) + 10, "auto", "auto", left, width);
                tip.removeClass("tip-override");
                if (classes && classes.indexOf("tip-top") > -1) {
                    objPos(tip, target.offset().top - this.outerHeight(tip), "auto", "auto", left, width).removeClass("tip-override");
                } else if (classes && classes.indexOf("tip-left") > -1) {
                    objPos(tip, target.offset().top + this.outerHeight(target) / 2 - nubHeight * 2.5, "auto", "auto", target.offset().left - this.outerWidth(tip) - nubHeight, width).removeClass("tip-override");
                } else if (classes && classes.indexOf("tip-right") > -1) {
                    objPos(tip, target.offset().top + this.outerHeight(target) / 2 - nubHeight * 2.5, "auto", "auto", target.offset().left + this.outerWidth(target) + nubHeight, width).removeClass("tip-override");
                }
            }
            tip.css("visibility", "visible").hide();
        },
        inheritable_classes: function(target) {
            var inheritables = [ "tip-top", "tip-left", "tip-bottom", "tip-right", "noradius" ].concat(this.settings.additionalInheritableClasses), classes = target.attr("class"), filtered = classes ? $.map(classes.split(" "), function(el, i) {
                if ($.inArray(el, inheritables) !== -1) {
                    return el;
                }
            }).join(" ") : "";
            return $.trim(filtered);
        },
        show: function($target) {
            var $tip = this.getTip($target);
            this.reposition($target, $tip, $target.attr("class"));
            $tip.fadeIn(150);
        },
        hide: function($target) {
            var $tip = this.getTip($target);
            $tip.fadeOut(150);
        },
        reload: function() {
            var $self = $(this);
            return $self.data("fndtn-tooltips") ? $self.foundationTooltips("destroy").foundationTooltips("init") : $self.foundationTooltips("init");
        },
        off: function() {
            $(this.scope).off(".fndtn.tooltip");
            $(this.settings.tooltipClass).each(function(i) {
                $("[data-tooltip]").get(i).attr("title", $(this).text());
            }).remove();
        },
        reflow: function() {}
    };
})(Foundation.zj, this, this.document);

(function() {
    "use strict";
    function FastClick(layer, options) {
        var oldOnClick;
        options = options || {};
        this.trackingClick = false;
        this.trackingClickStart = 0;
        this.targetElement = null;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.lastTouchIdentifier = 0;
        this.touchBoundary = options.touchBoundary || 10;
        this.layer = layer;
        this.tapDelay = options.tapDelay || 200;
        this.tapTimeout = options.tapTimeout || 700;
        if (FastClick.notNeeded(layer)) {
            return;
        }
        function bind(method, context) {
            return function() {
                return method.apply(context, arguments);
            };
        }
        var methods = [ "onMouse", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onTouchCancel" ];
        var context = this;
        for (var i = 0, l = methods.length; i < l; i++) {
            context[methods[i]] = bind(context[methods[i]], context);
        }
        if (deviceIsAndroid) {
            layer.addEventListener("mouseover", this.onMouse, true);
            layer.addEventListener("mousedown", this.onMouse, true);
            layer.addEventListener("mouseup", this.onMouse, true);
        }
        layer.addEventListener("click", this.onClick, true);
        layer.addEventListener("touchstart", this.onTouchStart, false);
        layer.addEventListener("touchmove", this.onTouchMove, false);
        layer.addEventListener("touchend", this.onTouchEnd, false);
        layer.addEventListener("touchcancel", this.onTouchCancel, false);
        if (!Event.prototype.stopImmediatePropagation) {
            layer.removeEventListener = function(type, callback, capture) {
                var rmv = Node.prototype.removeEventListener;
                if (type === "click") {
                    rmv.call(layer, type, callback.hijacked || callback, capture);
                } else {
                    rmv.call(layer, type, callback, capture);
                }
            };
            layer.addEventListener = function(type, callback, capture) {
                var adv = Node.prototype.addEventListener;
                if (type === "click") {
                    adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                        if (!event.propagationStopped) {
                            callback(event);
                        }
                    }), capture);
                } else {
                    adv.call(layer, type, callback, capture);
                }
            };
        }
        if (typeof layer.onclick === "function") {
            oldOnClick = layer.onclick;
            layer.addEventListener("click", function(event) {
                oldOnClick(event);
            }, false);
            layer.onclick = null;
        }
    }
    var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;
    var deviceIsAndroid = navigator.userAgent.indexOf("Android") > 0 && !deviceIsWindowsPhone;
    var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;
    var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);
    var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);
    var deviceIsBlackBerry10 = navigator.userAgent.indexOf("BB10") > 0;
    FastClick.prototype.needsClick = function(target) {
        switch (target.nodeName.toLowerCase()) {
          case "button":
          case "select":
          case "textarea":
            if (target.disabled) {
                return true;
            }
            break;

          case "input":
            if (deviceIsIOS && target.type === "file" || target.disabled) {
                return true;
            }
            break;

          case "label":
          case "iframe":
          case "video":
            return true;
        }
        return /\bneedsclick\b/.test(target.className);
    };
    FastClick.prototype.needsFocus = function(target) {
        switch (target.nodeName.toLowerCase()) {
          case "textarea":
            return true;

          case "select":
            return !deviceIsAndroid;

          case "input":
            switch (target.type) {
              case "button":
              case "checkbox":
              case "file":
              case "image":
              case "radio":
              case "submit":
                return false;
            }
            return !target.disabled && !target.readOnly;

          default:
            return /\bneedsfocus\b/.test(target.className);
        }
    };
    FastClick.prototype.sendClick = function(targetElement, event) {
        var clickEvent, touch;
        if (document.activeElement && document.activeElement !== targetElement) {
            document.activeElement.blur();
        }
        touch = event.changedTouches[0];
        clickEvent = document.createEvent("MouseEvents");
        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
    };
    FastClick.prototype.determineEventType = function(targetElement) {
        if (deviceIsAndroid && targetElement.tagName.toLowerCase() === "select") {
            return "mousedown";
        }
        return "click";
    };
    FastClick.prototype.focus = function(targetElement) {
        var length;
        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf("date") !== 0 && targetElement.type !== "time" && targetElement.type !== "month") {
            length = targetElement.value.length;
            targetElement.setSelectionRange(length, length);
        } else {
            targetElement.focus();
        }
    };
    FastClick.prototype.updateScrollParent = function(targetElement) {
        var scrollParent, parentElement;
        scrollParent = targetElement.fastClickScrollParent;
        if (!scrollParent || !scrollParent.contains(targetElement)) {
            parentElement = targetElement;
            do {
                if (parentElement.scrollHeight > parentElement.offsetHeight) {
                    scrollParent = parentElement;
                    targetElement.fastClickScrollParent = parentElement;
                    break;
                }
                parentElement = parentElement.parentElement;
            } while (parentElement);
        }
        if (scrollParent) {
            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
    };
    FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
        if (eventTarget.nodeType === Node.TEXT_NODE) {
            return eventTarget.parentNode;
        }
        return eventTarget;
    };
    FastClick.prototype.onTouchStart = function(event) {
        var targetElement, touch, selection;
        if (event.targetTouches.length > 1) {
            return true;
        }
        targetElement = this.getTargetElementFromEventTarget(event.target);
        touch = event.targetTouches[0];
        if (deviceIsIOS) {
            selection = window.getSelection();
            if (selection.rangeCount && !selection.isCollapsed) {
                return true;
            }
            if (!deviceIsIOS4) {
                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                    event.preventDefault();
                    return false;
                }
                this.lastTouchIdentifier = touch.identifier;
                this.updateScrollParent(targetElement);
            }
        }
        this.trackingClick = true;
        this.trackingClickStart = event.timeStamp;
        this.targetElement = targetElement;
        this.touchStartX = touch.pageX;
        this.touchStartY = touch.pageY;
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            event.preventDefault();
        }
        return true;
    };
    FastClick.prototype.touchHasMoved = function(event) {
        var touch = event.changedTouches[0], boundary = this.touchBoundary;
        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
            return true;
        }
        return false;
    };
    FastClick.prototype.onTouchMove = function(event) {
        if (!this.trackingClick) {
            return true;
        }
        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
            this.trackingClick = false;
            this.targetElement = null;
        }
        return true;
    };
    FastClick.prototype.findControl = function(labelElement) {
        if (labelElement.control !== undefined) {
            return labelElement.control;
        }
        if (labelElement.htmlFor) {
            return document.getElementById(labelElement.htmlFor);
        }
        return labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
    };
    FastClick.prototype.onTouchEnd = function(event) {
        var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
        if (!this.trackingClick) {
            return true;
        }
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            this.cancelNextClick = true;
            return true;
        }
        if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
            return true;
        }
        this.cancelNextClick = false;
        this.lastClickTime = event.timeStamp;
        trackingClickStart = this.trackingClickStart;
        this.trackingClick = false;
        this.trackingClickStart = 0;
        if (deviceIsIOSWithBadTarget) {
            touch = event.changedTouches[0];
            targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
            targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
        }
        targetTagName = targetElement.tagName.toLowerCase();
        if (targetTagName === "label") {
            forElement = this.findControl(targetElement);
            if (forElement) {
                this.focus(targetElement);
                if (deviceIsAndroid) {
                    return false;
                }
                targetElement = forElement;
            }
        } else if (this.needsFocus(targetElement)) {
            if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === "input") {
                this.targetElement = null;
                return false;
            }
            this.focus(targetElement);
            this.sendClick(targetElement, event);
            if (!deviceIsIOS || targetTagName !== "select") {
                this.targetElement = null;
                event.preventDefault();
            }
            return false;
        }
        if (deviceIsIOS && !deviceIsIOS4) {
            scrollParent = targetElement.fastClickScrollParent;
            if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
                return true;
            }
        }
        if (!this.needsClick(targetElement)) {
            event.preventDefault();
            this.sendClick(targetElement, event);
        }
        return false;
    };
    FastClick.prototype.onTouchCancel = function() {
        this.trackingClick = false;
        this.targetElement = null;
    };
    FastClick.prototype.onMouse = function(event) {
        if (!this.targetElement) {
            return true;
        }
        if (event.forwardedTouchEvent) {
            return true;
        }
        if (!event.cancelable) {
            return true;
        }
        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
            if (event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            } else {
                event.propagationStopped = true;
            }
            event.stopPropagation();
            event.preventDefault();
            return false;
        }
        return true;
    };
    FastClick.prototype.onClick = function(event) {
        var permitted;
        if (this.trackingClick) {
            this.targetElement = null;
            this.trackingClick = false;
            return true;
        }
        if (event.target.type === "submit" && event.detail === 0) {
            return true;
        }
        permitted = this.onMouse(event);
        if (!permitted) {
            this.targetElement = null;
        }
        return permitted;
    };
    FastClick.prototype.destroy = function() {
        var layer = this.layer;
        if (deviceIsAndroid) {
            layer.removeEventListener("mouseover", this.onMouse, true);
            layer.removeEventListener("mousedown", this.onMouse, true);
            layer.removeEventListener("mouseup", this.onMouse, true);
        }
        layer.removeEventListener("click", this.onClick, true);
        layer.removeEventListener("touchstart", this.onTouchStart, false);
        layer.removeEventListener("touchmove", this.onTouchMove, false);
        layer.removeEventListener("touchend", this.onTouchEnd, false);
        layer.removeEventListener("touchcancel", this.onTouchCancel, false);
    };
    FastClick.notNeeded = function(layer) {
        var metaViewport;
        var chromeVersion;
        var blackberryVersion;
        var firefoxVersion;
        if (typeof window.ontouchstart === "undefined") {
            return true;
        }
        chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [ , 0 ])[1];
        if (chromeVersion) {
            if (deviceIsAndroid) {
                metaViewport = document.querySelector("meta[name=viewport]");
                if (metaViewport) {
                    if (metaViewport.content.indexOf("user-scalable=no") !== -1) {
                        return true;
                    }
                    if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            } else {
                return true;
            }
        }
        if (deviceIsBlackBerry10) {
            blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);
            if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
                metaViewport = document.querySelector("meta[name=viewport]");
                if (metaViewport) {
                    if (metaViewport.content.indexOf("user-scalable=no") !== -1) {
                        return true;
                    }
                    if (document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            }
        }
        if (layer.style.msTouchAction === "none" || layer.style.touchAction === "manipulation") {
            return true;
        }
        firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [ , 0 ])[1];
        if (firefoxVersion >= 27) {
            metaViewport = document.querySelector("meta[name=viewport]");
            if (metaViewport && (metaViewport.content.indexOf("user-scalable=no") !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
                return true;
            }
        }
        if (layer.style.touchAction === "none" || layer.style.touchAction === "manipulation") {
            return true;
        }
        return false;
    };
    FastClick.attach = function(layer, options) {
        return new FastClick(layer, options);
    };
    if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define(function() {
            return FastClick;
        });
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = FastClick.attach;
        module.exports.FastClick = FastClick;
    } else {
        window.FastClick = FastClick;
    }
})();

var _slice = Array.prototype.slice;

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
        return arr2;
    } else {
        return Array.from(arr);
    }
}

(function (global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require("jquery")) : typeof define === "function" && define.amd ? define(["jquery"], factory) : global.parsley = factory(global.jQuery);
})(this, function ($) {
    "use strict";
    var globalID = 1;
    var pastWarnings = {};
    var ParsleyUtils__ParsleyUtils = {
        attr: function attr($element, namespace, obj) {
            var i;
            var attribute;
            var attributes;
            var regex = new RegExp("^" + namespace, "i");
            if ("undefined" === typeof obj) obj = {}; else {
                for (i in obj) {
                    if (obj.hasOwnProperty(i)) delete obj[i];
                }
            }
            if ("undefined" === typeof $element || "undefined" === typeof $element[0]) return obj;
            attributes = $element[0].attributes;
            for (i = attributes.length; i--;) {
                attribute = attributes[i];
                if (attribute && attribute.specified && regex.test(attribute.name)) {
                    obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);
                }
            }
            return obj;
        },
        checkAttr: function checkAttr($element, namespace, _checkAttr) {
            return $element.is("[" + namespace + _checkAttr + "]");
        },
        setAttr: function setAttr($element, namespace, attr, value) {
            $element[0].setAttribute(this.dasherize(namespace + attr), String(value));
        },
        generateID: function generateID() {
            return "" + globalID++;
        },
        deserializeValue: function deserializeValue(value) {
            var num;
            try {
                return value ? value == "true" || (value == "false" ? false : value == "null" ? null : !isNaN(num = Number(value)) ? num : /^[\[\{]/.test(value) ? $.parseJSON(value) : value) : value;
            } catch (e) {
                return value;
            }
        },
        camelize: function camelize(str) {
            return str.replace(/-+(.)?/g, function (match, chr) {
                return chr ? chr.toUpperCase() : "";
            });
        },
        dasherize: function dasherize(str) {
            return str.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
        },
        warn: function warn() {
            var _window$console;
            if (window.console && "function" === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);
        },
        warnOnce: function warnOnce(msg) {
            if (!pastWarnings[msg]) {
                pastWarnings[msg] = true;
                this.warn.apply(this, arguments);
            }
        },
        _resetWarnings: function _resetWarnings() {
            pastWarnings = {};
        },
        trimString: function trimString(string) {
            return string.replace(/^\s+|\s+$/g, "");
        },
        namespaceEvents: function namespaceEvents(events, namespace) {
            events = this.trimString(events || "").split(/\s+/);
            if (!events[0]) return "";
            return $.map(events, function (evt) {
                return evt + "." + namespace;
            }).join(" ");
        },
        objectCreate: Object.create || function () {
            var Object = function Object() { };
            return function (prototype) {
                if (arguments.length > 1) {
                    throw Error("Second argument not supported");
                }
                if (typeof prototype != "object") {
                    throw TypeError("Argument must be an object");
                }
                Object.prototype = prototype;
                var result = new Object();
                Object.prototype = null;
                return result;
            };
        }()
    };
    var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;
    var ParsleyDefaults = {
        namespace: "data-parsley-",
        inputs: "input, textarea, select",
        excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
        priorityEnabled: true,
        multiple: null,
        group: null,
        uiEnabled: true,
        validationThreshold: 3,
        focus: "first",
        trigger: false,
        triggerAfterFailure: "input",
        errorClass: "parsley-error",
        successClass: "parsley-success",
        classHandler: function classHandler(ParsleyField) { },
        errorsContainer: function errorsContainer(ParsleyField) { },
        errorsWrapper: '<ul class="parsley-errors-list"></ul>',
        errorTemplate: "<li></li>"
    };
    var ParsleyAbstract = function ParsleyAbstract() { };
    ParsleyAbstract.prototype = {
        asyncSupport: true,
        actualizeOptions: function actualizeOptions() {
            ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);
            if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();
            return this;
        },
        _resetOptions: function _resetOptions(initOptions) {
            this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);
            this.options = ParsleyUtils__default.objectCreate(this.domOptions);
            for (var i in initOptions) {
                if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];
            }
            this.actualizeOptions();
        },
        _listeners: null,
        on: function on(name, fn) {
            this._listeners = this._listeners || {};
            var queue = this._listeners[name] = this._listeners[name] || [];
            queue.push(fn);
            return this;
        },
        subscribe: function subscribe(name, fn) {
            $.listenTo(this, name.toLowerCase(), fn);
        },
        off: function off(name, fn) {
            var queue = this._listeners && this._listeners[name];
            if (queue) {
                if (!fn) {
                    delete this._listeners[name];
                } else {
                    for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);
                }
            }
            return this;
        },
        unsubscribe: function unsubscribe(name, fn) {
            $.unsubscribeTo(this, name.toLowerCase());
        },
        trigger: function trigger(name, target, extraArg) {
            target = target || this;
            var queue = this._listeners && this._listeners[name];
            var result;
            var parentResult;
            if (queue) {
                for (var i = queue.length; i--;) {
                    result = queue[i].call(target, target, extraArg);
                    if (result === false) return result;
                }
            }
            if (this.parent) {
                return this.parent.trigger(name, target, extraArg);
            }
            return true;
        },
        reset: function reset() {
            if ("ParsleyForm" !== this.__class__) {
                this._resetUI();
                return this._trigger("reset");
            }
            for (var i = 0; i < this.fields.length; i++) this.fields[i].reset();
            this._trigger("reset");
        },
        destroy: function destroy() {
            this._destroyUI();
            if ("ParsleyForm" !== this.__class__) {
                this.$element.removeData("Parsley");
                this.$element.removeData("ParsleyFieldMultiple");
                this._trigger("destroy");
                return;
            }
            for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();
            this.$element.removeData("Parsley");
            this._trigger("destroy");
        },
        asyncIsValid: function asyncIsValid(group, force) {
            ParsleyUtils__default.warnOnce("asyncIsValid is deprecated; please use whenValid instead");
            return this.whenValid({
                group: group,
                force: force
            });
        },
        _findRelated: function _findRelated() {
            return this.options.multiple ? this.parent.$element.find("[" + this.options.namespace + 'multiple="' + this.options.multiple + '"]') : this.$element;
        }
    };
    var requirementConverters = {
        string: function string(_string) {
            return _string;
        },
        integer: function integer(string) {
            if (isNaN(string)) throw 'Requirement is not an integer: "' + string + '"';
            return parseInt(string, 10);
        },
        number: function number(string) {
            if (isNaN(string)) throw 'Requirement is not a number: "' + string + '"';
            return parseFloat(string);
        },
        reference: function reference(string) {
            var result = $(string);
            if (result.length === 0) throw 'No such reference: "' + string + '"';
            return result;
        },
        "boolean": function boolean(string) {
            return string !== "false";
        },
        object: function object(string) {
            return ParsleyUtils__default.deserializeValue(string);
        },
        regexp: function regexp(_regexp) {
            var flags = "";
            if (/^\/.*\/(?:[gimy]*)$/.test(_regexp)) {
                flags = _regexp.replace(/.*\/([gimy]*)$/, "$1");
                _regexp = _regexp.replace(new RegExp("^/(.*?)/" + flags + "$"), "$1");
            } else {
                _regexp = "^" + _regexp + "$";
            }
            return new RegExp(_regexp, flags);
        }
    };
    var convertArrayRequirement = function convertArrayRequirement(string, length) {
        var m = string.match(/^\s*\[(.*)\]\s*$/);
        if (!m) throw 'Requirement is not an array: "' + string + '"';
        var values = m[1].split(",").map(ParsleyUtils__default.trimString);
        if (values.length !== length) throw "Requirement has " + values.length + " values when " + length + " are needed";
        return values;
    };
    var convertRequirement = function convertRequirement(requirementType, string) {
        var converter = requirementConverters[requirementType || "string"];
        if (!converter) throw 'Unknown requirement specification: "' + requirementType + '"';
        return converter(string);
    };
    var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {
        var main = null;
        var extra = {};
        for (var key in requirementSpec) {
            if (key) {
                var value = extraOptionReader(key);
                if ("string" === typeof value) value = convertRequirement(requirementSpec[key], value);
                extra[key] = value;
            } else {
                main = convertRequirement(requirementSpec[key], string);
            }
        }
        return [main, extra];
    };
    var ParsleyValidator = function ParsleyValidator(spec) {
        $.extend(true, this, spec);
    };
    ParsleyValidator.prototype = {
        validate: function validate(value, requirementFirstArg) {
            if (this.fn) {
                if (arguments.length > 3) requirementFirstArg = [].slice.call(arguments, 1, -1);
                return this.fn.call(this, value, requirementFirstArg);
            }
            if ($.isArray(value)) {
                if (!this.validateMultiple) throw "Validator `" + this.name + "` does not handle multiple values";
                return this.validateMultiple.apply(this, arguments);
            } else {
                if (this.validateNumber) {
                    if (isNaN(value)) return false;
                    arguments[0] = parseFloat(arguments[0]);
                    return this.validateNumber.apply(this, arguments);
                }
                if (this.validateString) {
                    return this.validateString.apply(this, arguments);
                }
                throw "Validator `" + this.name + "` only handles multiple values";
            }
        },
        parseRequirements: function parseRequirements(requirements, extraOptionReader) {
            if ("string" !== typeof requirements) {
                return $.isArray(requirements) ? requirements : [requirements];
            }
            var type = this.requirementType;
            if ($.isArray(type)) {
                var values = convertArrayRequirement(requirements, type.length);
                for (var i = 0; i < values.length; i++) values[i] = convertRequirement(type[i], values[i]);
                return values;
            } else if ($.isPlainObject(type)) {
                return convertExtraOptionRequirement(type, requirements, extraOptionReader);
            } else {
                return [convertRequirement(type, requirements)];
            }
        },
        requirementType: "string",
        priority: 2
    };
    var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(validators, catalog) {
        this.__class__ = "ParsleyValidatorRegistry";
        this.locale = "en";
        this.init(validators || {}, catalog || {});
    };
    var typeRegexes = {
        email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
        number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,
        integer: /^-?\d+$/,
        digits: /^\d+$/,
        alphanum: /^\w+$/i,
        url: new RegExp("^" + "(?:(?:https?|ftp)://)?" + "(?:\\S+(?::\\S*)?@)?" + "(?:" + "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" + "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" + "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" + "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" + ")" + "(?::\\d{2,5})?" + "(?:/\\S*)?" + "$", "i")
    };
    typeRegexes.range = typeRegexes.number;
    var decimalPlaces = function decimalPlaces(num) {
        var match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
        if (!match) {
            return 0;
        }
        return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
    };
    ParsleyValidatorRegistry.prototype = {
        init: function init(validators, catalog) {
            this.catalog = catalog;
            this.validators = $.extend({}, this.validators);
            for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);
            window.Parsley.trigger("parsley:validator:init");
        },
        setLocale: function setLocale(locale) {
            if ("undefined" === typeof this.catalog[locale]) throw new Error(locale + " is not available in the catalog");
            this.locale = locale;
            return this;
        },
        addCatalog: function addCatalog(locale, messages, set) {
            if ("object" === typeof messages) this.catalog[locale] = messages;
            if (true === set) return this.setLocale(locale);
            return this;
        },
        addMessage: function addMessage(locale, name, message) {
            if ("undefined" === typeof this.catalog[locale]) this.catalog[locale] = {};
            this.catalog[locale][name] = message;
            return this;
        },
        addMessages: function addMessages(locale, nameMessageObject) {
            for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);
            return this;
        },
        addValidator: function addValidator(name, arg1, arg2) {
            if (this.validators[name]) ParsleyUtils__default.warn('Validator "' + name + '" is already defined.'); else if (ParsleyDefaults.hasOwnProperty(name)) {
                ParsleyUtils__default.warn('"' + name + '" is a restricted keyword and is not a valid validator name.');
                return;
            }
            return this._setValidator.apply(this, arguments);
        },
        updateValidator: function updateValidator(name, arg1, arg2) {
            if (!this.validators[name]) {
                ParsleyUtils__default.warn('Validator "' + name + '" is not already defined.');
                return this.addValidator.apply(this, arguments);
            }
            return this._setValidator(this, arguments);
        },
        removeValidator: function removeValidator(name) {
            if (!this.validators[name]) ParsleyUtils__default.warn('Validator "' + name + '" is not defined.');
            delete this.validators[name];
            return this;
        },
        _setValidator: function _setValidator(name, validator, priority) {
            if ("object" !== typeof validator) {
                validator = {
                    fn: validator,
                    priority: priority
                };
            }
            if (!validator.validate) {
                validator = new ParsleyValidator(validator);
            }
            this.validators[name] = validator;
            for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);
            return this;
        },
        getErrorMessage: function getErrorMessage(constraint) {
            var message;
            if ("type" === constraint.name) {
                var typeMessages = this.catalog[this.locale][constraint.name] || {};
                message = typeMessages[constraint.requirements];
            } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);
            return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
        },
        formatMessage: function formatMessage(string, parameters) {
            if ("object" === typeof parameters) {
                for (var i in parameters) string = this.formatMessage(string, parameters[i]);
                return string;
            }
            return "string" === typeof string ? string.replace(/%s/i, parameters) : "";
        },
        validators: {
            notblank: {
                validateString: function validateString(value) {
                    return /\S/.test(value);
                },
                priority: 2
            },
            required: {
                validateMultiple: function validateMultiple(values) {
                    return values.length > 0;
                },
                validateString: function validateString(value) {
                    return /\S/.test(value);
                },
                priority: 512
            },
            type: {
                validateString: function validateString(value, type) {
                    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
                    var _ref$step = _ref.step;
                    var step = _ref$step === undefined ? "1" : _ref$step;
                    var _ref$base = _ref.base;
                    var base = _ref$base === undefined ? 0 : _ref$base;
                    var regex = typeRegexes[type];
                    if (!regex) {
                        throw new Error("validator type `" + type + "` is not supported");
                    }
                    if (!regex.test(value)) return false;
                    if ("number" === type) {
                        if (!/^any$/i.test(step || "")) {
                            var nb = Number(value);
                            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
                            if (decimalPlaces(nb) > decimals) return false;
                            var toInt = function toInt(f) {
                                return Math.round(f * Math.pow(10, decimals));
                            };
                            if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;
                        }
                    }
                    return true;
                },
                requirementType: {
                    "": "string",
                    step: "string",
                    base: "number"
                },
                priority: 256
            },
            pattern: {
                validateString: function validateString(value, regexp) {
                    return regexp.test(value);
                },
                requirementType: "regexp",
                priority: 64
            },
            minlength: {
                validateString: function validateString(value, requirement) {
                    return value.length >= requirement;
                },
                requirementType: "integer",
                priority: 30
            },
            maxlength: {
                validateString: function validateString(value, requirement) {
                    return value.length <= requirement;
                },
                requirementType: "integer",
                priority: 30
            },
            length: {
                validateString: function validateString(value, min, max) {
                    return value.length >= min && value.length <= max;
                },
                requirementType: ["integer", "integer"],
                priority: 30
            },
            mincheck: {
                validateMultiple: function validateMultiple(values, requirement) {
                    return values.length >= requirement;
                },
                requirementType: "integer",
                priority: 30
            },
            maxcheck: {
                validateMultiple: function validateMultiple(values, requirement) {
                    return values.length <= requirement;
                },
                requirementType: "integer",
                priority: 30
            },
            check: {
                validateMultiple: function validateMultiple(values, min, max) {
                    return values.length >= min && values.length <= max;
                },
                requirementType: ["integer", "integer"],
                priority: 30
            },
            min: {
                validateNumber: function validateNumber(value, requirement) {
                    return value >= requirement;
                },
                requirementType: "number",
                priority: 30
            },
            max: {
                validateNumber: function validateNumber(value, requirement) {
                    return value <= requirement;
                },
                requirementType: "number",
                priority: 30
            },
            range: {
                validateNumber: function validateNumber(value, min, max) {
                    return value >= min && value <= max;
                },
                requirementType: ["number", "number"],
                priority: 30
            },
            equalto: {
                validateString: function validateString(value, refOrValue) {
                    var $reference = $(refOrValue);
                    if ($reference.length) return value === $reference.val(); else return value === refOrValue;
                },
                priority: 256
            }
        }
    };
    var ParsleyUI = {};
    var diffResults = function diffResults(newResult, oldResult, deep) {
        var added = [];
        var kept = [];
        for (var i = 0; i < newResult.length; i++) {
            var found = false;
            for (var j = 0; j < oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {
                found = true;
                break;
            }
            if (found) kept.push(newResult[i]); else added.push(newResult[i]);
        }
        return {
            kept: kept,
            added: added,
            removed: !deep ? diffResults(oldResult, newResult, true).added : []
        };
    };
    ParsleyUI.Form = {
        _actualizeTriggers: function _actualizeTriggers() {
            var _this = this;
            this.$element.on("submit.Parsley", function (evt) {
                _this.onSubmitValidate(evt);
            });
            this.$element.on("click.Parsley", 'input[type="submit"], button[type="submit"]', function (evt) {
                _this.onSubmitButton(evt);
            });
            if (false === this.options.uiEnabled) return;
            this.$element.attr("novalidate", "");
        },
        focus: function focus() {
            this._focusedField = null;
            if (true === this.validationResult || "none" === this.options.focus) return null;
            for (var i = 0; i < this.fields.length; i++) {
                var field = this.fields[i];
                if (true !== field.validationResult && field.validationResult.length > 0 && "undefined" === typeof field.options.noFocus) {
                    this._focusedField = field.$element;
                    if ("first" === this.options.focus) break;
                }
            }
            if (null === this._focusedField) return null;
            return this._focusedField.focus();
        },
        _destroyUI: function _destroyUI() {
            this.$element.off(".Parsley");
        }
    };
    ParsleyUI.Field = {
        _reflowUI: function _reflowUI() {
            this._buildUI();
            if (!this._ui) return;
            var diff = diffResults(this.validationResult, this._ui.lastValidationResult);
            this._ui.lastValidationResult = this.validationResult;
            this._manageStatusClass();
            this._manageErrorsMessages(diff);
            this._actualizeTriggers();
            if ((diff.kept.length || diff.added.length) && !this._failedOnce) {
                this._failedOnce = true;
                this._actualizeTriggers();
            }
        },
        getErrorsMessages: function getErrorsMessages() {
            if (true === this.validationResult) return [];
            var messages = [];
            for (var i = 0; i < this.validationResult.length; i++) messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));
            return messages;
        },
        addError: function addError(name) {
            var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var message = _ref2.message;
            var assert = _ref2.assert;
            var _ref2$updateClass = _ref2.updateClass;
            var updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;
            this._buildUI();
            this._addError(name, {
                message: message,
                assert: assert
            });
            if (updateClass) this._errorClass();
        },
        updateError: function updateError(name) {
            var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var message = _ref3.message;
            var assert = _ref3.assert;
            var _ref3$updateClass = _ref3.updateClass;
            var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;
            this._buildUI();
            this._updateError(name, {
                message: message,
                assert: assert
            });
            if (updateClass) this._errorClass();
        },
        removeError: function removeError(name) {
            var _ref4 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var _ref4$updateClass = _ref4.updateClass;
            var updateClass = _ref4$updateClass === undefined ? true : _ref4$updateClass;
            this._buildUI();
            this._removeError(name);
            if (updateClass) this._manageStatusClass();
        },
        _manageStatusClass: function _manageStatusClass() {
            if (this.hasConstraints() && this.needsValidation() && true === this.validationResult) this._successClass(); else if (this.validationResult.length > 0) this._errorClass(); else this._resetClass();
        },
        _manageErrorsMessages: function _manageErrorsMessages(diff) {
            if ("undefined" !== typeof this.options.errorsMessagesDisabled) return;
            if ("undefined" !== typeof this.options.errorMessage) {
                if (diff.added.length || diff.kept.length) {
                    this._insertErrorWrapper();
                    if (0 === this._ui.$errorsWrapper.find(".parsley-custom-error-message").length) this._ui.$errorsWrapper.append($(this.options.errorTemplate).addClass("parsley-custom-error-message"));
                    return this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage);
                }
                return this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();
            }
            for (var i = 0; i < diff.removed.length; i++) this._removeError(diff.removed[i].assert.name);
            for (i = 0; i < diff.added.length; i++) this._addError(diff.added[i].assert.name, {
                message: diff.added[i].errorMessage,
                assert: diff.added[i].assert
            });
            for (i = 0; i < diff.kept.length; i++) this._updateError(diff.kept[i].assert.name, {
                message: diff.kept[i].errorMessage,
                assert: diff.kept[i].assert
            });
        },
        _addError: function _addError(name, _ref5) {
            var message = _ref5.message;
            var assert = _ref5.assert;
            this._insertErrorWrapper();
            this._ui.$errorsWrapper.addClass("filled").append($(this.options.errorTemplate).addClass("parsley-" + name).html(message || this._getErrorMessage(assert)));
        },
        _updateError: function _updateError(name, _ref6) {
            var message = _ref6.message;
            var assert = _ref6.assert;
            this._ui.$errorsWrapper.addClass("filled").find(".parsley-" + name).html(message || this._getErrorMessage(assert));
        },
        _removeError: function _removeError(name) {
            this._ui.$errorsWrapper.removeClass("filled").find(".parsley-" + name).remove();
        },
        _getErrorMessage: function _getErrorMessage(constraint) {
            var customConstraintErrorMessage = constraint.name + "Message";
            if ("undefined" !== typeof this.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);
            return window.Parsley.getErrorMessage(constraint);
        },
        _buildUI: function _buildUI() {
            if (this._ui || false === this.options.uiEnabled) return;
            var _ui = {};
            this.$element.attr(this.options.namespace + "id", this.__id__);
            _ui.$errorClassHandler = this._manageClassHandler();
            _ui.errorsWrapperId = "parsley-id-" + (this.options.multiple ? "multiple-" + this.options.multiple : this.__id__);
            _ui.$errorsWrapper = $(this.options.errorsWrapper).attr("id", _ui.errorsWrapperId);
            _ui.lastValidationResult = [];
            _ui.validationInformationVisible = false;
            this._ui = _ui;
        },
        _manageClassHandler: function _manageClassHandler() {
            if ("string" === typeof this.options.classHandler && $(this.options.classHandler).length) return $(this.options.classHandler);
            var $handler = this.options.classHandler.call(this, this);
            if ("undefined" !== typeof $handler && $handler.length) return $handler;
            if (!this.options.multiple || this.$element.is("select")) return this.$element;
            return this.$element.parent();
        },
        _insertErrorWrapper: function _insertErrorWrapper() {
            var $errorsContainer;
            if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();
            if ("string" === typeof this.options.errorsContainer) {
                if ($(this.options.errorsContainer).length) return $(this.options.errorsContainer).append(this._ui.$errorsWrapper); else ParsleyUtils__default.warn("The errors container `" + this.options.errorsContainer + "` does not exist in DOM");
            } else if ("function" === typeof this.options.errorsContainer) $errorsContainer = this.options.errorsContainer.call(this, this);
            if ("undefined" !== typeof $errorsContainer && $errorsContainer.length) return $errorsContainer.append(this._ui.$errorsWrapper);
            var $from = this.$element;
            if (this.options.multiple) $from = $from.parent();
            return $from.after(this._ui.$errorsWrapper);
        },
        _actualizeTriggers: function _actualizeTriggers() {
            var _this2 = this;
            var $toBind = this._findRelated();
            $toBind.off(".Parsley");
            if (this._failedOnce) $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, "Parsley"), function () {
                _this2.validate();
            }); else {
                $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.trigger, "Parsley"), function (event) {
                    _this2._eventValidate(event);
                });
            }
        },
        _eventValidate: function _eventValidate(event) {
            if (/key|input/.test(event.type)) if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold) return;
            this.validate();
        },
        _resetUI: function _resetUI() {
            this._failedOnce = false;
            this._actualizeTriggers();
            if ("undefined" === typeof this._ui) return;
            this._ui.$errorsWrapper.removeClass("filled").children().remove();
            this._resetClass();
            this._ui.lastValidationResult = [];
            this._ui.validationInformationVisible = false;
        },
        _destroyUI: function _destroyUI() {
            this._resetUI();
            if ("undefined" !== typeof this._ui) this._ui.$errorsWrapper.remove();
            delete this._ui;
        },
        _successClass: function _successClass() {
            this._ui.validationInformationVisible = true;
            this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);
        },
        _errorClass: function _errorClass() {
            this._ui.validationInformationVisible = true;
            this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);
        },
        _resetClass: function _resetClass() {
            this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);
        }
    };
    var ParsleyForm = function ParsleyForm(element, domOptions, options) {
        this.__class__ = "ParsleyForm";
        this.__id__ = ParsleyUtils__default.generateID();
        this.$element = $(element);
        this.domOptions = domOptions;
        this.options = options;
        this.parent = window.Parsley;
        this.fields = [];
        this.validationResult = null;
    };
    var ParsleyForm__statusMapping = {
        pending: null,
        resolved: true,
        rejected: false
    };
    ParsleyForm.prototype = {
        onSubmitValidate: function onSubmitValidate(event) {
            var _this3 = this;
            if (true === event.parsley) return;
            var $submitSource = this._$submitSource || this.$element.find('input[type="submit"], button[type="submit"]').first();
            this._$submitSource = null;
            this.$element.find(".parsley-synthetic-submit-button").prop("disabled", true);
            if ($submitSource.is("[formnovalidate]")) return;
            var promise = this.whenValidate({
                event: event
            });
            if ("resolved" === promise.state() && false !== this._trigger("submit")) { } else {
                event.stopImmediatePropagation();
                event.preventDefault();
                if ("pending" === promise.state()) promise.done(function () {
                    _this3._submit($submitSource);
                });
            }
        },
        onSubmitButton: function onSubmitButton(event) {
            this._$submitSource = $(event.target);
        },
        _submit: function _submit($submitSource) {
            if (false === this._trigger("submit")) return;
            if ($submitSource) {
                var $synthetic = this.$element.find(".parsley-synthetic-submit-button").prop("disabled", false);
                if (0 === $synthetic.length) $synthetic = $('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element);
                $synthetic.attr({
                    name: $submitSource.attr("name"),
                    value: $submitSource.attr("value")
                });
            }
            this.$element.trigger($.extend($.Event("submit"), {
                parsley: true
            }));
        },
        validate: function validate(options) {
            if (arguments.length >= 1 && !$.isPlainObject(options)) {
                ParsleyUtils__default.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");
                var _arguments = _slice.call(arguments);
                var group = _arguments[0];
                var force = _arguments[1];
                var event = _arguments[2];
                options = {
                    group: group,
                    force: force,
                    event: event
                };
            }
            return ParsleyForm__statusMapping[this.whenValidate(options).state()];
        },
        whenValidate: function whenValidate() {
            var _this4 = this;
            var _ref7 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var group = _ref7.group;
            var force = _ref7.force;
            var event = _ref7.event;
            this.submitEvent = event;
            if (event) {
                this.submitEvent = $.extend({}, event, {
                    preventDefault: function preventDefault() {
                        ParsleyUtils__default.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`");
                        _this4.validationResult = false;
                    }
                });
            }
            this.validationResult = true;
            this._trigger("validate");
            this._refreshFields();
            var promises = this._withoutReactualizingFormOptions(function () {
                return $.map(_this4.fields, function (field) {
                    return field.whenValidate({
                        force: force,
                        group: group
                    });
                });
            });
            var promiseBasedOnValidationResult = function promiseBasedOnValidationResult() {
                var r = $.Deferred();
                if (false === _this4.validationResult) r.reject();
                return r.resolve().promise();
            };
            return $.when.apply($, _toConsumableArray(promises)).done(function () {
                _this4._trigger("success");
            }).fail(function () {
                _this4.validationResult = false;
                _this4.focus();
                _this4._trigger("error");
            }).always(function () {
                _this4._trigger("validated");
            }).pipe(promiseBasedOnValidationResult, promiseBasedOnValidationResult);
        },
        isValid: function isValid(options) {
            if (arguments.length >= 1 && !$.isPlainObject(options)) {
                ParsleyUtils__default.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");
                var _arguments2 = _slice.call(arguments);
                var group = _arguments2[0];
                var force = _arguments2[1];
                options = {
                    group: group,
                    force: force
                };
            }
            return ParsleyForm__statusMapping[this.whenValid(options).state()];
        },
        whenValid: function whenValid() {
            var _this5 = this;
            var _ref8 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var group = _ref8.group;
            var force = _ref8.force;
            this._refreshFields();
            var promises = this._withoutReactualizingFormOptions(function () {
                return $.map(_this5.fields, function (field) {
                    return field.whenValid({
                        group: group,
                        force: force
                    });
                });
            });
            return $.when.apply($, _toConsumableArray(promises));
        },
        _refreshFields: function _refreshFields() {
            return this.actualizeOptions()._bindFields();
        },
        _bindFields: function _bindFields() {
            var _this6 = this;
            var oldFields = this.fields;
            this.fields = [];
            this.fieldsMappedById = {};
            this._withoutReactualizingFormOptions(function () {
                _this6.$element.find(_this6.options.inputs).not(_this6.options.excluded).each(function (_, element) {
                    var fieldInstance = new window.Parsley.Factory(element, {}, _this6);
                    if (("ParsleyField" === fieldInstance.__class__ || "ParsleyFieldMultiple" === fieldInstance.__class__) && true !== fieldInstance.options.excluded) if ("undefined" === typeof _this6.fieldsMappedById[fieldInstance.__class__ + "-" + fieldInstance.__id__]) {
                        _this6.fieldsMappedById[fieldInstance.__class__ + "-" + fieldInstance.__id__] = fieldInstance;
                        _this6.fields.push(fieldInstance);
                    }
                });
                $(oldFields).not(_this6.fields).each(function (_, field) {
                    field._trigger("reset");
                });
            });
            return this;
        },
        _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {
            var oldActualizeOptions = this.actualizeOptions;
            this.actualizeOptions = function () {
                return this;
            };
            var result = fn();
            this.actualizeOptions = oldActualizeOptions;
            return result;
        },
        _trigger: function _trigger(eventName) {
            return this.trigger("form:" + eventName);
        }
    };
    var ConstraintFactory = function ConstraintFactory(parsleyField, name, requirements, priority, isDomConstraint) {
        if (!/ParsleyField/.test(parsleyField.__class__)) throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");
        var validatorSpec = window.Parsley._validatorRegistry.validators[name];
        var validator = new ParsleyValidator(validatorSpec);
        $.extend(this, {
            validator: validator,
            name: name,
            requirements: requirements,
            priority: priority || parsleyField.options[name + "Priority"] || validator.priority,
            isDomConstraint: true === isDomConstraint
        });
        this._parseRequirements(parsleyField.options);
    };
    var capitalize = function capitalize(str) {
        var cap = str[0].toUpperCase();
        return cap + str.slice(1);
    };
    ConstraintFactory.prototype = {
        validate: function validate(value, instance) {
            var args = this.requirementList.slice(0);
            args.unshift(value);
            args.push(instance);
            return this.validator.validate.apply(this.validator, args);
        },
        _parseRequirements: function _parseRequirements(options) {
            var _this7 = this;
            this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {
                return options[_this7.name + capitalize(key)];
            });
        }
    };
    var ParsleyField = function ParsleyField(field, domOptions, options, parsleyFormInstance) {
        this.__class__ = "ParsleyField";
        this.__id__ = ParsleyUtils__default.generateID();
        this.$element = $(field);
        if ("undefined" !== typeof parsleyFormInstance) {
            this.parent = parsleyFormInstance;
        }
        this.options = options;
        this.domOptions = domOptions;
        this.constraints = [];
        this.constraintsByName = {};
        this.validationResult = [];
        this._bindConstraints();
    };
    var parsley_field__statusMapping = {
        pending: null,
        resolved: true,
        rejected: false
    };
    ParsleyField.prototype = {
        validate: function validate(options) {
            if (arguments.length >= 1 && !$.isPlainObject(options)) {
                ParsleyUtils__default.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated.");
                options = {
                    options: options
                };
            }
            var promise = this.whenValidate(options);
            if (!promise) return true;
            switch (promise.state()) {
                case "pending":
                    return null;

                case "resolved":
                    return true;

                case "rejected":
                    return this.validationResult;
            }
        },
        whenValidate: function whenValidate() {
            var _this8 = this;
            var _ref9 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var force = _ref9.force;
            var group = _ref9.group;
            this.refreshConstraints();
            if (group && !this._isInGroup(group)) return;
            this.value = this.getValue();
            this._trigger("validate");
            return this.whenValid({
                force: force,
                value: this.value,
                _refreshed: true
            }).always(function () {
                _this8._reflowUI();
            }).done(function () {
                _this8._trigger("success");
            }).fail(function () {
                _this8._trigger("error");
            }).always(function () {
                _this8._trigger("validated");
            });
        },
        hasConstraints: function hasConstraints() {
            return 0 !== this.constraints.length;
        },
        needsValidation: function needsValidation(value) {
            if ("undefined" === typeof value) value = this.getValue();
            if (!value.length && !this._isRequired() && "undefined" === typeof this.options.validateIfEmpty) return false;
            return true;
        },
        _isInGroup: function _isInGroup(group) {
            if ($.isArray(this.options.group)) return -1 !== $.inArray(group, this.options.group);
            return this.options.group === group;
        },
        isValid: function isValid(options) {
            if (arguments.length >= 1 && !$.isPlainObject(options)) {
                ParsleyUtils__default.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");
                var _arguments3 = _slice.call(arguments);
                var force = _arguments3[0];
                var value = _arguments3[1];
                options = {
                    force: force,
                    value: value
                };
            }
            var promise = this.whenValid(options);
            if (!promise) return true;
            return parsley_field__statusMapping[promise.state()];
        },
        whenValid: function whenValid() {
            var _this9 = this;
            var _ref10 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var _ref10$force = _ref10.force;
            var force = _ref10$force === undefined ? false : _ref10$force;
            var value = _ref10.value;
            var group = _ref10.group;
            var _refreshed = _ref10._refreshed;
            if (!_refreshed) this.refreshConstraints();
            if (group && !this._isInGroup(group)) return;
            this.validationResult = true;
            if (!this.hasConstraints()) return $.when();
            if ("undefined" === typeof value || null === value) value = this.getValue();
            if (!this.needsValidation(value) && true !== force) return $.when();
            var groupedConstraints = this._getGroupedConstraints();
            var promises = [];
            $.each(groupedConstraints, function (_, constraints) {
                var promise = $.when.apply($, _toConsumableArray($.map(constraints, function (constraint) {
                    return _this9._validateConstraint(value, constraint);
                })));
                promises.push(promise);
                if (promise.state() === "rejected") return false;
            });
            return $.when.apply($, promises);
        },
        _validateConstraint: function _validateConstraint(value, constraint) {
            var _this10 = this;
            var result = constraint.validate(value, this);
            if (false === result) result = $.Deferred().reject();
            return $.when(result).fail(function (errorMessage) {
                if (true === _this10.validationResult) _this10.validationResult = [];
                _this10.validationResult.push({
                    assert: constraint,
                    errorMessage: "string" === typeof errorMessage && errorMessage
                });
            });
        },
        getValue: function getValue() {
            var value;
            if ("function" === typeof this.options.value) value = this.options.value(this); else if ("undefined" !== typeof this.options.value) value = this.options.value; else value = this.$element.val();
            if ("undefined" === typeof value || null === value) return "";
            return this._handleWhitespace(value);
        },
        refreshConstraints: function refreshConstraints() {
            return this.actualizeOptions()._bindConstraints();
        },
        addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {
            if (window.Parsley._validatorRegistry.validators[name]) {
                var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);
                if ("undefined" !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);
                this.constraints.push(constraint);
                this.constraintsByName[constraint.name] = constraint;
            }
            return this;
        },
        removeConstraint: function removeConstraint(name) {
            for (var i = 0; i < this.constraints.length; i++) if (name === this.constraints[i].name) {
                this.constraints.splice(i, 1);
                break;
            }
            delete this.constraintsByName[name];
            return this;
        },
        updateConstraint: function updateConstraint(name, parameters, priority) {
            return this.removeConstraint(name).addConstraint(name, parameters, priority);
        },
        _bindConstraints: function _bindConstraints() {
            var constraints = [];
            var constraintsByName = {};
            for (var i = 0; i < this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {
                constraints.push(this.constraints[i]);
                constraintsByName[this.constraints[i].name] = this.constraints[i];
            }
            this.constraints = constraints;
            this.constraintsByName = constraintsByName;
            for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);
            return this._bindHtml5Constraints();
        },
        _bindHtml5Constraints: function _bindHtml5Constraints() {
            if (this.$element.hasClass("required") || this.$element.attr("required")) this.addConstraint("required", true, undefined, true);
            if ("string" === typeof this.$element.attr("pattern")) this.addConstraint("pattern", this.$element.attr("pattern"), undefined, true);
            if ("undefined" !== typeof this.$element.attr("min") && "undefined" !== typeof this.$element.attr("max")) this.addConstraint("range", [this.$element.attr("min"), this.$element.attr("max")], undefined, true); else if ("undefined" !== typeof this.$element.attr("min")) this.addConstraint("min", this.$element.attr("min"), undefined, true); else if ("undefined" !== typeof this.$element.attr("max")) this.addConstraint("max", this.$element.attr("max"), undefined, true);
            if ("undefined" !== typeof this.$element.attr("minlength") && "undefined" !== typeof this.$element.attr("maxlength")) this.addConstraint("length", [this.$element.attr("minlength"), this.$element.attr("maxlength")], undefined, true); else if ("undefined" !== typeof this.$element.attr("minlength")) this.addConstraint("minlength", this.$element.attr("minlength"), undefined, true); else if ("undefined" !== typeof this.$element.attr("maxlength")) this.addConstraint("maxlength", this.$element.attr("maxlength"), undefined, true);
            var type = this.$element.attr("type");
            if ("undefined" === typeof type) return this;
            if ("number" === type) {
                return this.addConstraint("type", ["number", {
                    step: this.$element.attr("step"),
                    base: this.$element.attr("min") || this.$element.attr("value")
                }], undefined, true);
            } else if (/^(email|url|range)$/i.test(type)) {
                return this.addConstraint("type", type, undefined, true);
            }
            return this;
        },
        _isRequired: function _isRequired() {
            if ("undefined" === typeof this.constraintsByName.required) return false;
            return false !== this.constraintsByName.required.requirements;
        },
        _trigger: function _trigger(eventName) {
            return this.trigger("field:" + eventName);
        },
        _handleWhitespace: function _handleWhitespace(value) {
            if (true === this.options.trimValue) ParsleyUtils__default.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"');
            if ("squish" === this.options.whitespace) value = value.replace(/\s{2,}/g, " ");
            if ("trim" === this.options.whitespace || "squish" === this.options.whitespace || true === this.options.trimValue) value = ParsleyUtils__default.trimString(value);
            return value;
        },
        _getGroupedConstraints: function _getGroupedConstraints() {
            if (false === this.options.priorityEnabled) return [this.constraints];
            var groupedConstraints = [];
            var index = {};
            for (var i = 0; i < this.constraints.length; i++) {
                var p = this.constraints[i].priority;
                if (!index[p]) groupedConstraints.push(index[p] = []);
                index[p].push(this.constraints[i]);
            }
            groupedConstraints.sort(function (a, b) {
                return b[0].priority - a[0].priority;
            });
            return groupedConstraints;
        }
    };
    var parsley_field = ParsleyField;
    var ParsleyMultiple = function ParsleyMultiple() {
        this.__class__ = "ParsleyFieldMultiple";
    };
    ParsleyMultiple.prototype = {
        addElement: function addElement($element) {
            this.$elements.push($element);
            return this;
        },
        refreshConstraints: function refreshConstraints() {
            var fieldConstraints;
            this.constraints = [];
            if (this.$element.is("select")) {
                this.actualizeOptions()._bindConstraints();
                return this;
            }
            for (var i = 0; i < this.$elements.length; i++) {
                if (!$("html").has(this.$elements[i]).length) {
                    this.$elements.splice(i, 1);
                    continue;
                }
                fieldConstraints = this.$elements[i].data("ParsleyFieldMultiple").refreshConstraints().constraints;
                for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);
            }
            return this;
        },
        getValue: function getValue() {
            if ("function" === typeof this.options.value) value = this.options.value(this); else if ("undefined" !== typeof this.options.value) return this.options.value;
            if (this.$element.is("input[type=radio]")) return this._findRelated().filter(":checked").val() || "";
            if (this.$element.is("input[type=checkbox]")) {
                var values = [];
                this._findRelated().filter(":checked").each(function () {
                    values.push($(this).val());
                });
                return values;
            }
            if (this.$element.is("select") && null === this.$element.val()) return [];
            return this.$element.val();
        },
        _init: function _init() {
            this.$elements = [this.$element];
            return this;
        }
    };
    var ParsleyFactory = function ParsleyFactory(element, options, parsleyFormInstance) {
        this.$element = $(element);
        var savedparsleyFormInstance = this.$element.data("Parsley");
        if (savedparsleyFormInstance) {
            if ("undefined" !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {
                savedparsleyFormInstance.parent = parsleyFormInstance;
                savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);
            }
            return savedparsleyFormInstance;
        }
        if (!this.$element.length) throw new Error("You must bind Parsley on an existing element.");
        if ("undefined" !== typeof parsleyFormInstance && "ParsleyForm" !== parsleyFormInstance.__class__) throw new Error("Parent instance must be a ParsleyForm instance");
        this.parent = parsleyFormInstance || window.Parsley;
        return this.init(options);
    };
    ParsleyFactory.prototype = {
        init: function init(options) {
            this.__class__ = "Parsley";
            this.__version__ = "2.3.5";
            this.__id__ = ParsleyUtils__default.generateID();
            this._resetOptions(options);
            if (this.$element.is("form") || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, "validate") && !this.$element.is(this.options.inputs)) return this.bind("parsleyForm");
            return this.isMultiple() ? this.handleMultiple() : this.bind("parsleyField");
        },
        isMultiple: function isMultiple() {
            return this.$element.is("input[type=radio], input[type=checkbox]") || this.$element.is("select") && "undefined" !== typeof this.$element.attr("multiple");
        },
        handleMultiple: function handleMultiple() {
            var _this11 = this;
            var name;
            var multiple;
            var parsleyMultipleInstance;
            if (this.options.multiple); else if ("undefined" !== typeof this.$element.attr("name") && this.$element.attr("name").length) this.options.multiple = name = this.$element.attr("name"); else if ("undefined" !== typeof this.$element.attr("id") && this.$element.attr("id").length) this.options.multiple = this.$element.attr("id");
            if (this.$element.is("select") && "undefined" !== typeof this.$element.attr("multiple")) {
                this.options.multiple = this.options.multiple || this.__id__;
                return this.bind("parsleyFieldMultiple");
            } else if (!this.options.multiple) {
                ParsleyUtils__default.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.", this.$element);
                return this;
            }
            this.options.multiple = this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g, "");
            if ("undefined" !== typeof name) {
                $('input[name="' + name + '"]').each(function (i, input) {
                    if ($(input).is("input[type=radio], input[type=checkbox]")) $(input).attr(_this11.options.namespace + "multiple", _this11.options.multiple);
                });
            }
            var $previouslyRelated = this._findRelated();
            for (var i = 0; i < $previouslyRelated.length; i++) {
                parsleyMultipleInstance = $($previouslyRelated.get(i)).data("Parsley");
                if ("undefined" !== typeof parsleyMultipleInstance) {
                    if (!this.$element.data("ParsleyFieldMultiple")) {
                        parsleyMultipleInstance.addElement(this.$element);
                    }
                    break;
                }
            }
            this.bind("parsleyField", true);
            return parsleyMultipleInstance || this.bind("parsleyFieldMultiple");
        },
        bind: function bind(type, doNotStore) {
            var parsleyInstance;
            switch (type) {
                case "parsleyForm":
                    parsleyInstance = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), window.ParsleyExtend)._bindFields();
                    break;

                case "parsleyField":
                    parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), window.ParsleyExtend);
                    break;

                case "parsleyFieldMultiple":
                    parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple(), window.ParsleyExtend)._init();
                    break;

                default:
                    throw new Error(type + "is not a supported Parsley type");
            }
            if (this.options.multiple) ParsleyUtils__default.setAttr(this.$element, this.options.namespace, "multiple", this.options.multiple);
            if ("undefined" !== typeof doNotStore) {
                this.$element.data("ParsleyFieldMultiple", parsleyInstance);
                return parsleyInstance;
            }
            this.$element.data("Parsley", parsleyInstance);
            parsleyInstance._actualizeTriggers();
            parsleyInstance._trigger("init");
            return parsleyInstance;
        }
    };
    var vernums = $.fn.jquery.split(".");
    if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {
        throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";
    }
    if (!vernums.forEach) {
        ParsleyUtils__default.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");
    }
    var Parsley = $.extend(new ParsleyAbstract(), {
        $element: $(document),
        actualizeOptions: null,
        _resetOptions: null,
        Factory: ParsleyFactory,
        version: "2.3.5"
    });
    $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);
    $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);
    $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);
    $.fn.parsley = $.fn.psly = function (options) {
        if (this.length > 1) {
            var instances = [];
            this.each(function () {
                instances.push($(this).parsley(options));
            });
            return instances;
        }
        if (!$(this).length) {
            ParsleyUtils__default.warn("You must bind Parsley on an existing element.");
            return;
        }
        return new ParsleyFactory(this, options);
    };
    if ("undefined" === typeof window.ParsleyExtend) window.ParsleyExtend = {};
    Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);
    window.ParsleyConfig = Parsley.options;
    window.Parsley = window.psly = Parsley;
    window.ParsleyUtils = ParsleyUtils__default;
    var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);
    window.ParsleyValidator = {};
    $.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(" "), function (i, method) {
        window.Parsley[method] = $.proxy(registry, method);
        window.ParsleyValidator[method] = function () {
            var _window$Parsley;
            ParsleyUtils__default.warnOnce("Accessing the method '" + method + "' through ParsleyValidator is deprecated. Simply call 'window.Parsley." + method + "(...)'");
            return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);
        };
    });
    window.Parsley.UI = ParsleyUI;
    window.ParsleyUI = {
        removeError: function removeError(instance, name, doNotUpdateClass) {
            var updateClass = true !== doNotUpdateClass;
            ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.");
            return instance.removeError(name, {
                updateClass: updateClass
            });
        },
        getErrorsMessages: function getErrorsMessages(instance) {
            ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.");
            return instance.getErrorsMessages();
        }
    };
    $.each("addError updateError".split(" "), function (i, method) {
        window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {
            var updateClass = true !== doNotUpdateClass;
            ParsleyUtils__default.warnOnce("Accessing ParsleyUI is deprecated. Call '" + method + "' on the instance directly. Please comment in issue 1073 as to your need to call this method.");
            return instance[method](name, {
                message: message,
                assert: assert,
                updateClass: updateClass
            });
        };
    });
    if (/firefox/i.test(navigator.userAgent)) {
        $(document).on("change", "select", function (evt) {
            $(evt.target).trigger("input");
        });
    }
    if (false !== window.ParsleyConfig.autoBind) {
        $(function () {
            if ($("[data-parsley-validate]").length) $("[data-parsley-validate]").parsley();
        });
    }
    var o = $({});
    var deprecated = function deprecated() {
        ParsleyUtils__default.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley");
    };
    function adapt(fn, context) {
        if (!fn.parsleyAdaptedCallback) {
            fn.parsleyAdaptedCallback = function () {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift(this);
                fn.apply(context || o, args);
            };
        }
        return fn.parsleyAdaptedCallback;
    }
    var eventPrefix = "parsley:";
    function eventName(name) {
        if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);
        return name;
    }
    $.listen = function (name, callback) {
        var context;
        deprecated();
        if ("object" === typeof arguments[1] && "function" === typeof arguments[2]) {
            context = arguments[1];
            callback = arguments[2];
        }
        if ("function" !== typeof callback) throw new Error("Wrong parameters");
        window.Parsley.on(eventName(name), adapt(callback, context));
    };
    $.listenTo = function (instance, name, fn) {
        deprecated();
        if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error("Must give Parsley instance");
        if ("string" !== typeof name || "function" !== typeof fn) throw new Error("Wrong parameters");
        instance.on(eventName(name), adapt(fn));
    };
    $.unsubscribe = function (name, fn) {
        deprecated();
        if ("string" !== typeof name || "function" !== typeof fn) throw new Error("Wrong arguments");
        window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);
    };
    $.unsubscribeTo = function (instance, name) {
        deprecated();
        if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error("Must give Parsley instance");
        instance.off(eventName(name));
    };
    $.unsubscribeAll = function (name) {
        deprecated();
        window.Parsley.off(eventName(name));
        $("form,input,textarea,select").each(function () {
            var instance = $(this).data("Parsley");
            if (instance) {
                instance.off(eventName(name));
            }
        });
    };
    $.emit = function (name, instance) {
        var _instance;
        deprecated();
        var instanceGiven = instance instanceof parsley_field || instance instanceof ParsleyForm;
        var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);
        args.unshift(eventName(name));
        if (!instanceGiven) {
            instance = window.Parsley;
        }
        (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));
    };
    var pubsub = {};
    $.extend(true, Parsley, {
        asyncValidators: {
            "default": {
                fn: function fn(xhr) {
                    return xhr.status >= 200 && xhr.status < 300;
                },
                url: false
            },
            reverse: {
                fn: function fn(xhr) {
                    return xhr.status < 200 || xhr.status >= 300;
                },
                url: false
            }
        },
        addAsyncValidator: function addAsyncValidator(name, fn, url, options) {
            Parsley.asyncValidators[name] = {
                fn: fn,
                url: url || false,
                options: options || {}
            };
            return this;
        }
    });
    Parsley.addValidator("remote", {
        requirementType: {
            "": "string",
            validator: "string",
            reverse: "boolean",
            options: "object"
        },
        validateString: function validateString(value, url, options, instance) {
            var data = {};
            var ajaxOptions;
            var csr;
            var validator = options.validator || (true === options.reverse ? "reverse" : "default");
            if ("undefined" === typeof Parsley.asyncValidators[validator]) throw new Error("Calling an undefined async validator: `" + validator + "`");
            url = Parsley.asyncValidators[validator].url || url;
            if (url.indexOf("{value}") > -1) {
                url = url.replace("{value}", encodeURIComponent(value));
            } else {
                data[instance.$element.attr("name") || instance.$element.attr("id")] = value;
            }
            var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);
            ajaxOptions = $.extend(true, {}, {
                url: url,
                data: data,
                type: "GET"
            }, remoteOptions);
            instance.trigger("field:ajaxoptions", instance, ajaxOptions);
            csr = $.param(ajaxOptions);
            if ("undefined" === typeof Parsley._remoteCache) Parsley._remoteCache = {};
            var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);
            var handleXhr = function handleXhr() {
                var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);
                if (!result) result = $.Deferred().reject();
                return $.when(result);
            };
            return xhr.then(handleXhr, handleXhr);
        },
        priority: -1
    });
    Parsley.on("form:submit", function () {
        Parsley._remoteCache = {};
    });
    window.ParsleyExtend.addAsyncValidator = function () {
        ParsleyUtils.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`");
        return Parsley.addAsyncValidator.apply(Parsley, arguments);
    };
    Parsley.addMessages("en", {
        defaultMessage: "This value seems to be invalid.",
        type: {
            email: "This value should be a valid email.",
            url: "This value should be a valid url.",
            number: "This value should be a valid number.",
            integer: "This value should be a valid integer.",
            digits: "This value should be digits.",
            alphanum: "This value should be alphanumeric."
        },
        notblank: "This value should not be blank.",
        required: "This value is required.",
        pattern: "This value seems to be invalid.",
        min: "This value should be greater than or equal to %s.",
        max: "This value should be lower than or equal to %s.",
        range: "This value should be between %s and %s.",
        minlength: "This value is too short. It should have %s characters or more.",
        maxlength: "This value is too long. It should have %s characters or fewer.",
        length: "This value length is invalid. It should be between %s and %s characters long.",
        mincheck: "You must select at least %s choices.",
        maxcheck: "You must select %s choices or fewer.",
        check: "You must select between %s and %s choices.",
        equalto: "This value should be the same."
    });
    Parsley.setLocale("en");
    var parsley = Parsley;
    return parsley;
});

(function() {
    var b = void 0, f = !0, j = null, l = !1;
    function m() {
        return function() {};
    }
    function n(a) {
        return function() {
            return this[a];
        };
    }
    function p(a) {
        return function() {
            return a;
        };
    }
    var s;
    document.createElement("video");
    document.createElement("audio");
    document.createElement("track");
    function t(a, c, d) {
        if ("string" === typeof a) {
            0 === a.indexOf("#") && (a = a.slice(1));
            if (t.Ca[a]) return c && t.log.warn('Player "' + a + '" is already initialised. Options will not be applied.'), 
            d && t.Ca[a].I(d), t.Ca[a];
            a = t.m(a);
        }
        if (!a || !a.nodeName) throw new TypeError("The element or ID supplied is not valid. (videojs)");
        return a.player || new t.Player(a, c, d);
    }
    var videojs = window.videojs = t;
    t.fc = "4.12";
    t.sd = "https:" == document.location.protocol ? "https://" : "http://";
    t.VERSION = "4.12.15";
    t.options = {
        techOrder: [ "html5", "flash" ],
        html5: {},
        flash: {},
        width: 300,
        height: 150,
        defaultVolume: 0,
        playbackRates: [],
        inactivityTimeout: 2e3,
        children: {
            mediaLoader: {},
            posterImage: {},
            loadingSpinner: {},
            textTrackDisplay: {},
            bigPlayButton: {},
            controlBar: {},
            errorDisplay: {},
            textTrackSettings: {}
        },
        language: document.getElementsByTagName("html")[0].getAttribute("lang") || navigator.languages && navigator.languages[0] || navigator.Ef || navigator.language || "en",
        languages: {},
        notSupportedMessage: "No compatible source was found for this video."
    };
    "GENERATED_CDN_VSN" !== t.fc && (videojs.options.flash.swf = t.sd + "vjs.zencdn.net/" + t.fc + "/video-js.swf");
    t.Gd = function(a, c) {
        t.options.languages[a] = t.options.languages[a] !== b ? t.Z.Aa(t.options.languages[a], c) : c;
        return t.options.languages;
    };
    t.Ca = {};
    "function" === typeof define && define.amd ? define("videojs", [], function() {
        return videojs;
    }) : "object" === typeof exports && "object" === typeof module && (module.exports = videojs);
    t.Ga = t.CoreObject = m();
    t.Ga.extend = function(a) {
        var c, d;
        a = a || {};
        c = a.init || a.l || this.prototype.init || this.prototype.l || m();
        d = function() {
            c.apply(this, arguments);
        };
        d.prototype = t.i.create(this.prototype);
        d.prototype.constructor = d;
        d.extend = t.Ga.extend;
        d.create = t.Ga.create;
        for (var e in a) a.hasOwnProperty(e) && (d.prototype[e] = a[e]);
        return d;
    };
    t.Ga.create = function() {
        var a = t.i.create(this.prototype);
        this.apply(a, arguments);
        return a;
    };
    t.b = function(a, c, d) {
        if (t.i.isArray(c)) return v(t.b, a, c, d);
        var e = t.getData(a);
        e.G || (e.G = {});
        e.G[c] || (e.G[c] = []);
        d.s || (d.s = t.s++);
        e.G[c].push(d);
        e.ba || (e.disabled = l, e.ba = function(c) {
            if (!e.disabled) {
                c = t.Nb(c);
                var d = e.G[c.type];
                if (d) for (var d = d.slice(0), k = 0, q = d.length; k < q && !c.Nc(); k++) d[k].call(a, c);
            }
        });
        1 == e.G[c].length && (a.addEventListener ? a.addEventListener(c, e.ba, l) : a.attachEvent && a.attachEvent("on" + c, e.ba));
    };
    t.n = function(a, c, d) {
        if (t.Ic(a)) {
            var e = t.getData(a);
            if (e.G) {
                if (t.i.isArray(c)) return v(t.n, a, c, d);
                if (c) {
                    var g = e.G[c];
                    if (g) {
                        if (d) {
                            if (d.s) for (e = 0; e < g.length; e++) g[e].s === d.s && g.splice(e--, 1);
                        } else e.G[c] = [];
                        t.xc(a, c);
                    }
                } else for (g in e.G) c = g, e.G[c] = [], t.xc(a, c);
            }
        }
    };
    t.xc = function(a, c) {
        var d = t.getData(a);
        0 === d.G[c].length && (delete d.G[c], a.removeEventListener ? a.removeEventListener(c, d.ba, l) : a.detachEvent && a.detachEvent("on" + c, d.ba));
        t.hb(d.G) && (delete d.G, delete d.ba, delete d.disabled);
        t.hb(d) && t.Zc(a);
    };
    t.Nb = function(a) {
        function c() {
            return f;
        }
        function d() {
            return l;
        }
        if (!a || !a.Sb) {
            var e = a || window.event;
            a = {};
            for (var g in e) "layerX" !== g && ("layerY" !== g && "keyLocation" !== g) && ("returnValue" == g && e.preventDefault || (a[g] = e[g]));
            a.target || (a.target = a.srcElement || document);
            a.relatedTarget = a.fromElement === a.target ? a.toElement : a.fromElement;
            a.preventDefault = function() {
                e.preventDefault && e.preventDefault();
                a.returnValue = l;
                a.ee = c;
                a.defaultPrevented = f;
            };
            a.ee = d;
            a.defaultPrevented = l;
            a.stopPropagation = function() {
                e.stopPropagation && e.stopPropagation();
                a.cancelBubble = f;
                a.Sb = c;
            };
            a.Sb = d;
            a.stopImmediatePropagation = function() {
                e.stopImmediatePropagation && e.stopImmediatePropagation();
                a.Nc = c;
                a.stopPropagation();
            };
            a.Nc = d;
            if (a.clientX != j) {
                g = document.documentElement;
                var h = document.body;
                a.pageX = a.clientX + (g && g.scrollLeft || h && h.scrollLeft || 0) - (g && g.clientLeft || h && h.clientLeft || 0);
                a.pageY = a.clientY + (g && g.scrollTop || h && h.scrollTop || 0) - (g && g.clientTop || h && h.clientTop || 0);
            }
            a.which = a.charCode || a.keyCode;
            a.button != j && (a.button = a.button & 1 ? 0 : a.button & 4 ? 1 : a.button & 2 ? 2 : 0);
        }
        return a;
    };
    t.o = function(a, c) {
        var d = t.Ic(a) ? t.getData(a) : {}, e = a.parentNode || a.ownerDocument;
        "string" === typeof c && (c = {
            type: c,
            target: a
        });
        c = t.Nb(c);
        d.ba && d.ba.call(a, c);
        if (e && !c.Sb() && c.bubbles !== l) t.o(e, c); else if (!e && !c.defaultPrevented && (d = t.getData(c.target), 
        c.target[c.type])) {
            d.disabled = f;
            if ("function" === typeof c.target[c.type]) c.target[c.type]();
            d.disabled = l;
        }
        return !c.defaultPrevented;
    };
    t.N = function(a, c, d) {
        function e() {
            t.n(a, c, e);
            d.apply(this, arguments);
        }
        if (t.i.isArray(c)) return v(t.N, a, c, d);
        e.s = d.s = d.s || t.s++;
        t.b(a, c, e);
    };
    function v(a, c, d, e) {
        t.tc.forEach(d, function(d) {
            a(c, d, e);
        });
    }
    var w = Object.prototype.hasOwnProperty;
    t.e = function(a, c) {
        var d;
        c = c || {};
        d = document.createElement(a || "div");
        t.i.ca(c, function(a, c) {
            -1 !== a.indexOf("aria-") || "role" == a ? d.setAttribute(a, c) : d[a] = c;
        });
        return d;
    };
    t.va = function(a) {
        return a.charAt(0).toUpperCase() + a.slice(1);
    };
    t.i = {};
    t.i.create = Object.create || function(a) {
        function c() {}
        c.prototype = a;
        return new c();
    };
    t.i.ca = function(a, c, d) {
        for (var e in a) w.call(a, e) && c.call(d || this, e, a[e]);
    };
    t.i.D = function(a, c) {
        if (!c) return a;
        for (var d in c) w.call(c, d) && (a[d] = c[d]);
        return a;
    };
    t.i.Od = function(a, c) {
        var d, e, g;
        a = t.i.copy(a);
        for (d in c) w.call(c, d) && (e = a[d], g = c[d], a[d] = t.i.ib(e) && t.i.ib(g) ? t.i.Od(e, g) : c[d]);
        return a;
    };
    t.i.copy = function(a) {
        return t.i.D({}, a);
    };
    t.i.ib = function(a) {
        return !!a && "object" === typeof a && "[object Object]" === a.toString() && a.constructor === Object;
    };
    t.i.isArray = Array.isArray || function(a) {
        return "[object Array]" === Object.prototype.toString.call(a);
    };
    t.ge = function(a) {
        return a !== a;
    };
    t.bind = function(a, c, d) {
        function e() {
            return c.apply(a, arguments);
        }
        c.s || (c.s = t.s++);
        e.s = d ? d + "_" + c.s : c.s;
        return e;
    };
    t.ua = {};
    t.s = 1;
    t.expando = "vdata" + new Date().getTime();
    t.getData = function(a) {
        var c = a[t.expando];
        c || (c = a[t.expando] = t.s++);
        t.ua[c] || (t.ua[c] = {});
        return t.ua[c];
    };
    t.Ic = function(a) {
        a = a[t.expando];
        return !(!a || t.hb(t.ua[a]));
    };
    t.Zc = function(a) {
        var c = a[t.expando];
        if (c) {
            delete t.ua[c];
            try {
                delete a[t.expando];
            } catch (d) {
                a.removeAttribute ? a.removeAttribute(t.expando) : a[t.expando] = j;
            }
        }
    };
    t.hb = function(a) {
        for (var c in a) if (a[c] !== j) return l;
        return f;
    };
    t.Pa = function(a, c) {
        return -1 !== (" " + a.className + " ").indexOf(" " + c + " ");
    };
    t.p = function(a, c) {
        t.Pa(a, c) || (a.className = "" === a.className ? c : a.className + " " + c);
    };
    t.r = function(a, c) {
        var d, e;
        if (t.Pa(a, c)) {
            d = a.className.split(" ");
            for (e = d.length - 1; 0 <= e; e--) d[e] === c && d.splice(e, 1);
            a.className = d.join(" ");
        }
    };
    t.A = t.e("video");
    var x = document.createElement("track");
    x.Tb = "captions";
    x.ed = "en";
    x.label = "English";
    t.A.appendChild(x);
    t.P = navigator.userAgent;
    t.zd = /iPhone/i.test(t.P);
    t.yd = /iPad/i.test(t.P);
    t.Ad = /iPod/i.test(t.P);
    t.xd = t.zd || t.yd || t.Ad;
    var aa = t, y;
    var z = t.P.match(/OS (\d+)_/i);
    y = z && z[1] ? z[1] : b;
    aa.ff = y;
    t.wd = /Android/i.test(t.P);
    var ba = t, B;
    var C = t.P.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i), D, E;
    C ? (D = C[1] && parseFloat(C[1]), E = C[2] && parseFloat(C[2]), B = D && E ? parseFloat(C[1] + "." + C[2]) : D ? D : j) : B = j;
    ba.ec = B;
    t.Bd = t.wd && /webkit/i.test(t.P) && 2.3 > t.ec;
    t.gc = /Firefox/i.test(t.P);
    t.gf = /Chrome/i.test(t.P);
    t.pa = /MSIE\s8\.0/.test(t.P);
    t.Db = !!("ontouchstart" in window || window.ud && document instanceof window.ud);
    t.td = "backgroundSize" in t.A.style;
    t.ad = function(a, c) {
        t.i.ca(c, function(c, e) {
            e === j || "undefined" === typeof e || e === l ? a.removeAttribute(c) : a.setAttribute(c, e === f ? "" : e);
        });
    };
    t.Oa = function(a) {
        var c, d, e, g;
        c = {};
        if (a && a.attributes && 0 < a.attributes.length) {
            d = a.attributes;
            for (var h = d.length - 1; 0 <= h; h--) {
                e = d[h].name;
                g = d[h].value;
                if ("boolean" === typeof a[e] || -1 !== ",autoplay,controls,loop,muted,default,".indexOf("," + e + ",")) g = g !== j ? f : l;
                c[e] = g;
            }
        }
        return c;
    };
    t.rf = function(a, c) {
        var d = "";
        document.defaultView && document.defaultView.getComputedStyle ? d = document.defaultView.getComputedStyle(a, "").getPropertyValue(c) : a.currentStyle && (d = a["client" + c.substr(0, 1).toUpperCase() + c.substr(1)] + "px");
        return d;
    };
    t.Rb = function(a, c) {
        c.firstChild ? c.insertBefore(a, c.firstChild) : c.appendChild(a);
    };
    t.bb = {};
    t.m = function(a) {
        0 === a.indexOf("#") && (a = a.slice(1));
        return document.getElementById(a);
    };
    t.Na = function(a, c) {
        c = c || a;
        var d = Math.floor(a % 60), e = Math.floor(a / 60 % 60), g = Math.floor(a / 3600), h = Math.floor(c / 60 % 60), k = Math.floor(c / 3600);
        if (isNaN(a) || Infinity === a) g = e = d = "-";
        g = 0 < g || 0 < k ? g + ":" : "";
        return g + (((g || 10 <= h) && 10 > e ? "0" + e : e) + ":") + (10 > d ? "0" + d : d);
    };
    t.Id = function() {
        document.body.focus();
        document.onselectstart = p(l);
    };
    t.Xe = function() {
        document.onselectstart = p(f);
    };
    t.trim = function(a) {
        return (a + "").replace(/^\s+|\s+$/g, "");
    };
    t.round = function(a, c) {
        c || (c = 0);
        return Math.round(a * Math.pow(10, c)) / Math.pow(10, c);
    };
    t.xa = function(a, c) {
        return a === b && c === b ? {
            length: 0,
            start: function() {
                throw Error("This TimeRanges object is empty");
            },
            end: function() {
                throw Error("This TimeRanges object is empty");
            }
        } : {
            length: 1,
            start: function() {
                return a;
            },
            end: function() {
                return c;
            }
        };
    };
    t.Ie = function(a) {
        try {
            var c = window.localStorage || l;
            c && (c.volume = a);
        } catch (d) {
            22 == d.code || 1014 == d.code ? t.log("LocalStorage Full (VideoJS)", d) : 18 == d.code ? t.log("LocalStorage not allowed (VideoJS)", d) : t.log("LocalStorage Error (VideoJS)", d);
        }
    };
    t.Xd = function(a) {
        a.match(/^https?:\/\//) || (a = t.e("div", {
            innerHTML: '<a href="' + a + '">x</a>'
        }).firstChild.href);
        return a;
    };
    t.Ae = function(a) {
        var c, d, e, g;
        g = "protocol hostname port pathname search hash host".split(" ");
        d = t.e("a", {
            href: a
        });
        if (e = "" === d.host && "file:" !== d.protocol) c = t.e("div"), c.innerHTML = '<a href="' + a + '"></a>', 
        d = c.firstChild, c.setAttribute("style", "display:none; position:absolute;"), document.body.appendChild(c);
        a = {};
        for (var h = 0; h < g.length; h++) a[g[h]] = d[g[h]];
        "http:" === a.protocol && (a.host = a.host.replace(/:80$/, ""));
        "https:" === a.protocol && (a.host = a.host.replace(/:443$/, ""));
        e && document.body.removeChild(c);
        return a;
    };
    function F(a, c) {
        var d, e;
        d = Array.prototype.slice.call(c);
        e = m();
        e = window.console || {
            log: e,
            warn: e,
            error: e
        };
        a ? d.unshift(a.toUpperCase() + ":") : a = "log";
        t.log.history.push(d);
        d.unshift("VIDEOJS:");
        if (e[a].apply) e[a].apply(e, d); else e[a](d.join(" "));
    }
    t.log = function() {
        F(j, arguments);
    };
    t.log.history = [];
    t.log.error = function() {
        F("error", arguments);
    };
    t.log.warn = function() {
        F("warn", arguments);
    };
    t.Vd = function(a) {
        var c, d;
        a.getBoundingClientRect && a.parentNode && (c = a.getBoundingClientRect());
        if (!c) return {
            left: 0,
            top: 0
        };
        a = document.documentElement;
        d = document.body;
        return {
            left: t.round(c.left + (window.pageXOffset || d.scrollLeft) - (a.clientLeft || d.clientLeft || 0)),
            top: t.round(c.top + (window.pageYOffset || d.scrollTop) - (a.clientTop || d.clientTop || 0))
        };
    };
    t.tc = {};
    t.tc.forEach = function(a, c, d) {
        if (t.i.isArray(a) && c instanceof Function) for (var e = 0, g = a.length; e < g; ++e) c.call(d || t, a[e], e, a);
        return a;
    };
    t.bf = function(a, c) {
        var d, e, g, h, k, q, r;
        "string" === typeof a && (a = {
            uri: a
        });
        videojs.Z.Aa({
            method: "GET",
            timeout: 45e3
        }, a);
        c = c || m();
        q = function() {
            window.clearTimeout(k);
            c(j, e, e.response || e.responseText);
        };
        r = function(a) {
            window.clearTimeout(k);
            if (!a || "string" === typeof a) a = Error(a);
            c(a, e);
        };
        d = window.XMLHttpRequest;
        "undefined" === typeof d && (d = function() {
            try {
                return new window.ActiveXObject("Msxml2.XMLHTTP.6.0");
            } catch (a) {}
            try {
                return new window.ActiveXObject("Msxml2.XMLHTTP.3.0");
            } catch (c) {}
            try {
                return new window.ActiveXObject("Msxml2.XMLHTTP");
            } catch (d) {}
            throw Error("This browser does not support XMLHttpRequest.");
        });
        e = new d();
        e.uri = a.uri;
        d = t.Ae(a.uri);
        g = window.location;
        d.protocol + d.host !== g.protocol + g.host && window.XDomainRequest && !("withCredentials" in e) ? (e = new window.XDomainRequest(), 
        e.onload = q, e.onerror = r, e.onprogress = m(), e.ontimeout = m()) : (h = "file:" == d.protocol || "file:" == g.protocol, 
        e.onreadystatechange = function() {
            if (4 === e.readyState) {
                if (e.Ue) return r("timeout");
                200 === e.status || h && 0 === e.status ? q() : r();
            }
        }, a.timeout && (k = window.setTimeout(function() {
            4 !== e.readyState && (e.Ue = f, e.abort());
        }, a.timeout)));
        try {
            e.open(a.method || "GET", a.uri, f);
        } catch (u) {
            r(u);
            return;
        }
        a.withCredentials && (e.withCredentials = f);
        a.responseType && (e.responseType = a.responseType);
        try {
            e.send();
        } catch (A) {
            r(A);
        }
    };
    t.Z = {};
    t.Z.Aa = function(a, c) {
        var d, e, g;
        a = t.i.copy(a);
        for (d in c) c.hasOwnProperty(d) && (e = a[d], g = c[d], a[d] = t.i.ib(e) && t.i.ib(g) ? t.Z.Aa(e, g) : c[d]);
        return a;
    };
    t.z = m();
    s = t.z.prototype;
    s.ab = {};
    s.b = function(a, c) {
        var d = this.addEventListener;
        this.addEventListener = Function.prototype;
        t.b(this, a, c);
        this.addEventListener = d;
    };
    s.addEventListener = t.z.prototype.b;
    s.n = function(a, c) {
        t.n(this, a, c);
    };
    s.removeEventListener = t.z.prototype.n;
    s.N = function(a, c) {
        t.N(this, a, c);
    };
    s.o = function(a) {
        var c = a.type || a;
        "string" === typeof a && (a = {
            type: c
        });
        a = t.Nb(a);
        if (this.ab[c] && this["on" + c]) this["on" + c](a);
        t.o(this, a);
    };
    s.dispatchEvent = t.z.prototype.o;
    t.a = t.Ga.extend({
        l: function(a, c, d) {
            this.d = a;
            this.q = t.i.copy(this.q);
            c = this.options(c);
            this.Qa = c.id || c.el && c.el.id;
            this.Qa || (this.Qa = (a.id && a.id() || "no_player") + "_component_" + t.s++);
            this.pe = c.name || j;
            this.c = c.el || this.e();
            this.R = [];
            this.cb = {};
            this.eb = {};
            this.Kc();
            this.I(d);
            if (c.$c !== l) {
                var e, g;
                this.k().reportUserActivity && (e = t.bind(this.k(), this.k().reportUserActivity), 
                this.b("touchstart", function() {
                    e();
                    this.clearInterval(g);
                    g = this.setInterval(e, 250);
                }), a = function() {
                    e();
                    this.clearInterval(g);
                }, this.b("touchmove", e), this.b("touchend", a), this.b("touchcancel", a));
            }
        }
    });
    s = t.a.prototype;
    s.dispose = function() {
        this.o({
            type: "dispose",
            bubbles: l
        });
        if (this.R) for (var a = this.R.length - 1; 0 <= a; a--) this.R[a].dispose && this.R[a].dispose();
        this.eb = this.cb = this.R = j;
        this.n();
        this.c.parentNode && this.c.parentNode.removeChild(this.c);
        t.Zc(this.c);
        this.c = j;
    };
    s.d = f;
    s.k = n("d");
    s.options = function(a) {
        return a === b ? this.q : this.q = t.Z.Aa(this.q, a);
    };
    s.e = function(a, c) {
        return t.e(a, c);
    };
    s.v = function(a) {
        var c = this.d.language(), d = this.d.languages();
        return d && d[c] && d[c][a] ? d[c][a] : a;
    };
    s.m = n("c");
    s.wa = function() {
        return this.B || this.c;
    };
    s.id = n("Qa");
    s.name = n("pe");
    s.children = n("R");
    s.Yd = function(a) {
        return this.cb[a];
    };
    s.da = function(a) {
        return this.eb[a];
    };
    s.aa = function(a, c) {
        var d, e;
        "string" === typeof a ? (e = a, c = c || {}, d = c.componentClass || t.va(e), c.name = e, 
        d = new window.videojs[d](this.d || this, c)) : d = a;
        this.R.push(d);
        "function" === typeof d.id && (this.cb[d.id()] = d);
        (e = e || d.name && d.name()) && (this.eb[e] = d);
        "function" === typeof d.el && d.el() && this.wa().appendChild(d.el());
        return d;
    };
    s.removeChild = function(a) {
        "string" === typeof a && (a = this.da(a));
        if (a && this.R) {
            for (var c = l, d = this.R.length - 1; 0 <= d; d--) if (this.R[d] === a) {
                c = f;
                this.R.splice(d, 1);
                break;
            }
            c && (this.cb[a.id()] = j, this.eb[a.name()] = j, (c = a.m()) && c.parentNode === this.wa() && this.wa().removeChild(a.m()));
        }
    };
    s.Kc = function() {
        var a, c, d, e, g, h;
        a = this;
        c = a.options();
        if (d = c.children) if (h = function(d, e) {
            c[d] !== b && (e = c[d]);
            e !== l && (a[d] = a.aa(d, e));
        }, t.i.isArray(d)) for (var k = 0; k < d.length; k++) e = d[k], "string" == typeof e ? (g = e, 
        e = {}) : g = e.name, h(g, e); else t.i.ca(d, h);
    };
    s.T = p("");
    s.b = function(a, c, d) {
        var e, g, h;
        "string" === typeof a || t.i.isArray(a) ? t.b(this.c, a, t.bind(this, c)) : (e = t.bind(this, d), 
        h = this, g = function() {
            h.n(a, c, e);
        }, g.s = e.s, this.b("dispose", g), d = function() {
            h.n("dispose", g);
        }, d.s = e.s, a.nodeName ? (t.b(a, c, e), t.b(a, "dispose", d)) : "function" === typeof a.b && (a.b(c, e), 
        a.b("dispose", d)));
        return this;
    };
    s.n = function(a, c, d) {
        !a || "string" === typeof a || t.i.isArray(a) ? t.n(this.c, a, c) : (d = t.bind(this, d), 
        this.n("dispose", d), a.nodeName ? (t.n(a, c, d), t.n(a, "dispose", d)) : (a.n(c, d), 
        a.n("dispose", d)));
        return this;
    };
    s.N = function(a, c, d) {
        var e, g, h;
        "string" === typeof a || t.i.isArray(a) ? t.N(this.c, a, t.bind(this, c)) : (e = t.bind(this, d), 
        g = this, h = function() {
            g.n(a, c, h);
            e.apply(this, arguments);
        }, h.s = e.s, this.b(a, c, h));
        return this;
    };
    s.o = function(a) {
        t.o(this.c, a);
        return this;
    };
    s.I = function(a) {
        a && (this.ya ? a.call(this) : (this.mb === b && (this.mb = []), this.mb.push(a)));
        return this;
    };
    s.Va = function() {
        this.ya = f;
        var a = this.mb;
        this.mb = [];
        if (a && 0 < a.length) {
            for (var c = 0, d = a.length; c < d; c++) a[c].call(this);
            this.o("ready");
        }
    };
    s.Pa = function(a) {
        return t.Pa(this.c, a);
    };
    s.p = function(a) {
        t.p(this.c, a);
        return this;
    };
    s.r = function(a) {
        t.r(this.c, a);
        return this;
    };
    s.show = function() {
        this.r("vjs-hidden");
        return this;
    };
    s.W = function() {
        this.p("vjs-hidden");
        return this;
    };
    function G(a) {
        a.r("vjs-lock-showing");
    }
    s.width = function(a, c) {
        return ca(this, "width", a, c);
    };
    s.height = function(a, c) {
        return ca(this, "height", a, c);
    };
    s.Qd = function(a, c) {
        return this.width(a, f).height(c);
    };
    function ca(a, c, d, e) {
        if (d !== b) {
            if (d === j || t.ge(d)) d = 0;
            a.c.style[c] = -1 !== ("" + d).indexOf("%") || -1 !== ("" + d).indexOf("px") ? d : "auto" === d ? "" : d + "px";
            e || a.o("resize");
            return a;
        }
        if (!a.c) return 0;
        d = a.c.style[c];
        e = d.indexOf("px");
        return -1 !== e ? parseInt(d.slice(0, e), 10) : parseInt(a.c["offset" + t.va(c)], 10);
    }
    function da(a) {
        var c, d, e, g, h, k, q, r;
        c = 0;
        d = j;
        a.b("touchstart", function(a) {
            1 === a.touches.length && (d = t.i.copy(a.touches[0]), c = new Date().getTime(), 
            g = f);
        });
        a.b("touchmove", function(a) {
            1 < a.touches.length ? g = l : d && (k = a.touches[0].pageX - d.pageX, q = a.touches[0].pageY - d.pageY, 
            r = Math.sqrt(k * k + q * q), 10 < r && (g = l));
        });
        h = function() {
            g = l;
        };
        a.b("touchleave", h);
        a.b("touchcancel", h);
        a.b("touchend", function(a) {
            d = j;
            g === f && (e = new Date().getTime() - c, 200 > e && (a.preventDefault(), this.o("tap")));
        });
    }
    s.setTimeout = function(a, c) {
        function d() {
            this.clearTimeout(e);
        }
        a = t.bind(this, a);
        var e = setTimeout(a, c);
        d.s = "vjs-timeout-" + e;
        this.b("dispose", d);
        return e;
    };
    s.clearTimeout = function(a) {
        function c() {}
        clearTimeout(a);
        c.s = "vjs-timeout-" + a;
        this.n("dispose", c);
        return a;
    };
    s.setInterval = function(a, c) {
        function d() {
            this.clearInterval(e);
        }
        a = t.bind(this, a);
        var e = setInterval(a, c);
        d.s = "vjs-interval-" + e;
        this.b("dispose", d);
        return e;
    };
    s.clearInterval = function(a) {
        function c() {}
        clearInterval(a);
        c.s = "vjs-interval-" + a;
        this.n("dispose", c);
        return a;
    };
    t.w = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            da(this);
            this.b("tap", this.u);
            this.b("click", this.u);
            this.b("focus", this.kb);
            this.b("blur", this.jb);
        }
    });
    s = t.w.prototype;
    s.e = function(a, c) {
        var d;
        c = t.i.D({
            className: this.T(),
            role: "button",
            "aria-live": "polite",
            tabIndex: 0
        }, c);
        d = t.a.prototype.e.call(this, a, c);
        c.innerHTML || (this.B = t.e("div", {
            className: "vjs-control-content"
        }), this.Ib = t.e("span", {
            className: "vjs-control-text",
            innerHTML: this.v(this.ta) || "Need Text"
        }), this.B.appendChild(this.Ib), d.appendChild(this.B));
        return d;
    };
    s.T = function() {
        return "vjs-control " + t.a.prototype.T.call(this);
    };
    s.u = m();
    s.kb = function() {
        t.b(document, "keydown", t.bind(this, this.ka));
    };
    s.ka = function(a) {
        if (32 == a.which || 13 == a.which) a.preventDefault(), this.u();
    };
    s.jb = function() {
        t.n(document, "keydown", t.bind(this, this.ka));
    };
    t.S = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.Hd = this.da(this.q.barName);
            this.handle = this.da(this.q.handleName);
            this.b("mousedown", this.lb);
            this.b("touchstart", this.lb);
            this.b("focus", this.kb);
            this.b("blur", this.jb);
            this.b("click", this.u);
            this.b(a, "controlsvisible", this.update);
            this.b(a, this.Uc, this.update);
        }
    });
    s = t.S.prototype;
    s.e = function(a, c) {
        c = c || {};
        c.className += " vjs-slider";
        c = t.i.D({
            role: "slider",
            "aria-valuenow": 0,
            "aria-valuemin": 0,
            "aria-valuemax": 100,
            tabIndex: 0
        }, c);
        return t.a.prototype.e.call(this, a, c);
    };
    s.lb = function(a) {
        a.preventDefault();
        t.Id();
        this.p("vjs-sliding");
        this.b(document, "mousemove", this.la);
        this.b(document, "mouseup", this.Ba);
        this.b(document, "touchmove", this.la);
        this.b(document, "touchend", this.Ba);
        this.la(a);
    };
    s.la = m();
    s.Ba = function() {
        t.Xe();
        this.r("vjs-sliding");
        this.n(document, "mousemove", this.la);
        this.n(document, "mouseup", this.Ba);
        this.n(document, "touchmove", this.la);
        this.n(document, "touchend", this.Ba);
        this.update();
    };
    s.update = function() {
        if (this.c) {
            var a, c = this.Qb(), d = this.handle, e = this.Hd;
            if ("number" !== typeof c || c !== c || 0 > c || Infinity === c) c = 0;
            a = c;
            if (d) {
                a = this.c.offsetWidth;
                var g = d.m().offsetWidth;
                a = g ? g / a : 0;
                c *= 1 - a;
                a = c + a / 2;
                d.m().style.left = t.round(100 * c, 2) + "%";
            }
            e && (e.m().style.width = t.round(100 * a, 2) + "%");
        }
    };
    function ea(a, c) {
        var d, e, g, h;
        d = a.c;
        e = t.Vd(d);
        h = g = d.offsetWidth;
        d = a.handle;
        if (a.options().vertical) return h = e.top, e = c.changedTouches ? c.changedTouches[0].pageY : c.pageY, 
        d && (d = d.m().offsetHeight, h += d / 2, g -= d), Math.max(0, Math.min(1, (h - e + g) / g));
        g = e.left;
        e = c.changedTouches ? c.changedTouches[0].pageX : c.pageX;
        d && (d = d.m().offsetWidth, g += d / 2, h -= d);
        return Math.max(0, Math.min(1, (e - g) / h));
    }
    s.kb = function() {
        this.b(document, "keydown", this.ka);
    };
    s.ka = function(a) {
        if (37 == a.which || 40 == a.which) a.preventDefault(), this.fd(); else if (38 == a.which || 39 == a.which) a.preventDefault(), 
        this.gd();
    };
    s.jb = function() {
        this.n(document, "keydown", this.ka);
    };
    s.u = function(a) {
        a.stopImmediatePropagation();
        a.preventDefault();
    };
    t.ga = t.a.extend();
    t.ga.prototype.defaultValue = 0;
    t.ga.prototype.e = function(a, c) {
        c = c || {};
        c.className += " vjs-slider-handle";
        c = t.i.D({
            innerHTML: '<span class="vjs-control-text">' + this.defaultValue + "</span>"
        }, c);
        return t.a.prototype.e.call(this, "div", c);
    };
    t.qa = t.a.extend();
    function fa(a, c) {
        a.aa(c);
        c.b("click", t.bind(a, function() {
            G(this);
        }));
    }
    t.qa.prototype.e = function() {
        var a = this.options().zc || "ul";
        this.B = t.e(a, {
            className: "vjs-menu-content"
        });
        a = t.a.prototype.e.call(this, "div", {
            append: this.B,
            className: "vjs-menu"
        });
        a.appendChild(this.B);
        t.b(a, "click", function(a) {
            a.preventDefault();
            a.stopImmediatePropagation();
        });
        return a;
    };
    t.M = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
            this.selected(c.selected);
        }
    });
    t.M.prototype.e = function(a, c) {
        return t.w.prototype.e.call(this, "li", t.i.D({
            className: "vjs-menu-item",
            innerHTML: this.v(this.q.label)
        }, c));
    };
    t.M.prototype.u = function() {
        this.selected(f);
    };
    t.M.prototype.selected = function(a) {
        a ? (this.p("vjs-selected"), this.c.setAttribute("aria-selected", f)) : (this.r("vjs-selected"), 
        this.c.setAttribute("aria-selected", l));
    };
    t.O = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
            this.update();
            this.b("keydown", this.ka);
            this.c.setAttribute("aria-haspopup", f);
            this.c.setAttribute("role", "button");
        }
    });
    s = t.O.prototype;
    s.update = function() {
        var a = this.La();
        this.za && this.removeChild(this.za);
        this.za = a;
        this.aa(a);
        this.H && 0 === this.H.length ? this.W() : this.H && 1 < this.H.length && this.show();
    };
    s.Ja = l;
    s.La = function() {
        var a = new t.qa(this.d);
        this.options().title && a.wa().appendChild(t.e("li", {
            className: "vjs-menu-title",
            innerHTML: t.va(this.options().title),
            Se: -1
        }));
        if (this.H = this.createItems()) for (var c = 0; c < this.H.length; c++) fa(a, this.H[c]);
        return a;
    };
    s.Ka = m();
    s.T = function() {
        return this.className + " vjs-menu-button " + t.w.prototype.T.call(this);
    };
    s.kb = m();
    s.jb = m();
    s.u = function() {
        this.N("mouseout", t.bind(this, function() {
            G(this.za);
            this.c.blur();
        }));
        this.Ja ? H(this) : ga(this);
    };
    s.ka = function(a) {
        32 == a.which || 13 == a.which ? (this.Ja ? H(this) : ga(this), a.preventDefault()) : 27 == a.which && (this.Ja && H(this), 
        a.preventDefault());
    };
    function ga(a) {
        a.Ja = f;
        a.za.p("vjs-lock-showing");
        a.c.setAttribute("aria-pressed", f);
        a.H && 0 < a.H.length && a.H[0].m().focus();
    }
    function H(a) {
        a.Ja = l;
        G(a.za);
        a.c.setAttribute("aria-pressed", l);
    }
    t.J = function(a) {
        "number" === typeof a ? this.code = a : "string" === typeof a ? this.message = a : "object" === typeof a && t.i.D(this, a);
        this.message || (this.message = t.J.Pd[this.code] || "");
    };
    t.J.prototype.code = 0;
    t.J.prototype.message = "";
    t.J.prototype.status = j;
    t.J.gb = "MEDIA_ERR_CUSTOM MEDIA_ERR_ABORTED MEDIA_ERR_NETWORK MEDIA_ERR_DECODE MEDIA_ERR_SRC_NOT_SUPPORTED MEDIA_ERR_ENCRYPTED".split(" ");
    t.J.Pd = {
        1: "You aborted the video playback",
        2: "A network error caused the video download to fail part-way.",
        3: "The video playback was aborted due to a corruption problem or because the video used features your browser did not support.",
        4: "The video could not be loaded, either because the server or network failed or because the format is not supported.",
        5: "The video is encrypted and we do not have the keys to decrypt it."
    };
    for (var I = 0; I < t.J.gb.length; I++) t.J[t.J.gb[I]] = I, t.J.prototype[t.J.gb[I]] = I;
    var J, ha, K, L;
    J = [ "requestFullscreen exitFullscreen fullscreenElement fullscreenEnabled fullscreenchange fullscreenerror".split(" "), "webkitRequestFullscreen webkitExitFullscreen webkitFullscreenElement webkitFullscreenEnabled webkitfullscreenchange webkitfullscreenerror".split(" "), "webkitRequestFullScreen webkitCancelFullScreen webkitCurrentFullScreenElement webkitCancelFullScreen webkitfullscreenchange webkitfullscreenerror".split(" "), "mozRequestFullScreen mozCancelFullScreen mozFullScreenElement mozFullScreenEnabled mozfullscreenchange mozfullscreenerror".split(" "), "msRequestFullscreen msExitFullscreen msFullscreenElement msFullscreenEnabled MSFullscreenChange MSFullscreenError".split(" ") ];
    ha = J[0];
    for (L = 0; L < J.length; L++) if (J[L][1] in document) {
        K = J[L];
        break;
    }
    if (K) {
        t.bb.Pb = {};
        for (L = 0; L < K.length; L++) t.bb.Pb[ha[L]] = K[L];
    }
    t.Player = t.a.extend({
        l: function(a, c, d) {
            this.L = a;
            a.id = a.id || "vjs_video_" + t.s++;
            this.Te = a && t.Oa(a);
            c = t.i.D(ia(a), c);
            this.Pc = c.language || t.options.language;
            this.je = c.languages || t.options.languages;
            this.K = {};
            this.Vc = c.poster || "";
            this.Jb = !!c.controls;
            a.controls = l;
            c.$c = l;
            ja(this, "audio" === this.L.nodeName.toLowerCase());
            t.a.call(this, this, c, d);
            this.controls() ? this.p("vjs-controls-enabled") : this.p("vjs-controls-disabled");
            ja(this) && this.p("vjs-audio");
            t.Ca[this.Qa] = this;
            c.plugins && t.i.ca(c.plugins, function(a, c) {
                this[a](c);
            }, this);
            var e, g, h, k, q;
            e = t.bind(this, this.reportUserActivity);
            this.b("mousedown", function() {
                e();
                this.clearInterval(g);
                g = this.setInterval(e, 250);
            });
            this.b("mousemove", function(a) {
                if (a.screenX != k || a.screenY != q) k = a.screenX, q = a.screenY, e();
            });
            this.b("mouseup", function() {
                e();
                this.clearInterval(g);
            });
            this.b("keydown", e);
            this.b("keyup", e);
            this.setInterval(function() {
                if (this.Fa) {
                    this.Fa = l;
                    this.userActive(f);
                    this.clearTimeout(h);
                    var a = this.options().inactivityTimeout;
                    0 < a && (h = this.setTimeout(function() {
                        this.Fa || this.userActive(l);
                    }, a));
                }
            }, 250);
        }
    });
    s = t.Player.prototype;
    s.language = function(a) {
        if (a === b) return this.Pc;
        this.Pc = a;
        return this;
    };
    s.languages = n("je");
    s.q = t.options;
    s.dispose = function() {
        this.o("dispose");
        this.n("dispose");
        t.Ca[this.Qa] = j;
        this.L && this.L.player && (this.L.player = j);
        this.c && this.c.player && (this.c.player = j);
        this.h && this.h.dispose();
        t.a.prototype.dispose.call(this);
    };
    function ia(a) {
        var c, d, e = {
            sources: [],
            tracks: []
        };
        c = t.Oa(a);
        d = c["data-setup"];
        d !== j && t.i.D(c, t.JSON.parse(d || "{}"));
        t.i.D(e, c);
        if (a.hasChildNodes()) {
            var g, h;
            a = a.childNodes;
            g = 0;
            for (h = a.length; g < h; g++) c = a[g], d = c.nodeName.toLowerCase(), "source" === d ? e.sources.push(t.Oa(c)) : "track" === d && e.tracks.push(t.Oa(c));
        }
        return e;
    }
    s.e = function() {
        var a = this.c = t.a.prototype.e.call(this, "div"), c = this.L, d;
        c.removeAttribute("width");
        c.removeAttribute("height");
        d = t.Oa(c);
        t.i.ca(d, function(c) {
            "class" == c ? a.className = d[c] : a.setAttribute(c, d[c]);
        });
        c.id += "_html5_api";
        c.className = "vjs-tech";
        c.player = a.player = this;
        this.p("vjs-paused");
        this.width(this.q.width, f);
        this.height(this.q.height, f);
        c.ce = c.networkState;
        c.parentNode && c.parentNode.insertBefore(a, c);
        t.Rb(c, a);
        this.c = a;
        this.b("loadstart", this.te);
        this.b("waiting", this.ze);
        this.b([ "canplay", "canplaythrough", "playing", "ended" ], this.ye);
        this.b("seeking", this.we);
        this.b("seeked", this.ve);
        this.b("ended", this.qe);
        this.b("play", this.Xb);
        this.b("firstplay", this.re);
        this.b("pause", this.Wb);
        this.b("progress", this.ue);
        this.b("durationchange", this.Sc);
        this.b("fullscreenchange", this.se);
        return a;
    };
    function ka(a, c, d) {
        a.h && (a.ya = l, a.h.dispose(), a.h = l);
        "Html5" !== c && a.L && (t.f.Kb(a.L), a.L = j);
        a.Ta = c;
        a.ya = l;
        var e = t.i.D({
            source: d,
            parentEl: a.c
        }, a.q[c.toLowerCase()]);
        d && (a.Cc = d.type, d.src == a.K.src && 0 < a.K.currentTime && (e.startTime = a.K.currentTime), 
        a.K.src = d.src);
        a.h = new window.videojs[c](a, e);
        a.h.I(function() {
            this.d.Va();
        });
    }
    s.te = function() {
        this.r("vjs-ended");
        this.error(j);
        this.paused() ? la(this, l) : this.o("firstplay");
    };
    s.Jc = l;
    function la(a, c) {
        c !== b && a.Jc !== c && ((a.Jc = c) ? (a.p("vjs-has-started"), a.o("firstplay")) : a.r("vjs-has-started"));
    }
    s.Xb = function() {
        this.r("vjs-ended");
        this.r("vjs-paused");
        this.p("vjs-playing");
        la(this, f);
    };
    s.ze = function() {
        this.p("vjs-waiting");
    };
    s.ye = function() {
        this.r("vjs-waiting");
    };
    s.we = function() {
        this.p("vjs-seeking");
    };
    s.ve = function() {
        this.r("vjs-seeking");
    };
    s.re = function() {
        this.q.starttime && this.currentTime(this.q.starttime);
        this.p("vjs-has-started");
    };
    s.Wb = function() {
        this.r("vjs-playing");
        this.p("vjs-paused");
    };
    s.ue = function() {
        1 == this.bufferedPercent() && this.o("loadedalldata");
    };
    s.qe = function() {
        this.p("vjs-ended");
        this.q.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause();
    };
    s.Sc = function() {
        var a = M(this, "duration");
        a && (0 > a && (a = Infinity), this.duration(a), Infinity === a ? this.p("vjs-live") : this.r("vjs-live"));
    };
    s.se = function() {
        this.isFullscreen() ? this.p("vjs-fullscreen") : this.r("vjs-fullscreen");
    };
    function N(a, c, d) {
        if (a.h && !a.h.ya) a.h.I(function() {
            this[c](d);
        }); else try {
            a.h[c](d);
        } catch (e) {
            throw t.log(e), e;
        }
    }
    function M(a, c) {
        if (a.h && a.h.ya) try {
            return a.h[c]();
        } catch (d) {
            throw a.h[c] === b ? t.log("Video.js: " + c + " method not defined for " + a.Ta + " playback technology.", d) : "TypeError" == d.name ? (t.log("Video.js: " + c + " unavailable on " + a.Ta + " playback technology element.", d), 
            a.h.ya = l) : t.log(d), d;
        }
    }
    s.play = function() {
        N(this, "play");
        return this;
    };
    s.pause = function() {
        N(this, "pause");
        return this;
    };
    s.paused = function() {
        return M(this, "paused") === l ? l : f;
    };
    s.currentTime = function(a) {
        return a !== b ? (N(this, "setCurrentTime", a), this) : this.K.currentTime = M(this, "currentTime") || 0;
    };
    s.duration = function(a) {
        if (a !== b) return this.K.duration = parseFloat(a), this;
        this.K.duration === b && this.Sc();
        return this.K.duration || 0;
    };
    s.remainingTime = function() {
        return this.duration() - this.currentTime();
    };
    s.buffered = function() {
        var a = M(this, "buffered");
        if (!a || !a.length) a = t.xa(0, 0);
        return a;
    };
    s.bufferedPercent = function() {
        var a = this.duration(), c = this.buffered(), d = 0, e, g;
        if (!a) return 0;
        for (var h = 0; h < c.length; h++) e = c.start(h), g = c.end(h), g > a && (g = a), 
        d += g - e;
        return d / a;
    };
    s.volume = function(a) {
        if (a !== b) return a = Math.max(0, Math.min(1, parseFloat(a))), this.K.volume = a, 
        N(this, "setVolume", a), t.Ie(a), this;
        a = parseFloat(M(this, "volume"));
        return isNaN(a) ? 1 : a;
    };
    s.muted = function(a) {
        return a !== b ? (N(this, "setMuted", a), this) : M(this, "muted") || l;
    };
    s.Sa = function() {
        return M(this, "supportsFullScreen") || l;
    };
    s.Mc = l;
    s.isFullscreen = function(a) {
        return a !== b ? (this.Mc = !!a, this) : this.Mc;
    };
    s.isFullScreen = function(a) {
        t.log.warn('player.isFullScreen() has been deprecated, use player.isFullscreen() with a lowercase "s")');
        return this.isFullscreen(a);
    };
    s.requestFullscreen = function() {
        var a = t.bb.Pb;
        this.isFullscreen(f);
        a ? (t.b(document, a.fullscreenchange, t.bind(this, function(c) {
            this.isFullscreen(document[a.fullscreenElement]);
            this.isFullscreen() === l && t.n(document, a.fullscreenchange, arguments.callee);
            this.o("fullscreenchange");
        })), this.c[a.requestFullscreen]()) : this.h.Sa() ? N(this, "enterFullScreen") : (this.Fc(), 
        this.o("fullscreenchange"));
        return this;
    };
    s.requestFullScreen = function() {
        t.log.warn('player.requestFullScreen() has been deprecated, use player.requestFullscreen() with a lowercase "s")');
        return this.requestFullscreen();
    };
    s.exitFullscreen = function() {
        var a = t.bb.Pb;
        this.isFullscreen(l);
        if (a) document[a.exitFullscreen](); else this.h.Sa() ? N(this, "exitFullScreen") : (this.Lb(), 
        this.o("fullscreenchange"));
        return this;
    };
    s.cancelFullScreen = function() {
        t.log.warn("player.cancelFullScreen() has been deprecated, use player.exitFullscreen()");
        return this.exitFullscreen();
    };
    s.Fc = function() {
        this.fe = f;
        this.Rd = document.documentElement.style.overflow;
        t.b(document, "keydown", t.bind(this, this.Gc));
        document.documentElement.style.overflow = "hidden";
        t.p(document.body, "vjs-full-window");
        this.o("enterFullWindow");
    };
    s.Gc = function(a) {
        27 === a.keyCode && (this.isFullscreen() === f ? this.exitFullscreen() : this.Lb());
    };
    s.Lb = function() {
        this.fe = l;
        t.n(document, "keydown", this.Gc);
        document.documentElement.style.overflow = this.Rd;
        t.r(document.body, "vjs-full-window");
        this.o("exitFullWindow");
    };
    s.selectSource = function(a) {
        for (var c = 0, d = this.q.techOrder; c < d.length; c++) {
            var e = t.va(d[c]), g = window.videojs[e];
            if (g) {
                if (g.isSupported()) for (var h = 0, k = a; h < k.length; h++) {
                    var q = k[h];
                    if (g.canPlaySource(q)) return {
                        source: q,
                        h: e
                    };
                }
            } else t.log.error('The "' + e + '" tech is undefined. Skipped browser support check for that tech.');
        }
        return l;
    };
    s.src = function(a) {
        if (a === b) return M(this, "src");
        t.i.isArray(a) ? ma(this, a) : "string" === typeof a ? this.src({
            src: a
        }) : a instanceof Object && (a.type && !window.videojs[this.Ta].canPlaySource(a) ? ma(this, [ a ]) : (this.K.src = a.src, 
        this.Cc = a.type || "", this.I(function() {
            window.videojs[this.Ta].prototype.hasOwnProperty("setSource") ? N(this, "setSource", a) : N(this, "src", a.src);
            "auto" == this.q.preload && this.load();
            this.q.autoplay && this.play();
        })));
        return this;
    };
    function ma(a, c) {
        var d = a.selectSource(c);
        d ? d.h === a.Ta ? a.src(d.source) : ka(a, d.h, d.source) : (a.setTimeout(function() {
            this.error({
                code: 4,
                message: this.v(this.options().notSupportedMessage)
            });
        }, 0), a.Va());
    }
    s.load = function() {
        N(this, "load");
        return this;
    };
    s.currentSrc = function() {
        return M(this, "currentSrc") || this.K.src || "";
    };
    s.Nd = function() {
        return this.Cc || "";
    };
    s.Ra = function(a) {
        return a !== b ? (N(this, "setPreload", a), this.q.preload = a, this) : M(this, "preload");
    };
    s.autoplay = function(a) {
        return a !== b ? (N(this, "setAutoplay", a), this.q.autoplay = a, this) : M(this, "autoplay");
    };
    s.loop = function(a) {
        return a !== b ? (N(this, "setLoop", a), this.q.loop = a, this) : M(this, "loop");
    };
    s.poster = function(a) {
        if (a === b) return this.Vc;
        a || (a = "");
        this.Vc = a;
        N(this, "setPoster", a);
        this.o("posterchange");
        return this;
    };
    s.controls = function(a) {
        return a !== b ? (a = !!a, this.Jb !== a && ((this.Jb = a) ? (this.r("vjs-controls-disabled"), 
        this.p("vjs-controls-enabled"), this.o("controlsenabled")) : (this.r("vjs-controls-enabled"), 
        this.p("vjs-controls-disabled"), this.o("controlsdisabled"))), this) : this.Jb;
    };
    t.Player.prototype.bc;
    s = t.Player.prototype;
    s.usingNativeControls = function(a) {
        return a !== b ? (a = !!a, this.bc !== a && ((this.bc = a) ? (this.p("vjs-using-native-controls"), 
        this.o("usingnativecontrols")) : (this.r("vjs-using-native-controls"), this.o("usingcustomcontrols"))), 
        this) : this.bc;
    };
    s.ja = j;
    s.error = function(a) {
        if (a === b) return this.ja;
        if (a === j) return this.ja = a, this.r("vjs-error"), this;
        this.ja = a instanceof t.J ? a : new t.J(a);
        this.o("error");
        this.p("vjs-error");
        t.log.error("(CODE:" + this.ja.code + " " + t.J.gb[this.ja.code] + ")", this.ja.message, this.ja);
        return this;
    };
    s.ended = function() {
        return M(this, "ended");
    };
    s.seeking = function() {
        return M(this, "seeking");
    };
    s.seekable = function() {
        return M(this, "seekable");
    };
    s.Fa = f;
    s.reportUserActivity = function() {
        this.Fa = f;
    };
    s.ac = f;
    s.userActive = function(a) {
        return a !== b ? (a = !!a, a !== this.ac && ((this.ac = a) ? (this.Fa = f, this.r("vjs-user-inactive"), 
        this.p("vjs-user-active"), this.o("useractive")) : (this.Fa = l, this.h && this.h.N("mousemove", function(a) {
            a.stopPropagation();
            a.preventDefault();
        }), this.r("vjs-user-active"), this.p("vjs-user-inactive"), this.o("userinactive"))), 
        this) : this.ac;
    };
    s.playbackRate = function(a) {
        return a !== b ? (N(this, "setPlaybackRate", a), this) : this.h && this.h.featuresPlaybackRate ? M(this, "playbackRate") : 1;
    };
    s.Lc = l;
    function ja(a, c) {
        return c !== b ? (a.Lc = !!c, a) : a.Lc;
    }
    s.networkState = function() {
        return M(this, "networkState");
    };
    s.readyState = function() {
        return M(this, "readyState");
    };
    s.textTracks = function() {
        return this.h && this.h.textTracks();
    };
    s.X = function() {
        return this.h && this.h.remoteTextTracks();
    };
    s.addTextTrack = function(a, c, d) {
        return this.h && this.h.addTextTrack(a, c, d);
    };
    s.ha = function(a) {
        return this.h && this.h.addRemoteTextTrack(a);
    };
    s.Da = function(a) {
        this.h && this.h.removeRemoteTextTrack(a);
    };
    t.tb = t.a.extend();
    t.tb.prototype.q = {
        sf: "play",
        children: {
            playToggle: {},
            currentTimeDisplay: {},
            timeDivider: {},
            durationDisplay: {},
            remainingTimeDisplay: {},
            liveDisplay: {},
            progressControl: {},
            fullscreenToggle: {},
            volumeControl: {},
            muteToggle: {},
            playbackRateMenuButton: {},
            subtitlesButton: {},
            captionsButton: {},
            chaptersButton: {}
        }
    };
    t.tb.prototype.e = function() {
        return t.e("div", {
            className: "vjs-control-bar"
        });
    };
    t.hc = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.hc.prototype.e = function() {
        var a = t.a.prototype.e.call(this, "div", {
            className: "vjs-live-controls vjs-control"
        });
        this.B = t.e("div", {
            className: "vjs-live-display",
            innerHTML: '<span class="vjs-control-text">' + this.v("Stream Type") + "</span>" + this.v("LIVE"),
            "aria-live": "off"
        });
        a.appendChild(this.B);
        return a;
    };
    t.kc = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
            this.b(a, "play", this.Xb);
            this.b(a, "pause", this.Wb);
        }
    });
    s = t.kc.prototype;
    s.ta = "Play";
    s.T = function() {
        return "vjs-play-control " + t.w.prototype.T.call(this);
    };
    s.u = function() {
        this.d.paused() ? this.d.play() : this.d.pause();
    };
    s.Xb = function() {
        this.r("vjs-paused");
        this.p("vjs-playing");
        this.c.children[0].children[0].innerHTML = this.v("Pause");
    };
    s.Wb = function() {
        this.r("vjs-playing");
        this.p("vjs-paused");
        this.c.children[0].children[0].innerHTML = this.v("Play");
    };
    t.ub = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.b(a, "timeupdate", this.fa);
        }
    });
    t.ub.prototype.e = function() {
        var a = t.a.prototype.e.call(this, "div", {
            className: "vjs-current-time vjs-time-controls vjs-control"
        });
        this.B = t.e("div", {
            className: "vjs-current-time-display",
            innerHTML: '<span class="vjs-control-text">Current Time </span>0:00',
            "aria-live": "off"
        });
        a.appendChild(this.B);
        return a;
    };
    t.ub.prototype.fa = function() {
        var a = this.d.nb ? this.d.K.currentTime : this.d.currentTime();
        this.B.innerHTML = '<span class="vjs-control-text">' + this.v("Current Time") + "</span> " + t.Na(a, this.d.duration());
    };
    t.vb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.b(a, "timeupdate", this.fa);
            this.b(a, "loadedmetadata", this.fa);
        }
    });
    t.vb.prototype.e = function() {
        var a = t.a.prototype.e.call(this, "div", {
            className: "vjs-duration vjs-time-controls vjs-control"
        });
        this.B = t.e("div", {
            className: "vjs-duration-display",
            innerHTML: '<span class="vjs-control-text">' + this.v("Duration Time") + "</span> 0:00",
            "aria-live": "off"
        });
        a.appendChild(this.B);
        return a;
    };
    t.vb.prototype.fa = function() {
        var a = this.d.duration();
        a && (this.B.innerHTML = '<span class="vjs-control-text">' + this.v("Duration Time") + "</span> " + t.Na(a));
    };
    t.qc = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.qc.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-time-divider",
            innerHTML: "<div><span>/</span></div>"
        });
    };
    t.Cb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.b(a, "timeupdate", this.fa);
        }
    });
    t.Cb.prototype.e = function() {
        var a = t.a.prototype.e.call(this, "div", {
            className: "vjs-remaining-time vjs-time-controls vjs-control"
        });
        this.B = t.e("div", {
            className: "vjs-remaining-time-display",
            innerHTML: '<span class="vjs-control-text">' + this.v("Remaining Time") + "</span> -0:00",
            "aria-live": "off"
        });
        a.appendChild(this.B);
        return a;
    };
    t.Cb.prototype.fa = function() {
        this.d.duration() && (this.B.innerHTML = '<span class="vjs-control-text">' + this.v("Remaining Time") + "</span> -" + t.Na(this.d.remainingTime()));
    };
    t.Ya = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
        }
    });
    t.Ya.prototype.ta = "Fullscreen";
    t.Ya.prototype.T = function() {
        return "vjs-fullscreen-control " + t.w.prototype.T.call(this);
    };
    t.Ya.prototype.u = function() {
        this.d.isFullscreen() ? (this.d.exitFullscreen(), this.Ib.innerHTML = this.v("Fullscreen")) : (this.d.requestFullscreen(), 
        this.Ib.innerHTML = this.v("Non-Fullscreen"));
    };
    t.Bb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.Bb.prototype.q = {
        children: {
            seekBar: {}
        }
    };
    t.Bb.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-progress-control vjs-control"
        });
    };
    t.nc = t.S.extend({
        l: function(a, c) {
            t.S.call(this, a, c);
            this.b(a, "timeupdate", this.Ea);
            a.I(t.bind(this, this.Ea));
        }
    });
    s = t.nc.prototype;
    s.q = {
        children: {
            loadProgressBar: {},
            playProgressBar: {},
            seekHandle: {}
        },
        barName: "playProgressBar",
        handleName: "seekHandle"
    };
    s.Uc = "timeupdate";
    s.e = function() {
        return t.S.prototype.e.call(this, "div", {
            className: "vjs-progress-holder",
            "aria-label": "video progress bar"
        });
    };
    s.Ea = function() {
        var a = this.d.nb ? this.d.K.currentTime : this.d.currentTime();
        this.c.setAttribute("aria-valuenow", t.round(100 * this.Qb(), 2));
        this.c.setAttribute("aria-valuetext", t.Na(a, this.d.duration()));
    };
    s.Qb = function() {
        return this.d.currentTime() / this.d.duration();
    };
    s.lb = function(a) {
        t.S.prototype.lb.call(this, a);
        this.d.nb = f;
        this.d.p("vjs-scrubbing");
        this.$e = !this.d.paused();
        this.d.pause();
    };
    s.la = function(a) {
        a = ea(this, a) * this.d.duration();
        a == this.d.duration() && (a -= .1);
        this.d.currentTime(a);
    };
    s.Ba = function(a) {
        t.S.prototype.Ba.call(this, a);
        this.d.nb = l;
        this.d.r("vjs-scrubbing");
        this.$e && this.d.play();
    };
    s.gd = function() {
        this.d.currentTime(this.d.currentTime() + 5);
    };
    s.fd = function() {
        this.d.currentTime(this.d.currentTime() - 5);
    };
    t.yb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.b(a, "progress", this.update);
        }
    });
    t.yb.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-load-progress",
            innerHTML: '<span class="vjs-control-text"><span>' + this.v("Loaded") + "</span>: 0%</span>"
        });
    };
    t.yb.prototype.update = function() {
        var a, c, d, e, g = this.d.buffered();
        a = this.d.duration();
        var h, k = this.d;
        h = k.buffered();
        k = k.duration();
        h = h.end(h.length - 1);
        h > k && (h = k);
        k = this.c.children;
        this.c.style.width = 100 * (h / a || 0) + "%";
        for (a = 0; a < g.length; a++) c = g.start(a), d = g.end(a), (e = k[a]) || (e = this.c.appendChild(t.e())), 
        e.style.left = 100 * (c / h || 0) + "%", e.style.width = 100 * ((d - c) / h || 0) + "%";
        for (a = k.length; a > g.length; a--) this.c.removeChild(k[a - 1]);
    };
    t.jc = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.jc.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-play-progress",
            innerHTML: '<span class="vjs-control-text"><span>' + this.v("Progress") + "</span>: 0%</span>"
        });
    };
    t.Za = t.ga.extend({
        l: function(a, c) {
            t.ga.call(this, a, c);
            this.b(a, "timeupdate", this.fa);
        }
    });
    t.Za.prototype.defaultValue = "00:00";
    t.Za.prototype.e = function() {
        return t.ga.prototype.e.call(this, "div", {
            className: "vjs-seek-handle",
            "aria-live": "off"
        });
    };
    t.Za.prototype.fa = function() {
        var a = this.d.nb ? this.d.K.currentTime : this.d.currentTime();
        this.c.innerHTML = '<span class="vjs-control-text">' + t.Na(a, this.d.duration()) + "</span>";
    };
    t.Fb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            a.h && a.h.featuresVolumeControl === l && this.p("vjs-hidden");
            this.b(a, "loadstart", function() {
                a.h.featuresVolumeControl === l ? this.p("vjs-hidden") : this.r("vjs-hidden");
            });
        }
    });
    t.Fb.prototype.q = {
        children: {
            volumeBar: {}
        }
    };
    t.Fb.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-volume-control vjs-control"
        });
    };
    t.Eb = t.S.extend({
        l: function(a, c) {
            t.S.call(this, a, c);
            this.b(a, "volumechange", this.Ea);
            a.I(t.bind(this, this.Ea));
        }
    });
    s = t.Eb.prototype;
    s.Ea = function() {
        this.c.setAttribute("aria-valuenow", t.round(100 * this.d.volume(), 2));
        this.c.setAttribute("aria-valuetext", t.round(100 * this.d.volume(), 2) + "%");
    };
    s.q = {
        children: {
            volumeLevel: {},
            volumeHandle: {}
        },
        barName: "volumeLevel",
        handleName: "volumeHandle"
    };
    s.Uc = "volumechange";
    s.e = function() {
        return t.S.prototype.e.call(this, "div", {
            className: "vjs-volume-bar",
            "aria-label": "volume level"
        });
    };
    s.la = function(a) {
        this.d.muted() && this.d.muted(l);
        this.d.volume(ea(this, a));
    };
    s.Qb = function() {
        return this.d.muted() ? 0 : this.d.volume();
    };
    s.gd = function() {
        this.d.volume(this.d.volume() + .1);
    };
    s.fd = function() {
        this.d.volume(this.d.volume() - .1);
    };
    t.rc = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.rc.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-volume-level",
            innerHTML: '<span class="vjs-control-text"></span>'
        });
    };
    t.Gb = t.ga.extend();
    t.Gb.prototype.defaultValue = "00:00";
    t.Gb.prototype.e = function() {
        return t.ga.prototype.e.call(this, "div", {
            className: "vjs-volume-handle"
        });
    };
    t.ra = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
            this.b(a, "volumechange", this.update);
            a.h && a.h.featuresVolumeControl === l && this.p("vjs-hidden");
            this.b(a, "loadstart", function() {
                a.h.featuresVolumeControl === l ? this.p("vjs-hidden") : this.r("vjs-hidden");
            });
        }
    });
    t.ra.prototype.e = function() {
        return t.w.prototype.e.call(this, "div", {
            className: "vjs-mute-control vjs-control",
            innerHTML: '<div><span class="vjs-control-text">' + this.v("Mute") + "</span></div>"
        });
    };
    t.ra.prototype.u = function() {
        this.d.muted(this.d.muted() ? l : f);
    };
    t.ra.prototype.update = function() {
        var a = this.d.volume(), c = 3;
        0 === a || this.d.muted() ? c = 0 : .33 > a ? c = 1 : .67 > a && (c = 2);
        this.d.muted() ? this.c.children[0].children[0].innerHTML != this.v("Unmute") && (this.c.children[0].children[0].innerHTML = this.v("Unmute")) : this.c.children[0].children[0].innerHTML != this.v("Mute") && (this.c.children[0].children[0].innerHTML = this.v("Mute"));
        for (a = 0; 4 > a; a++) t.r(this.c, "vjs-vol-" + a);
        t.p(this.c, "vjs-vol-" + c);
    };
    t.Ha = t.O.extend({
        l: function(a, c) {
            t.O.call(this, a, c);
            this.b(a, "volumechange", this.af);
            a.h && a.h.featuresVolumeControl === l && this.p("vjs-hidden");
            this.b(a, "loadstart", function() {
                a.h.featuresVolumeControl === l ? this.p("vjs-hidden") : this.r("vjs-hidden");
            });
            this.p("vjs-menu-button");
        }
    });
    t.Ha.prototype.La = function() {
        var a = new t.qa(this.d, {
            zc: "div"
        }), c = new t.Eb(this.d, this.q.volumeBar);
        c.b("focus", function() {
            a.p("vjs-lock-showing");
        });
        c.b("blur", function() {
            G(a);
        });
        a.aa(c);
        return a;
    };
    t.Ha.prototype.u = function() {
        t.ra.prototype.u.call(this);
        t.O.prototype.u.call(this);
    };
    t.Ha.prototype.e = function() {
        return t.w.prototype.e.call(this, "div", {
            className: "vjs-volume-menu-button vjs-menu-button vjs-control",
            innerHTML: '<div><span class="vjs-control-text">' + this.v("Mute") + "</span></div>"
        });
    };
    t.Ha.prototype.af = t.ra.prototype.update;
    t.lc = t.O.extend({
        l: function(a, c) {
            t.O.call(this, a, c);
            this.pd();
            this.od();
            this.b(a, "loadstart", this.pd);
            this.b(a, "ratechange", this.od);
        }
    });
    s = t.lc.prototype;
    s.ta = "Playback Rate";
    s.className = "vjs-playback-rate";
    s.e = function() {
        var a = t.O.prototype.e.call(this);
        this.Oc = t.e("div", {
            className: "vjs-playback-rate-value",
            innerHTML: 1
        });
        a.appendChild(this.Oc);
        return a;
    };
    s.La = function() {
        var a = new t.qa(this.k()), c = this.k().options().playbackRates;
        if (c) for (var d = c.length - 1; 0 <= d; d--) a.aa(new t.Ab(this.k(), {
            rate: c[d] + "x"
        }));
        return a;
    };
    s.Ea = function() {
        this.m().setAttribute("aria-valuenow", this.k().playbackRate());
    };
    s.u = function() {
        for (var a = this.k().playbackRate(), c = this.k().options().playbackRates, d = c[0], e = 0; e < c.length; e++) if (c[e] > a) {
            d = c[e];
            break;
        }
        this.k().playbackRate(d);
    };
    function na(a) {
        return a.k().h && a.k().h.featuresPlaybackRate && a.k().options().playbackRates && 0 < a.k().options().playbackRates.length;
    }
    s.pd = function() {
        na(this) ? this.r("vjs-hidden") : this.p("vjs-hidden");
    };
    s.od = function() {
        na(this) && (this.Oc.innerHTML = this.k().playbackRate() + "x");
    };
    t.Ab = t.M.extend({
        zc: "button",
        l: function(a, c) {
            var d = this.label = c.rate, e = this.Wc = parseFloat(d, 10);
            c.label = d;
            c.selected = 1 === e;
            t.M.call(this, a, c);
            this.b(a, "ratechange", this.update);
        }
    });
    t.Ab.prototype.u = function() {
        t.M.prototype.u.call(this);
        this.k().playbackRate(this.Wc);
    };
    t.Ab.prototype.update = function() {
        this.selected(this.k().playbackRate() == this.Wc);
    };
    t.mc = t.w.extend({
        l: function(a, c) {
            t.w.call(this, a, c);
            this.update();
            a.b("posterchange", t.bind(this, this.update));
        }
    });
    s = t.mc.prototype;
    s.dispose = function() {
        this.k().n("posterchange", this.update);
        t.w.prototype.dispose.call(this);
    };
    s.e = function() {
        var a = t.e("div", {
            className: "vjs-poster",
            tabIndex: -1
        });
        t.td || (this.Mb = t.e("img"), a.appendChild(this.Mb));
        return a;
    };
    s.update = function() {
        var a = this.k().poster();
        this.na(a);
        a ? this.show() : this.W();
    };
    s.na = function(a) {
        var c;
        this.Mb ? this.Mb.src = a : (c = "", a && (c = 'url("' + a + '")'), this.c.style.backgroundImage = c);
    };
    s.u = function() {
        this.d.play();
    };
    t.ic = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
        }
    });
    t.ic.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-loading-spinner"
        });
    };
    t.rb = t.w.extend();
    t.rb.prototype.e = function() {
        return t.w.prototype.e.call(this, "div", {
            className: "vjs-big-play-button",
            innerHTML: '<span aria-hidden="true"></span>',
            "aria-label": "play video"
        });
    };
    t.rb.prototype.u = function() {
        this.d.play();
    };
    t.wb = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.update();
            this.b(a, "error", this.update);
        }
    });
    t.wb.prototype.e = function() {
        var a = t.a.prototype.e.call(this, "div", {
            className: "vjs-error-display"
        });
        this.B = t.e("div");
        a.appendChild(this.B);
        return a;
    };
    t.wb.prototype.update = function() {
        this.k().error() && (this.B.innerHTML = this.v(this.k().error().message));
    };
    var O;
    t.j = t.a.extend({
        l: function(a, c, d) {
            c = c || {};
            c.$c = l;
            t.a.call(this, a, c, d);
            this.featuresProgressEvents || this.ne();
            this.featuresTimeupdateEvents || this.oe();
            this.be();
            this.featuresNativeTextTracks || this.Sd();
            this.de();
        }
    });
    s = t.j.prototype;
    s.be = function() {
        var a, c;
        a = this.k();
        c = function() {
            a.controls() && !a.usingNativeControls() && this.Fd();
        };
        this.I(c);
        this.b(a, "controlsenabled", c);
        this.b(a, "controlsdisabled", this.De);
        this.I(function() {
            this.networkState && 0 < this.networkState() && this.k().o("loadstart");
        });
    };
    s.Fd = function() {
        var a;
        this.b("mousedown", this.u);
        this.b("touchstart", function() {
            a = this.d.userActive();
        });
        this.b("touchmove", function() {
            a && this.k().reportUserActivity();
        });
        this.b("touchend", function(a) {
            a.preventDefault();
        });
        da(this);
        this.b("tap", this.xe);
    };
    s.De = function() {
        this.n("tap");
        this.n("touchstart");
        this.n("touchmove");
        this.n("touchleave");
        this.n("touchcancel");
        this.n("touchend");
        this.n("click");
        this.n("mousedown");
    };
    s.u = function(a) {
        0 === a.button && this.k().controls() && (this.k().paused() ? this.k().play() : this.k().pause());
    };
    s.xe = function() {
        this.k().userActive(!this.k().userActive());
    };
    s.ne = function() {
        this.Qc = f;
        this.We();
    };
    s.me = function() {
        this.Qc = l;
        this.hd();
    };
    s.We = function() {
        this.Ce = this.setInterval(function() {
            var a = this.k().bufferedPercent();
            this.Jd != a && this.k().o("progress");
            this.Jd = a;
            1 === a && this.hd();
        }, 500);
    };
    s.hd = function() {
        this.clearInterval(this.Ce);
    };
    s.oe = function() {
        var a = this.d;
        this.Vb = f;
        this.b(a, "play", this.md);
        this.b(a, "pause", this.qb);
        this.N("timeupdate", function() {
            this.featuresTimeupdateEvents = f;
            this.Rc();
        });
    };
    s.Rc = function() {
        var a = this.d;
        this.Vb = l;
        this.qb();
        this.n(a, "play", this.md);
        this.n(a, "pause", this.qb);
    };
    s.md = function() {
        this.Bc && this.qb();
        this.Bc = this.setInterval(function() {
            this.k().o("timeupdate");
        }, 250);
    };
    s.qb = function() {
        this.clearInterval(this.Bc);
        this.k().o("timeupdate");
    };
    s.dispose = function() {
        this.Qc && this.me();
        this.Vb && this.Rc();
        t.a.prototype.dispose.call(this);
    };
    s.Zb = function() {
        this.Vb && this.k().o("timeupdate");
    };
    s.de = function() {
        function a() {
            var a = c.da("textTrackDisplay");
            a && a.C();
        }
        var c = this.d, d;
        if (d = this.textTracks()) d.addEventListener("removetrack", a), d.addEventListener("addtrack", a), 
        this.b("dispose", t.bind(this, function() {
            d.removeEventListener("removetrack", a);
            d.removeEventListener("addtrack", a);
        }));
    };
    s.Sd = function() {
        var a = this.d, c, d, e;
        window.WebVTT || (e = document.createElement("script"), e.src = a.options()["vtt.js"] || "../node_modules/vtt.js/dist/vtt.js", 
        a.m().appendChild(e), window.WebVTT = f);
        if (d = this.textTracks()) c = function() {
            var c, d, e;
            e = a.da("textTrackDisplay");
            e.C();
            for (c = 0; c < this.length; c++) d = this[c], d.removeEventListener("cuechange", t.bind(e, e.C)), 
            "showing" === d.mode && d.addEventListener("cuechange", t.bind(e, e.C));
        }, d.addEventListener("change", c), this.b("dispose", t.bind(this, function() {
            d.removeEventListener("change", c);
        }));
    };
    s.textTracks = function() {
        this.d.ld = this.d.ld || new t.F();
        return this.d.ld;
    };
    s.X = function() {
        this.d.Xc = this.d.Xc || new t.F();
        return this.d.Xc;
    };
    O = function(a, c, d, e, g) {
        var h = a.textTracks();
        g = g || {};
        g.kind = c;
        d && (g.label = d);
        e && (g.language = e);
        g.player = a.d;
        a = new t.t(g);
        P(h, a);
        return a;
    };
    t.j.prototype.addTextTrack = function(a, c, d) {
        if (!a) throw Error("TextTrack kind is required but was not provided");
        return O(this, a, c, d);
    };
    t.j.prototype.ha = function(a) {
        a = O(this, a.kind, a.label, a.language, a);
        P(this.X(), a);
        return {
            Y: a
        };
    };
    t.j.prototype.Da = function(a) {
        Q(this.textTracks(), a);
        Q(this.X(), a);
    };
    t.j.prototype.bd = m();
    t.j.prototype.featuresVolumeControl = f;
    t.j.prototype.featuresFullscreenResize = l;
    t.j.prototype.featuresPlaybackRate = l;
    t.j.prototype.featuresProgressEvents = l;
    t.j.prototype.featuresTimeupdateEvents = l;
    t.j.prototype.featuresNativeTextTracks = l;
    t.j.dc = function(a) {
        a.registerSourceHandler = function(c, d) {
            var e = a.cd;
            e || (e = a.cd = []);
            d === b && (d = e.length);
            e.splice(d, 0, c);
        };
        a.ob = function(c) {
            for (var d = a.cd || [], e, g = 0; g < d.length; g++) if (e = d[g].canHandleSource(c)) return d[g];
            return j;
        };
        a.wc = function(c) {
            var d = a.ob(c);
            return d ? d.canHandleSource(c) : "";
        };
        a.prototype.ma = function(c) {
            var d = a.ob(c);
            d || (a.nativeSourceHandler ? d = a.nativeSourceHandler : t.log.error("No source hander found for the current source."));
            this.ia();
            this.n("dispose", this.ia);
            this.fb = c;
            this.$b = d.handleSource(c, this);
            this.b("dispose", this.ia);
            return this;
        };
        a.prototype.ia = function() {
            this.$b && this.$b.dispose && this.$b.dispose();
        };
    };
    t.media = {};
    t.f = t.j.extend({
        l: function(a, c, d) {
            var e, g, h;
            if (c.nativeCaptions === l || c.nativeTextTracks === l) this.featuresNativeTextTracks = l;
            t.j.call(this, a, c, d);
            for (d = t.f.xb.length - 1; 0 <= d; d--) this.b(t.f.xb[d], this.Td);
            (c = c.source) && (this.c.currentSrc !== c.src || a.L && 3 === a.L.ce) && this.ma(c);
            if (this.c.hasChildNodes()) {
                d = this.c.childNodes;
                e = d.length;
                for (c = []; e--; ) g = d[e], h = g.nodeName.toLowerCase(), "track" === h && (this.featuresNativeTextTracks ? P(this.X(), g.track) : c.push(g));
                for (d = 0; d < c.length; d++) this.c.removeChild(c[d]);
            }
            if (t.Db && a.options().nativeControlsForTouch === f) {
                var k, q, r, u;
                k = this;
                q = this.k();
                c = q.controls();
                k.c.controls = !!c;
                r = function() {
                    k.c.controls = f;
                };
                u = function() {
                    k.c.controls = l;
                };
                q.b("controlsenabled", r);
                q.b("controlsdisabled", u);
                c = function() {
                    q.n("controlsenabled", r);
                    q.n("controlsdisabled", u);
                };
                k.b("dispose", c);
                q.b("usingcustomcontrols", c);
                q.usingNativeControls(f);
            }
            a.I(function() {
                this.src() && (this.L && this.q.autoplay && this.paused()) && (delete this.L.poster, 
                this.play());
            });
            this.Va();
        }
    });
    s = t.f.prototype;
    s.dispose = function() {
        t.f.Kb(this.c);
        t.j.prototype.dispose.call(this);
    };
    s.e = function() {
        var a = this.d, c, d, e, g = a.L;
        if (!g || this.movingMediaElementInDOM === l) {
            g ? (e = g.cloneNode(l), t.f.Kb(g), g = e, a.L = j) : (g = t.e("video"), e = videojs.Z.Aa({}, a.Te), 
            (!t.Db || a.options().nativeControlsForTouch !== f) && delete e.controls, t.ad(g, t.i.D(e, {
                id: a.id() + "_html5_api",
                "class": "vjs-tech"
            })));
            g.player = a;
            if (a.q.nd) for (e = 0; e < a.q.nd.length; e++) c = a.q.nd[e], d = document.createElement("track"), 
            d.Tb = c.Tb, d.label = c.label, d.ed = c.ed, d.src = c.src, "default" in c && d.setAttribute("default", "default"), 
            g.appendChild(d);
            t.Rb(g, a.m());
        }
        c = [ "autoplay", "preload", "loop", "muted" ];
        for (e = c.length - 1; 0 <= e; e--) {
            d = c[e];
            var h = {};
            "undefined" !== typeof a.q[d] && (h[d] = a.q[d]);
            t.ad(g, h);
        }
        return g;
    };
    s.Td = function(a) {
        "error" == a.type && this.error() ? this.k().error(this.error().code) : (a.bubbles = l, 
        this.k().o(a));
    };
    s.play = function() {
        this.c.play();
    };
    s.pause = function() {
        this.c.pause();
    };
    s.paused = function() {
        return this.c.paused;
    };
    s.currentTime = function() {
        return this.c.currentTime;
    };
    s.Zb = function(a) {
        try {
            this.c.currentTime = a;
        } catch (c) {
            t.log(c, "Video is not ready. (Video.js)");
        }
    };
    s.duration = function() {
        return this.c.duration || 0;
    };
    s.buffered = function() {
        return this.c.buffered;
    };
    s.volume = function() {
        return this.c.volume;
    };
    s.Oe = function(a) {
        this.c.volume = a;
    };
    s.muted = function() {
        return this.c.muted;
    };
    s.Ke = function(a) {
        this.c.muted = a;
    };
    s.width = function() {
        return this.c.offsetWidth;
    };
    s.height = function() {
        return this.c.offsetHeight;
    };
    s.Sa = function() {
        return "function" == typeof this.c.webkitEnterFullScreen && (/Android/.test(t.P) || !/Chrome|Mac OS X 10.5/.test(t.P)) ? f : l;
    };
    s.Ec = function() {
        var a = this.c;
        "webkitDisplayingFullscreen" in a && this.N("webkitbeginfullscreen", function() {
            this.d.isFullscreen(f);
            this.N("webkitendfullscreen", function() {
                this.d.isFullscreen(l);
                this.d.o("fullscreenchange");
            });
            this.d.o("fullscreenchange");
        });
        a.paused && a.networkState <= a.ef ? (this.c.play(), this.setTimeout(function() {
            a.pause();
            a.webkitEnterFullScreen();
        }, 0)) : a.webkitEnterFullScreen();
    };
    s.Ud = function() {
        this.c.webkitExitFullScreen();
    };
    function oa(a, c) {
        var d = /^blob\:/i;
        return c && a && d.test(a) ? c : a;
    }
    s.src = function(a) {
        var c = this.c.src;
        if (a === b) return oa(c, this.dd);
        this.na(a);
    };
    s.na = function(a) {
        this.c.src = a;
    };
    s.load = function() {
        this.c.load();
    };
    s.currentSrc = function() {
        var a = this.c.currentSrc;
        return !this.fb ? a : oa(a, this.fb.src);
    };
    s.poster = function() {
        return this.c.poster;
    };
    s.bd = function(a) {
        this.c.poster = a;
    };
    s.Ra = function() {
        return this.c.Ra;
    };
    s.Me = function(a) {
        this.c.Ra = a;
    };
    s.autoplay = function() {
        return this.c.autoplay;
    };
    s.He = function(a) {
        this.c.autoplay = a;
    };
    s.controls = function() {
        return this.c.controls;
    };
    s.loop = function() {
        return this.c.loop;
    };
    s.Je = function(a) {
        this.c.loop = a;
    };
    s.error = function() {
        return this.c.error;
    };
    s.seeking = function() {
        return this.c.seeking;
    };
    s.seekable = function() {
        return this.c.seekable;
    };
    s.ended = function() {
        return this.c.ended;
    };
    s.playbackRate = function() {
        return this.c.playbackRate;
    };
    s.Le = function(a) {
        this.c.playbackRate = a;
    };
    s.networkState = function() {
        return this.c.networkState;
    };
    s.readyState = function() {
        return this.c.readyState;
    };
    s.textTracks = function() {
        return !this.featuresNativeTextTracks ? t.j.prototype.textTracks.call(this) : this.c.textTracks;
    };
    s.addTextTrack = function(a, c, d) {
        return !this.featuresNativeTextTracks ? t.j.prototype.addTextTrack.call(this, a, c, d) : this.c.addTextTrack(a, c, d);
    };
    s.ha = function(a) {
        if (!this.featuresNativeTextTracks) return t.j.prototype.ha.call(this, a);
        var c = document.createElement("track");
        a = a || {};
        a.kind && (c.kind = a.kind);
        a.label && (c.label = a.label);
        if (a.language || a.srclang) c.srclang = a.language || a.srclang;
        a["default"] && (c["default"] = a["default"]);
        a.id && (c.id = a.id);
        a.src && (c.src = a.src);
        this.m().appendChild(c);
        P(this.X(), c.Y);
        return c;
    };
    s.Da = function(a) {
        if (!this.featuresNativeTextTracks) return t.j.prototype.Da.call(this, a);
        var c, d;
        Q(this.X(), a);
        c = this.m().querySelectorAll("track");
        for (d = 0; d < c.length; d++) if (c[d] === a || c[d].track === a) {
            c[d].parentNode.removeChild(c[d]);
            break;
        }
    };
    t.f.isSupported = function() {
        try {
            t.A.volume = .5;
        } catch (a) {
            return l;
        }
        return !!t.A.canPlayType;
    };
    t.j.dc(t.f);
    var pa = t.f.prototype.ma, qa = t.f.prototype.ia;
    t.f.prototype.ma = function(a) {
        var c = pa.call(this, a);
        this.dd = a.src;
        return c;
    };
    t.f.prototype.ia = function() {
        this.dd = b;
        return qa.call(this);
    };
    t.f.nativeSourceHandler = {};
    t.f.nativeSourceHandler.canHandleSource = function(a) {
        function c(a) {
            try {
                return t.A.canPlayType(a);
            } catch (c) {
                return "";
            }
        }
        return a.type ? c(a.type) : a.src ? (a = (a = a.src.match(/\.([^.\/\?]+)(\?[^\/]+)?$/i)) && a[1], 
        c("video/" + a)) : "";
    };
    t.f.nativeSourceHandler.handleSource = function(a, c) {
        c.na(a.src);
    };
    t.f.nativeSourceHandler.dispose = m();
    t.f.registerSourceHandler(t.f.nativeSourceHandler);
    t.f.Ld = function() {
        var a = t.A.volume;
        t.A.volume = a / 2 + .1;
        return a !== t.A.volume;
    };
    t.f.Kd = function() {
        var a = t.A.playbackRate;
        t.A.playbackRate = a / 2 + .1;
        return a !== t.A.playbackRate;
    };
    t.f.Re = function() {
        var a;
        (a = !!t.A.textTracks) && 0 < t.A.textTracks.length && (a = "number" !== typeof t.A.textTracks[0].mode);
        a && t.gc && (a = l);
        return a;
    };
    t.f.prototype.featuresVolumeControl = t.f.Ld();
    t.f.prototype.featuresPlaybackRate = t.f.Kd();
    t.f.prototype.movingMediaElementInDOM = !t.xd;
    t.f.prototype.featuresFullscreenResize = f;
    t.f.prototype.featuresProgressEvents = f;
    t.f.prototype.featuresNativeTextTracks = t.f.Re();
    var S, ra = /^application\/(?:x-|vnd\.apple\.)mpegurl/i, sa = /^video\/mp4/i;
    t.f.Tc = function() {
        4 <= t.ec && (S || (S = t.A.constructor.prototype.canPlayType), t.A.constructor.prototype.canPlayType = function(a) {
            return a && ra.test(a) ? "maybe" : S.call(this, a);
        });
        t.Bd && (S || (S = t.A.constructor.prototype.canPlayType), t.A.constructor.prototype.canPlayType = function(a) {
            return a && sa.test(a) ? "maybe" : S.call(this, a);
        });
    };
    t.f.Ye = function() {
        var a = t.A.constructor.prototype.canPlayType;
        t.A.constructor.prototype.canPlayType = S;
        S = j;
        return a;
    };
    t.f.Tc();
    t.f.xb = "loadstart suspend abort error emptied stalled loadedmetadata loadeddata canplay canplaythrough playing waiting seeking seeked ended durationchange timeupdate progress play pause ratechange volumechange".split(" ");
    t.f.Kb = function(a) {
        if (a) {
            a.player = j;
            for (a.parentNode && a.parentNode.removeChild(a); a.hasChildNodes(); ) a.removeChild(a.firstChild);
            a.removeAttribute("src");
            if ("function" === typeof a.load) try {
                a.load();
            } catch (c) {}
        }
    };
    t.g = t.j.extend({
        l: function(a, c, d) {
            t.j.call(this, a, c, d);
            var e = c.source;
            d = a.id() + "_flash_api";
            var g = a.q, g = t.i.D({
                readyFunction: "videojs.Flash.onReady",
                eventProxyFunction: "videojs.Flash.onEvent",
                errorEventProxyFunction: "videojs.Flash.onError",
                autoplay: g.autoplay,
                preload: g.Ra,
                loop: g.loop,
                muted: g.muted
            }, c.flashVars), h = t.i.D({
                wmode: "opaque",
                bgcolor: "#000000"
            }, c.params);
            d = t.i.D({
                id: d,
                name: d,
                "class": "vjs-tech"
            }, c.attributes);
            e && this.I(function() {
                this.ma(e);
            });
            t.Rb(this.c, c.parentEl);
            c.startTime && this.I(function() {
                this.load();
                this.play();
                this.currentTime(c.startTime);
            });
            t.gc && this.I(function() {
                this.b("mousemove", function() {
                    this.k().o({
                        type: "mousemove",
                        bubbles: l
                    });
                });
            });
            a.b("stageclick", a.reportUserActivity);
            this.c = t.g.Dc(c.swf, this.c, g, h, d);
        }
    });
    s = t.g.prototype;
    s.dispose = function() {
        t.j.prototype.dispose.call(this);
    };
    s.play = function() {
        this.ended() && this.setCurrentTime(0);
        this.c.vjs_play();
    };
    s.pause = function() {
        this.c.vjs_pause();
    };
    s.src = function(a) {
        return a === b ? this.currentSrc() : this.na(a);
    };
    s.na = function(a) {
        a = t.Xd(a);
        this.c.vjs_src(a);
        if (this.d.autoplay()) {
            var c = this;
            this.setTimeout(function() {
                c.play();
            }, 0);
        }
    };
    t.g.prototype.setCurrentTime = function(a) {
        this.ke = a;
        this.c.vjs_setProperty("currentTime", a);
        t.j.prototype.Zb.call(this);
    };
    t.g.prototype.currentTime = function() {
        return this.seeking() ? this.ke || 0 : this.c.vjs_getProperty("currentTime");
    };
    t.g.prototype.currentSrc = function() {
        return this.fb ? this.fb.src : this.c.vjs_getProperty("currentSrc");
    };
    t.g.prototype.load = function() {
        this.c.vjs_load();
    };
    t.g.prototype.poster = function() {
        this.c.vjs_getProperty("poster");
    };
    t.g.prototype.setPoster = m();
    s = t.g.prototype;
    s.seekable = function() {
        return 0 === this.duration() ? t.xa() : t.xa(0, this.duration());
    };
    s.buffered = function() {
        return !this.c.vjs_getProperty ? t.xa() : t.xa(0, this.c.vjs_getProperty("buffered"));
    };
    s.duration = function() {
        return !this.c.vjs_getProperty ? 0 : this.c.vjs_getProperty("duration");
    };
    s.Sa = p(l);
    s.Ec = p(l);
    function ta() {
        var a = T[U], c = a.charAt(0).toUpperCase() + a.slice(1);
        ua["set" + c] = function(c) {
            return this.c.vjs_setProperty(a, c);
        };
    }
    function va(a) {
        ua[a] = function() {
            return this.c.vjs_getProperty(a);
        };
    }
    var ua = t.g.prototype, T = "rtmpConnection rtmpStream preload defaultPlaybackRate playbackRate autoplay loop mediaGroup controller controls volume muted defaultMuted".split(" "), wa = "error networkState readyState seeking initialTime startOffsetTime paused played ended videoTracks audioTracks videoWidth videoHeight".split(" "), U;
    for (U = 0; U < T.length; U++) va(T[U]), ta();
    for (U = 0; U < wa.length; U++) va(wa[U]);
    t.g.isSupported = function() {
        return 10 <= t.g.version()[0];
    };
    t.j.dc(t.g);
    t.g.nativeSourceHandler = {};
    t.g.nativeSourceHandler.canHandleSource = function(a) {
        return !a.type ? "" : a.type.replace(/;.*/, "").toLowerCase() in t.g.Wd ? "maybe" : "";
    };
    t.g.nativeSourceHandler.handleSource = function(a, c) {
        c.na(a.src);
    };
    t.g.nativeSourceHandler.dispose = m();
    t.g.registerSourceHandler(t.g.nativeSourceHandler);
    t.g.Wd = {
        "video/flv": "FLV",
        "video/x-flv": "FLV",
        "video/mp4": "MP4",
        "video/m4v": "MP4"
    };
    t.g.onReady = function(a) {
        var c;
        if (c = (a = t.m(a)) && a.parentNode && a.parentNode.player) a.player = c, t.g.checkReady(c.h);
    };
    t.g.checkReady = function(a) {
        a.m() && (a.m().vjs_getProperty ? a.Va() : this.setTimeout(function() {
            t.g.checkReady(a);
        }, 50));
    };
    t.g.onEvent = function(a, c) {
        t.m(a).player.o(c);
    };
    t.g.onError = function(a, c) {
        var d = t.m(a).player, e = "FLASH: " + c;
        "srcnotfound" == c ? d.error({
            code: 4,
            message: e
        }) : d.error(e);
    };
    t.g.version = function() {
        var a = "0,0,0";
        try {
            a = new window.ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version").replace(/\D+/g, ",").match(/^,?(.+),?$/)[1];
        } catch (c) {
            try {
                navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin && (a = (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]).description.replace(/\D+/g, ",").match(/^,?(.+),?$/)[1]);
            } catch (d) {}
        }
        return a.split(",");
    };
    t.g.Dc = function(a, c, d, e, g) {
        a = t.g.$d(a, d, e, g);
        a = t.e("div", {
            innerHTML: a
        }).childNodes[0];
        d = c.parentNode;
        c.parentNode.replaceChild(a, c);
        a[t.expando] = c[t.expando];
        var h = d.childNodes[0];
        setTimeout(function() {
            h.style.display = "block";
        }, 1e3);
        return a;
    };
    t.g.$d = function(a, c, d, e) {
        var g = "", h = "", k = "";
        c && t.i.ca(c, function(a, c) {
            g += a + "=" + c + "&amp;";
        });
        d = t.i.D({
            movie: a,
            flashvars: g,
            allowScriptAccess: "always",
            allowNetworking: "all"
        }, d);
        t.i.ca(d, function(a, c) {
            h += '<param name="' + a + '" value="' + c + '" />';
        });
        e = t.i.D({
            data: a,
            width: "100%",
            height: "100%"
        }, e);
        t.i.ca(e, function(a, c) {
            k += a + '="' + c + '" ';
        });
        return '<object type="application/x-shockwave-flash" ' + k + ">" + h + "</object>";
    };
    t.g.Qe = {
        "rtmp/mp4": "MP4",
        "rtmp/flv": "FLV"
    };
    t.g.Df = function(a, c) {
        return a + "&" + c;
    };
    t.g.Pe = function(a) {
        var c = {
            yc: "",
            jd: ""
        };
        if (!a) return c;
        var d = a.indexOf("&"), e;
        -1 !== d ? e = d + 1 : (d = e = a.lastIndexOf("/") + 1, 0 === d && (d = e = a.length));
        c.yc = a.substring(0, d);
        c.jd = a.substring(e, a.length);
        return c;
    };
    t.g.ie = function(a) {
        return a in t.g.Qe;
    };
    t.g.Dd = /^rtmp[set]?:\/\//i;
    t.g.he = function(a) {
        return t.g.Dd.test(a);
    };
    t.g.Yb = {};
    t.g.Yb.canHandleSource = function(a) {
        return t.g.ie(a.type) || t.g.he(a.src) ? "maybe" : "";
    };
    t.g.Yb.handleSource = function(a, c) {
        var d = t.g.Pe(a.src);
        c.setRtmpConnection(d.yc);
        c.setRtmpStream(d.jd);
    };
    t.g.registerSourceHandler(t.g.Yb);
    t.Cd = t.a.extend({
        l: function(a, c, d) {
            t.a.call(this, a, c, d);
            if (!a.q.sources || 0 === a.q.sources.length) {
                c = 0;
                for (d = a.q.techOrder; c < d.length; c++) {
                    var e = t.va(d[c]), g = window.videojs[e];
                    if (g && g.isSupported()) {
                        ka(a, e);
                        break;
                    }
                }
            } else a.src(a.q.sources);
        }
    });
    t.oc = {
        disabled: "disabled",
        hidden: "hidden",
        showing: "showing"
    };
    t.Ed = {
        subtitles: "subtitles",
        captions: "captions",
        descriptions: "descriptions",
        chapters: "chapters",
        metadata: "metadata"
    };
    t.t = function(a) {
        var c, d, e, g, h, k, q, r, u, A, R;
        a = a || {};
        if (!a.player) throw Error("A player was not provided.");
        c = this;
        if (t.pa) for (R in c = document.createElement("custom"), t.t.prototype) c[R] = t.t.prototype[R];
        c.d = a.player;
        e = t.oc[a.mode] || "disabled";
        g = t.Ed[a.kind] || "subtitles";
        h = a.label || "";
        k = a.language || a.srclang || "";
        d = a.id || "vjs_text_track_" + t.s++;
        if ("metadata" === g || "chapters" === g) e = "hidden";
        c.V = [];
        c.Ia = [];
        q = new t.U(c.V);
        r = new t.U(c.Ia);
        A = l;
        u = t.bind(c, function() {
            this.activeCues;
            A && (this.trigger("cuechange"), A = l);
        });
        "disabled" !== e && c.d.b("timeupdate", u);
        Object.defineProperty(c, "kind", {
            get: function() {
                return g;
            },
            set: Function.prototype
        });
        Object.defineProperty(c, "label", {
            get: function() {
                return h;
            },
            set: Function.prototype
        });
        Object.defineProperty(c, "language", {
            get: function() {
                return k;
            },
            set: Function.prototype
        });
        Object.defineProperty(c, "id", {
            get: function() {
                return d;
            },
            set: Function.prototype
        });
        Object.defineProperty(c, "mode", {
            get: function() {
                return e;
            },
            set: function(a) {
                t.oc[a] && (e = a, "showing" === e && this.d.b("timeupdate", u), this.o("modechange"));
            }
        });
        Object.defineProperty(c, "cues", {
            get: function() {
                return !this.Ub ? j : q;
            },
            set: Function.prototype
        });
        Object.defineProperty(c, "activeCues", {
            get: function() {
                var a, c, d, e, g;
                if (!this.Ub) return j;
                if (0 === this.cues.length) return r;
                e = this.d.currentTime();
                a = 0;
                c = this.cues.length;
                for (d = []; a < c; a++) g = this.cues[a], g.startTime <= e && g.endTime >= e ? d.push(g) : g.startTime === g.endTime && (g.startTime <= e && g.startTime + .5 >= e) && d.push(g);
                A = l;
                if (d.length !== this.Ia.length) A = f; else for (a = 0; a < d.length; a++) -1 === xa.call(this.Ia, d[a]) && (A = f);
                this.Ia = d;
                r.pb(this.Ia);
                return r;
            },
            set: Function.prototype
        });
        a.src ? ya(a.src, c) : c.Ub = f;
        if (t.pa) return c;
    };
    t.t.prototype = t.i.create(t.z.prototype);
    t.t.prototype.constructor = t.t;
    t.t.prototype.ab = {
        cuechange: "cuechange"
    };
    t.t.prototype.sc = function(a) {
        var c = this.d.textTracks(), d = 0;
        if (c) for (;d < c.length; d++) c[d] !== this && c[d].Yc(a);
        this.V.push(a);
        this.cues.pb(this.V);
    };
    t.t.prototype.Yc = function(a) {
        for (var c = 0, d = this.V.length, e, g = l; c < d; c++) e = this.V[c], e === a && (this.V.splice(c, 1), 
        g = f);
        g && this.Ac.pb(this.V);
    };
    var ya, V, xa;
    ya = function(a, c) {
        t.bf(a, t.bind(this, function(a, e, g) {
            if (a) return t.log.error(a);
            c.Ub = f;
            V(g, c);
        }));
    };
    V = function(a, c) {
        if ("function" !== typeof window.WebVTT) window.setTimeout(function() {
            V(a, c);
        }, 25); else {
            var d = new window.WebVTT.Parser(window, window.vttjs, window.WebVTT.StringDecoder());
            d.oncue = function(a) {
                c.sc(a);
            };
            d.onparsingerror = function(a) {
                t.log.error(a);
            };
            d.parse(a);
            d.flush();
        }
    };
    xa = function(a, c) {
        var d;
        if (this == j) throw new TypeError('"this" is null or not defined');
        var e = Object(this), g = e.length >>> 0;
        if (0 === g) return -1;
        d = +c || 0;
        Infinity === Math.abs(d) && (d = 0);
        if (d >= g) return -1;
        for (d = Math.max(0 <= d ? d : g - Math.abs(d), 0); d < g; ) {
            if (d in e && e[d] === a) return d;
            d++;
        }
        return -1;
    };
    t.F = function(a) {
        var c = this, d, e = 0;
        if (t.pa) for (d in c = document.createElement("custom"), t.F.prototype) c[d] = t.F.prototype[d];
        a = a || [];
        c.Ua = [];
        for (Object.defineProperty(c, "length", {
            get: function() {
                return this.Ua.length;
            }
        }); e < a.length; e++) P(c, a[e]);
        if (t.pa) return c;
    };
    t.F.prototype = t.i.create(t.z.prototype);
    t.F.prototype.constructor = t.F;
    t.F.prototype.ab = {
        change: "change",
        addtrack: "addtrack",
        removetrack: "removetrack"
    };
    for (var za in t.F.prototype.ab) t.F.prototype["on" + za] = j;
    function P(a, c) {
        var d = a.Ua.length;
        "" + d in a || Object.defineProperty(a, d, {
            get: function() {
                return this.Ua[d];
            }
        });
        c.addEventListener("modechange", t.bind(a, function() {
            this.o("change");
        }));
        a.Ua.push(c);
        a.o({
            type: "addtrack",
            Y: c
        });
    }
    function Q(a, c) {
        for (var d = 0, e = a.length, g; d < e; d++) if (g = a[d], g === c) {
            a.Ua.splice(d, 1);
            break;
        }
        a.o({
            type: "removetrack",
            Y: c
        });
    }
    t.F.prototype.ae = function(a) {
        for (var c = 0, d = this.length, e = j, g; c < d; c++) if (g = this[c], g.id === a) {
            e = g;
            break;
        }
        return e;
    };
    t.U = function(a) {
        var c = this, d;
        if (t.pa) for (d in c = document.createElement("custom"), t.U.prototype) c[d] = t.U.prototype[d];
        t.U.prototype.pb.call(c, a);
        Object.defineProperty(c, "length", {
            get: n("le")
        });
        if (t.pa) return c;
    };
    t.U.prototype.pb = function(a) {
        var c = this.length || 0, d = 0, e = a.length;
        this.V = a;
        this.le = a.length;
        a = function(a) {
            "" + a in this || Object.defineProperty(this, "" + a, {
                get: function() {
                    return this.V[a];
                }
            });
        };
        if (c < e) for (d = c; d < e; d++) a.call(this, d);
    };
    t.U.prototype.Zd = function(a) {
        for (var c = 0, d = this.length, e = j, g; c < d; c++) if (g = this[c], g.id === a) {
            e = g;
            break;
        }
        return e;
    };
    t.sa = t.a.extend({
        l: function(a, c, d) {
            t.a.call(this, a, c, d);
            a.b("loadstart", t.bind(this, this.Ve));
            a.I(t.bind(this, function() {
                if (a.h && a.h.featuresNativeTextTracks) this.W(); else {
                    var c, d, h;
                    a.b("fullscreenchange", t.bind(this, this.C));
                    d = a.q.tracks || [];
                    for (c = 0; c < d.length; c++) h = d[c], this.d.ha(h);
                }
            }));
        }
    });
    t.sa.prototype.Ve = function() {
        this.d.h && this.d.h.featuresNativeTextTracks ? this.W() : this.show();
    };
    t.sa.prototype.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-text-track-display"
        });
    };
    t.sa.prototype.Md = function() {
        "function" === typeof window.WebVTT && window.WebVTT.processCues(window, [], this.c);
    };
    function W(a, c) {
        return "rgba(" + parseInt(a[1] + a[1], 16) + "," + parseInt(a[2] + a[2], 16) + "," + parseInt(a[3] + a[3], 16) + "," + c + ")";
    }
    var Aa = {
        tf: "monospace",
        zf: "sans-serif",
        Bf: "serif",
        uf: '"Andale Mono", "Lucida Console", monospace',
        vf: '"Courier New", monospace',
        xf: "sans-serif",
        yf: "serif",
        kf: '"Comic Sans MS", Impact, fantasy',
        Af: '"Monotype Corsiva", cursive',
        Cf: '"Andale Mono", "Lucida Console", monospace, sans-serif'
    };
    t.sa.prototype.C = function() {
        var a = this.d.textTracks(), c = 0, d;
        this.Md();
        if (a) for (;c < a.length; c++) d = a[c], "showing" === d.mode && this.Ze(d);
    };
    t.sa.prototype.Ze = function(a) {
        if ("function" === typeof window.WebVTT && a.activeCues) {
            for (var c = 0, d = this.d.textTrackSettings.Hc(), e, g = []; c < a.activeCues.length; c++) g.push(a.activeCues[c]);
            window.WebVTT.processCues(window, a.activeCues, this.c);
            for (c = g.length; c--; ) {
                a = g[c].lf;
                d.color && (a.firstChild.style.color = d.color);
                if (d.kd) try {
                    a.firstChild.style.color = W(d.color || "#fff", d.kd);
                } catch (h) {}
                d.backgroundColor && (a.firstChild.style.backgroundColor = d.backgroundColor);
                if (d.vc) try {
                    a.firstChild.style.backgroundColor = W(d.backgroundColor || "#000", d.vc);
                } catch (k) {}
                if (d.cc) if (d.rd) try {
                    a.style.backgroundColor = W(d.cc, d.rd);
                } catch (q) {} else a.style.backgroundColor = d.cc;
                d.Ma && ("dropshadow" === d.Ma ? a.firstChild.style.textShadow = "2px 2px 3px #222, 2px 2px 4px #222, 2px 2px 5px #222" : "raised" === d.Ma ? a.firstChild.style.textShadow = "1px 1px #222, 2px 2px #222, 3px 3px #222" : "depressed" === d.Ma ? a.firstChild.style.textShadow = "1px 1px #ccc, 0 1px #ccc, -1px -1px #222, 0 -1px #222" : "uniform" === d.Ma && (a.firstChild.style.textShadow = "0 0 4px #222, 0 0 4px #222, 0 0 4px #222, 0 0 4px #222"));
                d.Ob && 1 !== d.Ob && (e = window.wf(a.style.fontSize), a.style.fontSize = e * d.Ob + "px", 
                a.style.height = "auto", a.style.top = "auto", a.style.bottom = "2px");
                d.fontFamily && "default" !== d.fontFamily && ("small-caps" === d.fontFamily ? a.firstChild.style.fontVariant = "small-caps" : a.firstChild.style.fontFamily = Aa[d.fontFamily]);
            }
        }
    };
    t.$ = t.M.extend({
        l: function(a, c) {
            var d = this.Y = c.track, e = a.textTracks(), g, h;
            e && (g = t.bind(this, function() {
                var a = "showing" === this.Y.mode, c, d, g;
                if (this instanceof t.zb) {
                    a = f;
                    d = 0;
                    for (g = e.length; d < g; d++) if (c = e[d], c.kind === this.Y.kind && "showing" === c.mode) {
                        a = l;
                        break;
                    }
                }
                this.selected(a);
            }), e.addEventListener("change", g), a.b("dispose", function() {
                e.removeEventListener("change", g);
            }));
            c.label = d.label || d.language || "Unknown";
            c.selected = d["default"] || "showing" === d.mode;
            t.M.call(this, a, c);
            e && e.onchange === b && this.b([ "tap", "click" ], function() {
                if ("object" !== typeof window.vd) try {
                    h = new window.vd("change");
                } catch (a) {}
                h || (h = document.createEvent("Event"), h.initEvent("change", f, f));
                e.dispatchEvent(h);
            });
        }
    });
    t.$.prototype.u = function() {
        var a = this.Y.kind, c = this.d.textTracks(), d, e = 0;
        t.M.prototype.u.call(this);
        if (c) for (;e < c.length; e++) d = c[e], d.kind === a && (d.mode = d === this.Y ? "showing" : "disabled");
    };
    t.zb = t.$.extend({
        l: function(a, c) {
            c.track = {
                kind: c.kind,
                player: a,
                label: c.kind + " off",
                "default": l,
                mode: "disabled"
            };
            t.$.call(this, a, c);
            this.selected(f);
        }
    });
    t.sb = t.$.extend({
        l: function(a, c) {
            c.track = {
                kind: c.kind,
                player: a,
                label: c.kind + " settings",
                "default": l,
                mode: "disabled"
            };
            t.$.call(this, a, c);
            this.p("vjs-texttrack-settings");
        }
    });
    t.sb.prototype.u = function() {
        this.k().da("textTrackSettings").show();
    };
    t.Q = t.O.extend({
        l: function(a, c) {
            var d, e;
            t.O.call(this, a, c);
            d = this.d.textTracks();
            1 >= this.H.length && this.W();
            d && (e = t.bind(this, this.update), d.addEventListener("removetrack", e), d.addEventListener("addtrack", e), 
            this.d.b("dispose", function() {
                d.removeEventListener("removetrack", e);
                d.removeEventListener("addtrack", e);
            }));
        }
    });
    t.Q.prototype.Ka = function() {
        var a = [], c, d;
        this instanceof t.oa && (!this.k().h || !this.k().h.featuresNativeTextTracks) && a.push(new t.sb(this.d, {
            kind: this.ea
        }));
        a.push(new t.zb(this.d, {
            kind: this.ea
        }));
        d = this.d.textTracks();
        if (!d) return a;
        for (var e = 0; e < d.length; e++) c = d[e], c.kind === this.ea && a.push(new t.$(this.d, {
            track: c
        }));
        return a;
    };
    t.oa = t.Q.extend({
        l: function(a, c, d) {
            t.Q.call(this, a, c, d);
            this.c.setAttribute("aria-label", "Captions Menu");
        }
    });
    t.oa.prototype.ea = "captions";
    t.oa.prototype.ta = "Captions";
    t.oa.prototype.className = "vjs-captions-button";
    t.oa.prototype.update = function() {
        var a = 2;
        t.Q.prototype.update.call(this);
        this.k().h && this.k().h.featuresNativeTextTracks && (a = 1);
        this.H && this.H.length > a ? this.show() : this.W();
    };
    t.$a = t.Q.extend({
        l: function(a, c, d) {
            t.Q.call(this, a, c, d);
            this.c.setAttribute("aria-label", "Subtitles Menu");
        }
    });
    t.$a.prototype.ea = "subtitles";
    t.$a.prototype.ta = "Subtitles";
    t.$a.prototype.className = "vjs-subtitles-button";
    t.Wa = t.Q.extend({
        l: function(a, c, d) {
            t.Q.call(this, a, c, d);
            this.c.setAttribute("aria-label", "Chapters Menu");
        }
    });
    s = t.Wa.prototype;
    s.ea = "chapters";
    s.ta = "Chapters";
    s.className = "vjs-chapters-button";
    s.Ka = function() {
        var a = [], c, d;
        d = this.d.textTracks();
        if (!d) return a;
        for (var e = 0; e < d.length; e++) c = d[e], c.kind === this.ea && a.push(new t.$(this.d, {
            track: c
        }));
        return a;
    };
    s.La = function() {
        for (var a = this.d.textTracks() || [], c = 0, d = a.length, e, g, h = this.H = []; c < d; c++) if (e = a[c], 
        e.kind == this.ea) if (e.Ac) {
            g = e;
            break;
        } else e.mode = "hidden", window.setTimeout(t.bind(this, function() {
            this.La();
        }), 100);
        a = this.za;
        a === b && (a = new t.qa(this.d), a.wa().appendChild(t.e("li", {
            className: "vjs-menu-title",
            innerHTML: t.va(this.ea),
            Se: -1
        })));
        if (g) {
            e = g.cues;
            for (var k, c = 0, d = e.length; c < d; c++) k = e[c], k = new t.Xa(this.d, {
                track: g,
                cue: k
            }), h.push(k), a.aa(k);
            this.aa(a);
        }
        0 < this.H.length && this.show();
        return a;
    };
    t.Xa = t.M.extend({
        l: function(a, c) {
            var d = this.Y = c.track, e = this.cue = c.cue, g = a.currentTime();
            c.label = e.text;
            c.selected = e.startTime <= g && g < e.endTime;
            t.M.call(this, a, c);
            d.addEventListener("cuechange", t.bind(this, this.update));
        }
    });
    t.Xa.prototype.u = function() {
        t.M.prototype.u.call(this);
        this.d.currentTime(this.cue.startTime);
        this.update(this.cue.startTime);
    };
    t.Xa.prototype.update = function() {
        var a = this.cue, c = this.d.currentTime();
        this.selected(a.startTime <= c && c < a.endTime);
    };
    function X(a) {
        var c;
        a.Ge ? c = a.Ge[0] : a.options && (c = a.options[a.options.selectedIndex]);
        return c.value;
    }
    function Y(a, c) {
        var d, e;
        if (c) {
            for (d = 0; d < a.options.length && !(e = a.options[d], e.value === c); d++) ;
            a.selectedIndex = d;
        }
    }
    t.pc = t.a.extend({
        l: function(a, c) {
            t.a.call(this, a, c);
            this.W();
            t.b(this.m().querySelector(".vjs-done-button"), "click", t.bind(this, function() {
                this.Fe();
                this.W();
            }));
            t.b(this.m().querySelector(".vjs-default-button"), "click", t.bind(this, function() {
                this.m().querySelector(".vjs-fg-color > select").selectedIndex = 0;
                this.m().querySelector(".vjs-bg-color > select").selectedIndex = 0;
                this.m().querySelector(".window-color > select").selectedIndex = 0;
                this.m().querySelector(".vjs-text-opacity > select").selectedIndex = 0;
                this.m().querySelector(".vjs-bg-opacity > select").selectedIndex = 0;
                this.m().querySelector(".vjs-window-opacity > select").selectedIndex = 0;
                this.m().querySelector(".vjs-edge-style select").selectedIndex = 0;
                this.m().querySelector(".vjs-font-family select").selectedIndex = 0;
                this.m().querySelector(".vjs-font-percent select").selectedIndex = 2;
                this.C();
            }));
            t.b(this.m().querySelector(".vjs-fg-color > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-bg-color > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".window-color > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-text-opacity > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-bg-opacity > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-window-opacity > select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-font-percent select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-edge-style select"), "change", t.bind(this, this.C));
            t.b(this.m().querySelector(".vjs-font-family select"), "change", t.bind(this, this.C));
            a.options().persistTextTrackSettings && this.Ee();
        }
    });
    s = t.pc.prototype;
    s.e = function() {
        return t.a.prototype.e.call(this, "div", {
            className: "vjs-caption-settings vjs-modal-overlay",
            innerHTML: '<div class="vjs-tracksettings"><div class="vjs-tracksettings-colors"><div class="vjs-fg-color vjs-tracksetting"><label class="vjs-label">Foreground</label><select><option value="">---</option><option value="#FFF">White</option><option value="#000">Black</option><option value="#F00">Red</option><option value="#0F0">Green</option><option value="#00F">Blue</option><option value="#FF0">Yellow</option><option value="#F0F">Magenta</option><option value="#0FF">Cyan</option></select><span class="vjs-text-opacity vjs-opacity"><select><option value="">---</option><option value="1">Opaque</option><option value="0.5">Semi-Opaque</option></select></span></div><div class="vjs-bg-color vjs-tracksetting"><label class="vjs-label">Background</label><select><option value="">---</option><option value="#FFF">White</option><option value="#000">Black</option><option value="#F00">Red</option><option value="#0F0">Green</option><option value="#00F">Blue</option><option value="#FF0">Yellow</option><option value="#F0F">Magenta</option><option value="#0FF">Cyan</option></select><span class="vjs-bg-opacity vjs-opacity"><select><option value="">---</option><option value="1">Opaque</option><option value="0.5">Semi-Transparent</option><option value="0">Transparent</option></select></span></div><div class="window-color vjs-tracksetting"><label class="vjs-label">Window</label><select><option value="">---</option><option value="#FFF">White</option><option value="#000">Black</option><option value="#F00">Red</option><option value="#0F0">Green</option><option value="#00F">Blue</option><option value="#FF0">Yellow</option><option value="#F0F">Magenta</option><option value="#0FF">Cyan</option></select><span class="vjs-window-opacity vjs-opacity"><select><option value="">---</option><option value="1">Opaque</option><option value="0.5">Semi-Transparent</option><option value="0">Transparent</option></select></span></div></div><div class="vjs-tracksettings-font"><div class="vjs-font-percent vjs-tracksetting"><label class="vjs-label">Font Size</label><select><option value="0.50">50%</option><option value="0.75">75%</option><option value="1.00" selected>100%</option><option value="1.25">125%</option><option value="1.50">150%</option><option value="1.75">175%</option><option value="2.00">200%</option><option value="3.00">300%</option><option value="4.00">400%</option></select></div><div class="vjs-edge-style vjs-tracksetting"><label class="vjs-label">Text Edge Style</label><select><option value="none">None</option><option value="raised">Raised</option><option value="depressed">Depressed</option><option value="uniform">Uniform</option><option value="dropshadow">Dropshadow</option></select></div><div class="vjs-font-family vjs-tracksetting"><label class="vjs-label">Font Family</label><select><option value="">Default</option><option value="monospaceSerif">Monospace Serif</option><option value="proportionalSerif">Proportional Serif</option><option value="monospaceSansSerif">Monospace Sans-Serif</option><option value="proportionalSansSerif">Proportional Sans-Serif</option><option value="casual">Casual</option><option value="script">Script</option><option value="small-caps">Small Caps</option></select></div></div></div><div class="vjs-tracksettings-controls"><button class="vjs-default-button">Defaults</button><button class="vjs-done-button">Done</button></div>'
        });
    };
    s.Hc = function() {
        var a, c, d, e, g, h, k, q, r, u;
        a = this.m();
        g = X(a.querySelector(".vjs-edge-style select"));
        h = X(a.querySelector(".vjs-font-family select"));
        k = X(a.querySelector(".vjs-fg-color > select"));
        d = X(a.querySelector(".vjs-text-opacity > select"));
        q = X(a.querySelector(".vjs-bg-color > select"));
        c = X(a.querySelector(".vjs-bg-opacity > select"));
        r = X(a.querySelector(".window-color > select"));
        e = X(a.querySelector(".vjs-window-opacity > select"));
        a = window.parseFloat(X(a.querySelector(".vjs-font-percent > select")));
        c = {
            backgroundOpacity: c,
            textOpacity: d,
            windowOpacity: e,
            edgeStyle: g,
            fontFamily: h,
            color: k,
            backgroundColor: q,
            windowColor: r,
            fontPercent: a
        };
        for (u in c) ("" === c[u] || "none" === c[u] || "fontPercent" === u && 1 === c[u]) && delete c[u];
        return c;
    };
    s.Ne = function(a) {
        var c = this.m();
        Y(c.querySelector(".vjs-edge-style select"), a.Ma);
        Y(c.querySelector(".vjs-font-family select"), a.fontFamily);
        Y(c.querySelector(".vjs-fg-color > select"), a.color);
        Y(c.querySelector(".vjs-text-opacity > select"), a.kd);
        Y(c.querySelector(".vjs-bg-color > select"), a.backgroundColor);
        Y(c.querySelector(".vjs-bg-opacity > select"), a.vc);
        Y(c.querySelector(".window-color > select"), a.cc);
        Y(c.querySelector(".vjs-window-opacity > select"), a.rd);
        (a = a.Ob) && (a = a.toFixed(2));
        Y(c.querySelector(".vjs-font-percent > select"), a);
    };
    s.Ee = function() {
        var a;
        try {
            a = JSON.parse(window.localStorage.getItem("vjs-text-track-settings"));
        } catch (c) {}
        a && this.Ne(a);
    };
    s.Fe = function() {
        var a;
        if (this.d.options().persistTextTrackSettings) {
            a = this.Hc();
            try {
                t.hb(a) ? window.localStorage.removeItem("vjs-text-track-settings") : window.localStorage.setItem("vjs-text-track-settings", JSON.stringify(a));
            } catch (c) {}
        }
    };
    s.C = function() {
        var a = this.d.da("textTrackDisplay");
        a && a.C();
    };
    if ("undefined" !== typeof window.JSON && "function" === typeof window.JSON.parse) t.JSON = window.JSON; else {
        t.JSON = {};
        var Z = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        t.JSON.parse = function(a, c) {
            function d(a, e) {
                var k, q, r = a[e];
                if (r && "object" === typeof r) for (k in r) Object.prototype.hasOwnProperty.call(r, k) && (q = d(r, k), 
                q !== b ? r[k] = q : delete r[k]);
                return c.call(a, e, r);
            }
            var e;
            a = String(a);
            Z.lastIndex = 0;
            Z.test(a) && (a = a.replace(Z, function(a) {
                return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }));
            if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return e = eval("(" + a + ")"), 
            "function" === typeof c ? d({
                "": e
            }, "") : e;
            throw new SyntaxError("JSON.parse(): invalid or malformed JSON data");
        };
    }
    t.uc = function() {
        var a, c, d, e;
        a = document.getElementsByTagName("video");
        c = document.getElementsByTagName("audio");
        var g = [];
        if (a && 0 < a.length) {
            d = 0;
            for (e = a.length; d < e; d++) g.push(a[d]);
        }
        if (c && 0 < c.length) {
            d = 0;
            for (e = c.length; d < e; d++) g.push(c[d]);
        }
        if (g && 0 < g.length) {
            d = 0;
            for (e = g.length; d < e; d++) if ((c = g[d]) && c.getAttribute) c.player === b && (a = c.getAttribute("data-setup"), 
            a !== j && videojs(c)); else {
                t.Hb();
                break;
            }
        } else t.qd || t.Hb();
    };
    t.Hb = function() {
        setTimeout(t.uc, 1);
    };
    "complete" === document.readyState ? t.qd = f : t.N(window, "load", function() {
        t.qd = f;
    });
    t.Hb();
    t.Be = function(a, c) {
        t.Player.prototype[a] = c;
    };
    var Ba = this;
    function $(a, c) {
        var d = a.split("."), e = Ba;
        !(d[0] in e) && e.execScript && e.execScript("var " + d[0]);
        for (var g; d.length && (g = d.shift()); ) !d.length && c !== b ? e[g] = c : e = e[g] ? e[g] : e[g] = {};
    }
    $("videojs", t);
    $("_V_", t);
    $("videojs.options", t.options);
    $("videojs.players", t.Ca);
    $("videojs.TOUCH_ENABLED", t.Db);
    $("videojs.cache", t.ua);
    $("videojs.Component", t.a);
    t.a.prototype.player = t.a.prototype.k;
    t.a.prototype.options = t.a.prototype.options;
    t.a.prototype.init = t.a.prototype.l;
    t.a.prototype.dispose = t.a.prototype.dispose;
    t.a.prototype.createEl = t.a.prototype.e;
    t.a.prototype.contentEl = t.a.prototype.wa;
    t.a.prototype.el = t.a.prototype.m;
    t.a.prototype.addChild = t.a.prototype.aa;
    t.a.prototype.getChild = t.a.prototype.da;
    t.a.prototype.getChildById = t.a.prototype.Yd;
    t.a.prototype.children = t.a.prototype.children;
    t.a.prototype.initChildren = t.a.prototype.Kc;
    t.a.prototype.removeChild = t.a.prototype.removeChild;
    t.a.prototype.on = t.a.prototype.b;
    t.a.prototype.off = t.a.prototype.n;
    t.a.prototype.one = t.a.prototype.N;
    t.a.prototype.trigger = t.a.prototype.o;
    t.a.prototype.triggerReady = t.a.prototype.Va;
    t.a.prototype.show = t.a.prototype.show;
    t.a.prototype.hide = t.a.prototype.W;
    t.a.prototype.width = t.a.prototype.width;
    t.a.prototype.height = t.a.prototype.height;
    t.a.prototype.dimensions = t.a.prototype.Qd;
    t.a.prototype.ready = t.a.prototype.I;
    t.a.prototype.addClass = t.a.prototype.p;
    t.a.prototype.removeClass = t.a.prototype.r;
    t.a.prototype.hasClass = t.a.prototype.Pa;
    t.a.prototype.buildCSSClass = t.a.prototype.T;
    t.a.prototype.localize = t.a.prototype.v;
    t.a.prototype.setInterval = t.a.prototype.setInterval;
    t.a.prototype.setTimeout = t.a.prototype.setTimeout;
    $("videojs.EventEmitter", t.z);
    t.z.prototype.on = t.z.prototype.b;
    t.z.prototype.addEventListener = t.z.prototype.addEventListener;
    t.z.prototype.off = t.z.prototype.n;
    t.z.prototype.removeEventListener = t.z.prototype.removeEventListener;
    t.z.prototype.one = t.z.prototype.N;
    t.z.prototype.trigger = t.z.prototype.o;
    t.z.prototype.dispatchEvent = t.z.prototype.dispatchEvent;
    t.Player.prototype.ended = t.Player.prototype.ended;
    t.Player.prototype.enterFullWindow = t.Player.prototype.Fc;
    t.Player.prototype.exitFullWindow = t.Player.prototype.Lb;
    t.Player.prototype.preload = t.Player.prototype.Ra;
    t.Player.prototype.remainingTime = t.Player.prototype.remainingTime;
    t.Player.prototype.supportsFullScreen = t.Player.prototype.Sa;
    t.Player.prototype.currentType = t.Player.prototype.Nd;
    t.Player.prototype.requestFullScreen = t.Player.prototype.requestFullScreen;
    t.Player.prototype.requestFullscreen = t.Player.prototype.requestFullscreen;
    t.Player.prototype.cancelFullScreen = t.Player.prototype.cancelFullScreen;
    t.Player.prototype.exitFullscreen = t.Player.prototype.exitFullscreen;
    t.Player.prototype.isFullScreen = t.Player.prototype.isFullScreen;
    t.Player.prototype.isFullscreen = t.Player.prototype.isFullscreen;
    t.Player.prototype.textTracks = t.Player.prototype.textTracks;
    t.Player.prototype.remoteTextTracks = t.Player.prototype.X;
    t.Player.prototype.addTextTrack = t.Player.prototype.addTextTrack;
    t.Player.prototype.addRemoteTextTrack = t.Player.prototype.ha;
    t.Player.prototype.removeRemoteTextTrack = t.Player.prototype.Da;
    t.Player.prototype.seekable = t.Player.prototype.seekable;
    $("videojs.MediaLoader", t.Cd);
    $("videojs.TextTrackDisplay", t.sa);
    $("videojs.ControlBar", t.tb);
    $("videojs.Button", t.w);
    $("videojs.PlayToggle", t.kc);
    $("videojs.FullscreenToggle", t.Ya);
    $("videojs.BigPlayButton", t.rb);
    $("videojs.LoadingSpinner", t.ic);
    $("videojs.CurrentTimeDisplay", t.ub);
    $("videojs.DurationDisplay", t.vb);
    $("videojs.TimeDivider", t.qc);
    $("videojs.RemainingTimeDisplay", t.Cb);
    $("videojs.LiveDisplay", t.hc);
    $("videojs.ErrorDisplay", t.wb);
    $("videojs.Slider", t.S);
    $("videojs.ProgressControl", t.Bb);
    $("videojs.SeekBar", t.nc);
    $("videojs.LoadProgressBar", t.yb);
    $("videojs.PlayProgressBar", t.jc);
    $("videojs.SeekHandle", t.Za);
    $("videojs.VolumeControl", t.Fb);
    $("videojs.VolumeBar", t.Eb);
    $("videojs.VolumeLevel", t.rc);
    $("videojs.VolumeMenuButton", t.Ha);
    $("videojs.VolumeHandle", t.Gb);
    $("videojs.MuteToggle", t.ra);
    $("videojs.PosterImage", t.mc);
    $("videojs.Menu", t.qa);
    $("videojs.MenuItem", t.M);
    $("videojs.MenuButton", t.O);
    $("videojs.PlaybackRateMenuButton", t.lc);
    $("videojs.ChaptersTrackMenuItem", t.Xa);
    $("videojs.TextTrackButton", t.Q);
    $("videojs.TextTrackMenuItem", t.$);
    $("videojs.OffTextTrackMenuItem", t.zb);
    $("videojs.CaptionSettingsMenuItem", t.sb);
    t.O.prototype.createItems = t.O.prototype.Ka;
    t.Q.prototype.createItems = t.Q.prototype.Ka;
    t.Wa.prototype.createItems = t.Wa.prototype.Ka;
    $("videojs.SubtitlesButton", t.$a);
    $("videojs.CaptionsButton", t.oa);
    $("videojs.ChaptersButton", t.Wa);
    $("videojs.MediaTechController", t.j);
    t.j.withSourceHandlers = t.j.dc;
    t.j.prototype.featuresVolumeControl = t.j.prototype.qf;
    t.j.prototype.featuresFullscreenResize = t.j.prototype.mf;
    t.j.prototype.featuresPlaybackRate = t.j.prototype.nf;
    t.j.prototype.featuresProgressEvents = t.j.prototype.of;
    t.j.prototype.featuresTimeupdateEvents = t.j.prototype.pf;
    t.j.prototype.setPoster = t.j.prototype.bd;
    t.j.prototype.textTracks = t.j.prototype.textTracks;
    t.j.prototype.remoteTextTracks = t.j.prototype.X;
    t.j.prototype.addTextTrack = t.j.prototype.addTextTrack;
    t.j.prototype.addRemoteTextTrack = t.j.prototype.ha;
    t.j.prototype.removeRemoteTextTrack = t.j.prototype.Da;
    $("videojs.Html5", t.f);
    t.f.Events = t.f.xb;
    t.f.isSupported = t.f.isSupported;
    t.f.canPlaySource = t.f.wc;
    t.f.patchCanPlayType = t.f.Tc;
    t.f.unpatchCanPlayType = t.f.Ye;
    t.f.prototype.setCurrentTime = t.f.prototype.Zb;
    t.f.prototype.setVolume = t.f.prototype.Oe;
    t.f.prototype.setMuted = t.f.prototype.Ke;
    t.f.prototype.setPreload = t.f.prototype.Me;
    t.f.prototype.setAutoplay = t.f.prototype.He;
    t.f.prototype.setLoop = t.f.prototype.Je;
    t.f.prototype.enterFullScreen = t.f.prototype.Ec;
    t.f.prototype.exitFullScreen = t.f.prototype.Ud;
    t.f.prototype.playbackRate = t.f.prototype.playbackRate;
    t.f.prototype.setPlaybackRate = t.f.prototype.Le;
    t.f.selectSourceHandler = t.f.ob;
    t.f.prototype.setSource = t.f.prototype.ma;
    t.f.prototype.disposeSourceHandler = t.f.prototype.ia;
    t.f.prototype.textTracks = t.f.prototype.textTracks;
    t.f.prototype.remoteTextTracks = t.f.prototype.X;
    t.f.prototype.addTextTrack = t.f.prototype.addTextTrack;
    t.f.prototype.addRemoteTextTrack = t.f.prototype.ha;
    t.f.prototype.removeRemoteTextTrack = t.f.prototype.Da;
    $("videojs.Flash", t.g);
    t.g.isSupported = t.g.isSupported;
    t.g.canPlaySource = t.g.wc;
    t.g.onReady = t.g.onReady;
    t.g.embed = t.g.Dc;
    t.g.version = t.g.version;
    t.g.prototype.setSource = t.g.prototype.ma;
    t.g.selectSourceHandler = t.g.ob;
    t.g.prototype.setSource = t.g.prototype.ma;
    t.g.prototype.disposeSourceHandler = t.g.prototype.ia;
    $("videojs.TextTrack", t.t);
    $("videojs.TextTrackList", t.F);
    $("videojs.TextTrackCueList", t.U);
    $("videojs.TextTrackSettings", t.pc);
    t.t.prototype.id = t.t.prototype.id;
    t.t.prototype.label = t.t.prototype.label;
    t.t.prototype.kind = t.t.prototype.Tb;
    t.t.prototype.mode = t.t.prototype.mode;
    t.t.prototype.cues = t.t.prototype.Ac;
    t.t.prototype.activeCues = t.t.prototype.jf;
    t.t.prototype.addCue = t.t.prototype.sc;
    t.t.prototype.removeCue = t.t.prototype.Yc;
    t.F.prototype.getTrackById = t.F.prototype.ae;
    t.U.prototype.getCueById = t.F.prototype.Zd;
    $("videojs.CaptionsTrack", t.cf);
    $("videojs.SubtitlesTrack", t.hf);
    $("videojs.ChaptersTrack", t.df);
    $("videojs.autoSetup", t.uc);
    $("videojs.plugin", t.Be);
    $("videojs.createTimeRange", t.xa);
    $("videojs.util", t.Z);
    t.Z.mergeOptions = t.Z.Aa;
    t.addLanguage = t.Gd;
})();

!function(a) {
    var b = a.vttjs = {}, c = b.VTTCue, d = b.VTTRegion, e = a.VTTCue, f = a.VTTRegion;
    b.shim = function() {
        b.VTTCue = c, b.VTTRegion = d;
    }, b.restore = function() {
        b.VTTCue = e, b.VTTRegion = f;
    };
}(this), function(a, b) {
    function c(a) {
        if ("string" != typeof a) return !1;
        var b = h[a.toLowerCase()];
        return b ? a.toLowerCase() : !1;
    }
    function d(a) {
        if ("string" != typeof a) return !1;
        var b = i[a.toLowerCase()];
        return b ? a.toLowerCase() : !1;
    }
    function e(a) {
        for (var b = 1; b < arguments.length; b++) {
            var c = arguments[b];
            for (var d in c) a[d] = c[d];
        }
        return a;
    }
    function f(a, b, f) {
        var h = this, i = /MSIE\s8\.0/.test(navigator.userAgent), j = {};
        i ? h = document.createElement("custom") : j.enumerable = !0, h.hasBeenReset = !1;
        var k = "", l = !1, m = a, n = b, o = f, p = null, q = "", r = !0, s = "auto", t = "start", u = 50, v = "middle", w = 50, x = "middle";
        return Object.defineProperty(h, "id", e({}, j, {
            get: function() {
                return k;
            },
            set: function(a) {
                k = "" + a;
            }
        })), Object.defineProperty(h, "pauseOnExit", e({}, j, {
            get: function() {
                return l;
            },
            set: function(a) {
                l = !!a;
            }
        })), Object.defineProperty(h, "startTime", e({}, j, {
            get: function() {
                return m;
            },
            set: function(a) {
                if ("number" != typeof a) throw new TypeError("Start time must be set to a number.");
                m = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "endTime", e({}, j, {
            get: function() {
                return n;
            },
            set: function(a) {
                if ("number" != typeof a) throw new TypeError("End time must be set to a number.");
                n = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "text", e({}, j, {
            get: function() {
                return o;
            },
            set: function(a) {
                o = "" + a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "region", e({}, j, {
            get: function() {
                return p;
            },
            set: function(a) {
                p = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "vertical", e({}, j, {
            get: function() {
                return q;
            },
            set: function(a) {
                var b = c(a);
                if (b === !1) throw new SyntaxError("An invalid or illegal string was specified.");
                q = b, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "snapToLines", e({}, j, {
            get: function() {
                return r;
            },
            set: function(a) {
                r = !!a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "line", e({}, j, {
            get: function() {
                return s;
            },
            set: function(a) {
                if ("number" != typeof a && a !== g) throw new SyntaxError("An invalid number or illegal string was specified.");
                s = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "lineAlign", e({}, j, {
            get: function() {
                return t;
            },
            set: function(a) {
                var b = d(a);
                if (!b) throw new SyntaxError("An invalid or illegal string was specified.");
                t = b, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "position", e({}, j, {
            get: function() {
                return u;
            },
            set: function(a) {
                if (0 > a || a > 100) throw new Error("Position must be between 0 and 100.");
                u = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "positionAlign", e({}, j, {
            get: function() {
                return v;
            },
            set: function(a) {
                var b = d(a);
                if (!b) throw new SyntaxError("An invalid or illegal string was specified.");
                v = b, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "size", e({}, j, {
            get: function() {
                return w;
            },
            set: function(a) {
                if (0 > a || a > 100) throw new Error("Size must be between 0 and 100.");
                w = a, this.hasBeenReset = !0;
            }
        })), Object.defineProperty(h, "align", e({}, j, {
            get: function() {
                return x;
            },
            set: function(a) {
                var b = d(a);
                if (!b) throw new SyntaxError("An invalid or illegal string was specified.");
                x = b, this.hasBeenReset = !0;
            }
        })), h.displayState = void 0, i ? h : void 0;
    }
    var g = "auto", h = {
        "": !0,
        lr: !0,
        rl: !0
    }, i = {
        start: !0,
        middle: !0,
        end: !0,
        left: !0,
        right: !0
    };
    f.prototype.getCueAsHTML = function() {
        return WebVTT.convertCueToDOMTree(window, this.text);
    }, a.VTTCue = a.VTTCue || f, b.VTTCue = f;
}(this, this.vttjs || {}), function(a, b) {
    function c(a) {
        if ("string" != typeof a) return !1;
        var b = f[a.toLowerCase()];
        return b ? a.toLowerCase() : !1;
    }
    function d(a) {
        return "number" == typeof a && a >= 0 && 100 >= a;
    }
    function e() {
        var a = 100, b = 3, e = 0, f = 100, g = 0, h = 100, i = "";
        Object.defineProperties(this, {
            width: {
                enumerable: !0,
                get: function() {
                    return a;
                },
                set: function(b) {
                    if (!d(b)) throw new Error("Width must be between 0 and 100.");
                    a = b;
                }
            },
            lines: {
                enumerable: !0,
                get: function() {
                    return b;
                },
                set: function(a) {
                    if ("number" != typeof a) throw new TypeError("Lines must be set to a number.");
                    b = a;
                }
            },
            regionAnchorY: {
                enumerable: !0,
                get: function() {
                    return f;
                },
                set: function(a) {
                    if (!d(a)) throw new Error("RegionAnchorX must be between 0 and 100.");
                    f = a;
                }
            },
            regionAnchorX: {
                enumerable: !0,
                get: function() {
                    return e;
                },
                set: function(a) {
                    if (!d(a)) throw new Error("RegionAnchorY must be between 0 and 100.");
                    e = a;
                }
            },
            viewportAnchorY: {
                enumerable: !0,
                get: function() {
                    return h;
                },
                set: function(a) {
                    if (!d(a)) throw new Error("ViewportAnchorY must be between 0 and 100.");
                    h = a;
                }
            },
            viewportAnchorX: {
                enumerable: !0,
                get: function() {
                    return g;
                },
                set: function(a) {
                    if (!d(a)) throw new Error("ViewportAnchorX must be between 0 and 100.");
                    g = a;
                }
            },
            scroll: {
                enumerable: !0,
                get: function() {
                    return i;
                },
                set: function(a) {
                    var b = c(a);
                    if (b === !1) throw new SyntaxError("An invalid or illegal string was specified.");
                    i = b;
                }
            }
        });
    }
    var f = {
        "": !0,
        up: !0
    };
    a.VTTRegion = a.VTTRegion || e, b.VTTRegion = e;
}(this, this.vttjs || {}), function(a) {
    function b(a, b) {
        this.name = "ParsingError", this.code = a.code, this.message = b || a.message;
    }
    function c(a) {
        function b(a, b, c, d) {
            return 3600 * (0 | a) + 60 * (0 | b) + (0 | c) + (0 | d) / 1e3;
        }
        var c = a.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
        return c ? c[3] ? b(c[1], c[2], c[3].replace(":", ""), c[4]) : c[1] > 59 ? b(c[1], c[2], 0, c[4]) : b(0, c[1], c[2], c[4]) : null;
    }
    function d() {
        this.values = o(null);
    }
    function e(a, b, c, d) {
        var e = d ? a.split(d) : [ a ];
        for (var f in e) if ("string" == typeof e[f]) {
            var g = e[f].split(c);
            if (2 === g.length) {
                var h = g[0], i = g[1];
                b(h, i);
            }
        }
    }
    function f(a, f, g) {
        function h() {
            var d = c(a);
            if (null === d) throw new b(b.Errors.BadTimeStamp, "Malformed timestamp: " + k);
            return a = a.replace(/^[^\sa-zA-Z-]+/, ""), d;
        }
        function i(a, b) {
            var c = new d();
            e(a, function(a, b) {
                switch (a) {
                  case "region":
                    for (var d = g.length - 1; d >= 0; d--) if (g[d].id === b) {
                        c.set(a, g[d].region);
                        break;
                    }
                    break;

                  case "vertical":
                    c.alt(a, b, [ "rl", "lr" ]);
                    break;

                  case "line":
                    var e = b.split(","), f = e[0];
                    c.integer(a, f), c.percent(a, f) ? c.set("snapToLines", !1) : null, c.alt(a, f, [ "auto" ]), 
                    2 === e.length && c.alt("lineAlign", e[1], [ "start", "middle", "end" ]);
                    break;

                  case "position":
                    e = b.split(","), c.percent(a, e[0]), 2 === e.length && c.alt("positionAlign", e[1], [ "start", "middle", "end" ]);
                    break;

                  case "size":
                    c.percent(a, b);
                    break;

                  case "align":
                    c.alt(a, b, [ "start", "middle", "end", "left", "right" ]);
                }
            }, /:/, /\s/), b.region = c.get("region", null), b.vertical = c.get("vertical", ""), 
            b.line = c.get("line", "auto"), b.lineAlign = c.get("lineAlign", "start"), b.snapToLines = c.get("snapToLines", !0), 
            b.size = c.get("size", 100), b.align = c.get("align", "middle"), b.position = c.get("position", {
                start: 0,
                left: 0,
                middle: 50,
                end: 100,
                right: 100
            }, b.align), b.positionAlign = c.get("positionAlign", {
                start: "start",
                left: "start",
                middle: "middle",
                end: "end",
                right: "end"
            }, b.align);
        }
        function j() {
            a = a.replace(/^\s+/, "");
        }
        var k = a;
        if (j(), f.startTime = h(), j(), "-->" !== a.substr(0, 3)) throw new b(b.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '-->'): " + k);
        a = a.substr(3), j(), f.endTime = h(), j(), i(a, f);
    }
    function g(a, b) {
        function d() {
            function a(a) {
                return b = b.substr(a.length), a;
            }
            if (!b) return null;
            var c = b.match(/^([^<]*)(<[^>]+>?)?/);
            return a(c[1] ? c[1] : c[2]);
        }
        function e(a) {
            return p[a];
        }
        function f(a) {
            for (;o = a.match(/&(amp|lt|gt|lrm|rlm|nbsp);/); ) a = a.replace(o[0], e);
            return a;
        }
        function g(a, b) {
            return !s[b.localName] || s[b.localName] === a.localName;
        }
        function h(b, c) {
            var d = q[b];
            if (!d) return null;
            var e = a.document.createElement(d);
            e.localName = d;
            var f = r[b];
            return f && c && (e[f] = c.trim()), e;
        }
        for (var i, j = a.document.createElement("div"), k = j, l = []; null !== (i = d()); ) if ("<" !== i[0]) k.appendChild(a.document.createTextNode(f(i))); else {
            if ("/" === i[1]) {
                l.length && l[l.length - 1] === i.substr(2).replace(">", "") && (l.pop(), k = k.parentNode);
                continue;
            }
            var m, n = c(i.substr(1, i.length - 2));
            if (n) {
                m = a.document.createProcessingInstruction("timestamp", n), k.appendChild(m);
                continue;
            }
            var o = i.match(/^<([^.\s\/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
            if (!o) continue;
            if (m = h(o[1], o[3]), !m) continue;
            if (!g(k, m)) continue;
            o[2] && (m.className = o[2].substr(1).replace(".", " ")), l.push(o[1]), k.appendChild(m), 
            k = m;
        }
        return j;
    }
    function h(a) {
        function b(a, b) {
            for (var c = b.childNodes.length - 1; c >= 0; c--) a.push(b.childNodes[c]);
        }
        function c(a) {
            if (!a || !a.length) return null;
            var d = a.pop(), e = d.textContent || d.innerText;
            if (e) {
                var f = e.match(/^.*(\n|\r)/);
                return f ? (a.length = 0, f[0]) : e;
            }
            return "ruby" === d.tagName ? c(a) : d.childNodes ? (b(a, d), c(a)) : void 0;
        }
        var d, e = [], f = "";
        if (!a || !a.childNodes) return "ltr";
        for (b(e, a); f = c(e); ) for (var g = 0; g < f.length; g++) {
            d = f.charCodeAt(g);
            for (var h = 0; h < t.length; h++) if (t[h] === d) return "rtl";
        }
        return "ltr";
    }
    function i(a) {
        if ("number" == typeof a.line && (a.snapToLines || a.line >= 0 && a.line <= 100)) return a.line;
        if (!a.track || !a.track.textTrackList || !a.track.textTrackList.mediaElement) return -1;
        for (var b = a.track, c = b.textTrackList, d = 0, e = 0; e < c.length && c[e] !== b; e++) "showing" === c[e].mode && d++;
        return -1 * ++d;
    }
    function j() {}
    function k(a, b, c) {
        var d = /MSIE\s8\.0/.test(navigator.userAgent), e = "rgba(255, 255, 255, 1)", f = "rgba(0, 0, 0, 0.8)";
        d && (e = "rgb(255, 255, 255)", f = "rgb(0, 0, 0)"), j.call(this), this.cue = b, 
        this.cueDiv = g(a, b.text);
        var i = {
            color: e,
            backgroundColor: f,
            position: "relative",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            display: "inline"
        };
        d || (i.writingMode = "" === b.vertical ? "horizontal-tb" : "lr" === b.vertical ? "vertical-lr" : "vertical-rl", 
        i.unicodeBidi = "plaintext"), this.applyStyles(i, this.cueDiv), this.div = a.document.createElement("div"), 
        i = {
            textAlign: "middle" === b.align ? "center" : b.align,
            font: c.font,
            whiteSpace: "pre-line",
            position: "absolute"
        }, d || (i.direction = h(this.cueDiv), i.writingMode = "" === b.vertical ? "horizontal-tb" : "lr" === b.vertical ? "vertical-lr" : "vertical-rl".stylesunicodeBidi = "plaintext"), 
        this.applyStyles(i), this.div.appendChild(this.cueDiv);
        var k = 0;
        switch (b.positionAlign) {
          case "start":
            k = b.position;
            break;

          case "middle":
            k = b.position - b.size / 2;
            break;

          case "end":
            k = b.position - b.size;
        }
        this.applyStyles("" === b.vertical ? {
            left: this.formatStyle(k, "%"),
            width: this.formatStyle(b.size, "%")
        } : {
            top: this.formatStyle(k, "%"),
            height: this.formatStyle(b.size, "%")
        }), this.move = function(a) {
            this.applyStyles({
                top: this.formatStyle(a.top, "px"),
                bottom: this.formatStyle(a.bottom, "px"),
                left: this.formatStyle(a.left, "px"),
                right: this.formatStyle(a.right, "px"),
                height: this.formatStyle(a.height, "px"),
                width: this.formatStyle(a.width, "px")
            });
        };
    }
    function l(a) {
        var b, c, d, e, f = /MSIE\s8\.0/.test(navigator.userAgent);
        if (a.div) {
            c = a.div.offsetHeight, d = a.div.offsetWidth, e = a.div.offsetTop;
            var g = (g = a.div.childNodes) && (g = g[0]) && g.getClientRects && g.getClientRects();
            a = a.div.getBoundingClientRect(), b = g ? Math.max(g[0] && g[0].height || 0, a.height / g.length) : 0;
        }
        this.left = a.left, this.right = a.right, this.top = a.top || e, this.height = a.height || c, 
        this.bottom = a.bottom || e + (a.height || c), this.width = a.width || d, this.lineHeight = void 0 !== b ? b : a.lineHeight, 
        f && !this.lineHeight && (this.lineHeight = 13);
    }
    function m(a, b, c, d) {
        function e(a, b) {
            for (var e, f = new l(a), g = 1, h = 0; h < b.length; h++) {
                for (;a.overlapsOppositeAxis(c, b[h]) || a.within(c) && a.overlapsAny(d); ) a.move(b[h]);
                if (a.within(c)) return a;
                var i = a.intersectPercentage(c);
                g > i && (e = new l(a), g = i), a = new l(f);
            }
            return e || f;
        }
        var f = new l(b), g = b.cue, h = i(g), j = [];
        if (g.snapToLines) {
            var k;
            switch (g.vertical) {
              case "":
                j = [ "+y", "-y" ], k = "height";
                break;

              case "rl":
                j = [ "+x", "-x" ], k = "width";
                break;

              case "lr":
                j = [ "-x", "+x" ], k = "width";
            }
            var m = f.lineHeight, n = m * Math.round(h), o = c[k] + m, p = j[0];
            Math.abs(n) > o && (n = 0 > n ? -1 : 1, n *= Math.ceil(o / m) * m), 0 > h && (n += "" === g.vertical ? c.height : c.width, 
            j = j.reverse()), f.move(p, n);
        } else {
            var q = f.lineHeight / c.height * 100;
            switch (g.lineAlign) {
              case "middle":
                h -= q / 2;
                break;

              case "end":
                h -= q;
            }
            switch (g.vertical) {
              case "":
                b.applyStyles({
                    top: b.formatStyle(h, "%")
                });
                break;

              case "rl":
                b.applyStyles({
                    left: b.formatStyle(h, "%")
                });
                break;

              case "lr":
                b.applyStyles({
                    right: b.formatStyle(h, "%")
                });
            }
            j = [ "+y", "-x", "+x", "-y" ], f = new l(b);
        }
        var r = e(f, j);
        b.move(r.toCSSCompatValues(c));
    }
    function n() {}
    var o = Object.create || function() {
        function a() {}
        return function(b) {
            if (1 !== arguments.length) throw new Error("Object.create shim only accepts one parameter.");
            return a.prototype = b, new a();
        };
    }();
    b.prototype = o(Error.prototype), b.prototype.constructor = b, b.Errors = {
        BadSignature: {
            code: 0,
            message: "Malformed WebVTT signature."
        },
        BadTimeStamp: {
            code: 1,
            message: "Malformed time stamp."
        }
    }, d.prototype = {
        set: function(a, b) {
            this.get(a) || "" === b || (this.values[a] = b);
        },
        get: function(a, b, c) {
            return c ? this.has(a) ? this.values[a] : b[c] : this.has(a) ? this.values[a] : b;
        },
        has: function(a) {
            return a in this.values;
        },
        alt: function(a, b, c) {
            for (var d = 0; d < c.length; ++d) if (b === c[d]) {
                this.set(a, b);
                break;
            }
        },
        integer: function(a, b) {
            /^-?\d+$/.test(b) && this.set(a, parseInt(b, 10));
        },
        percent: function(a, b) {
            var c;
            return (c = b.match(/^([\d]{1,3})(\.[\d]*)?%$/)) && (b = parseFloat(b), b >= 0 && 100 >= b) ? (this.set(a, b), 
            !0) : !1;
        }
    };
    var p = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&lrm;": "‎",
        "&rlm;": "‏",
        "&nbsp;": " "
    }, q = {
        c: "span",
        i: "i",
        b: "b",
        u: "u",
        ruby: "ruby",
        rt: "rt",
        v: "span",
        lang: "span"
    }, r = {
        v: "title",
        lang: "lang"
    }, s = {
        rt: "ruby"
    }, t = [ 1470, 1472, 1475, 1478, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1520, 1521, 1522, 1523, 1524, 1544, 1547, 1549, 1563, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1645, 1646, 1647, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1765, 1766, 1774, 1775, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1807, 1808, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1969, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2e3, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2036, 2037, 2042, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2074, 2084, 2088, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2142, 2208, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 8207, 64285, 64287, 64288, 64289, 64290, 64291, 64292, 64293, 64294, 64295, 64296, 64298, 64299, 64300, 64301, 64302, 64303, 64304, 64305, 64306, 64307, 64308, 64309, 64310, 64312, 64313, 64314, 64315, 64316, 64318, 64320, 64321, 64323, 64324, 64326, 64327, 64328, 64329, 64330, 64331, 64332, 64333, 64334, 64335, 64336, 64337, 64338, 64339, 64340, 64341, 64342, 64343, 64344, 64345, 64346, 64347, 64348, 64349, 64350, 64351, 64352, 64353, 64354, 64355, 64356, 64357, 64358, 64359, 64360, 64361, 64362, 64363, 64364, 64365, 64366, 64367, 64368, 64369, 64370, 64371, 64372, 64373, 64374, 64375, 64376, 64377, 64378, 64379, 64380, 64381, 64382, 64383, 64384, 64385, 64386, 64387, 64388, 64389, 64390, 64391, 64392, 64393, 64394, 64395, 64396, 64397, 64398, 64399, 64400, 64401, 64402, 64403, 64404, 64405, 64406, 64407, 64408, 64409, 64410, 64411, 64412, 64413, 64414, 64415, 64416, 64417, 64418, 64419, 64420, 64421, 64422, 64423, 64424, 64425, 64426, 64427, 64428, 64429, 64430, 64431, 64432, 64433, 64434, 64435, 64436, 64437, 64438, 64439, 64440, 64441, 64442, 64443, 64444, 64445, 64446, 64447, 64448, 64449, 64467, 64468, 64469, 64470, 64471, 64472, 64473, 64474, 64475, 64476, 64477, 64478, 64479, 64480, 64481, 64482, 64483, 64484, 64485, 64486, 64487, 64488, 64489, 64490, 64491, 64492, 64493, 64494, 64495, 64496, 64497, 64498, 64499, 64500, 64501, 64502, 64503, 64504, 64505, 64506, 64507, 64508, 64509, 64510, 64511, 64512, 64513, 64514, 64515, 64516, 64517, 64518, 64519, 64520, 64521, 64522, 64523, 64524, 64525, 64526, 64527, 64528, 64529, 64530, 64531, 64532, 64533, 64534, 64535, 64536, 64537, 64538, 64539, 64540, 64541, 64542, 64543, 64544, 64545, 64546, 64547, 64548, 64549, 64550, 64551, 64552, 64553, 64554, 64555, 64556, 64557, 64558, 64559, 64560, 64561, 64562, 64563, 64564, 64565, 64566, 64567, 64568, 64569, 64570, 64571, 64572, 64573, 64574, 64575, 64576, 64577, 64578, 64579, 64580, 64581, 64582, 64583, 64584, 64585, 64586, 64587, 64588, 64589, 64590, 64591, 64592, 64593, 64594, 64595, 64596, 64597, 64598, 64599, 64600, 64601, 64602, 64603, 64604, 64605, 64606, 64607, 64608, 64609, 64610, 64611, 64612, 64613, 64614, 64615, 64616, 64617, 64618, 64619, 64620, 64621, 64622, 64623, 64624, 64625, 64626, 64627, 64628, 64629, 64630, 64631, 64632, 64633, 64634, 64635, 64636, 64637, 64638, 64639, 64640, 64641, 64642, 64643, 64644, 64645, 64646, 64647, 64648, 64649, 64650, 64651, 64652, 64653, 64654, 64655, 64656, 64657, 64658, 64659, 64660, 64661, 64662, 64663, 64664, 64665, 64666, 64667, 64668, 64669, 64670, 64671, 64672, 64673, 64674, 64675, 64676, 64677, 64678, 64679, 64680, 64681, 64682, 64683, 64684, 64685, 64686, 64687, 64688, 64689, 64690, 64691, 64692, 64693, 64694, 64695, 64696, 64697, 64698, 64699, 64700, 64701, 64702, 64703, 64704, 64705, 64706, 64707, 64708, 64709, 64710, 64711, 64712, 64713, 64714, 64715, 64716, 64717, 64718, 64719, 64720, 64721, 64722, 64723, 64724, 64725, 64726, 64727, 64728, 64729, 64730, 64731, 64732, 64733, 64734, 64735, 64736, 64737, 64738, 64739, 64740, 64741, 64742, 64743, 64744, 64745, 64746, 64747, 64748, 64749, 64750, 64751, 64752, 64753, 64754, 64755, 64756, 64757, 64758, 64759, 64760, 64761, 64762, 64763, 64764, 64765, 64766, 64767, 64768, 64769, 64770, 64771, 64772, 64773, 64774, 64775, 64776, 64777, 64778, 64779, 64780, 64781, 64782, 64783, 64784, 64785, 64786, 64787, 64788, 64789, 64790, 64791, 64792, 64793, 64794, 64795, 64796, 64797, 64798, 64799, 64800, 64801, 64802, 64803, 64804, 64805, 64806, 64807, 64808, 64809, 64810, 64811, 64812, 64813, 64814, 64815, 64816, 64817, 64818, 64819, 64820, 64821, 64822, 64823, 64824, 64825, 64826, 64827, 64828, 64829, 64848, 64849, 64850, 64851, 64852, 64853, 64854, 64855, 64856, 64857, 64858, 64859, 64860, 64861, 64862, 64863, 64864, 64865, 64866, 64867, 64868, 64869, 64870, 64871, 64872, 64873, 64874, 64875, 64876, 64877, 64878, 64879, 64880, 64881, 64882, 64883, 64884, 64885, 64886, 64887, 64888, 64889, 64890, 64891, 64892, 64893, 64894, 64895, 64896, 64897, 64898, 64899, 64900, 64901, 64902, 64903, 64904, 64905, 64906, 64907, 64908, 64909, 64910, 64911, 64914, 64915, 64916, 64917, 64918, 64919, 64920, 64921, 64922, 64923, 64924, 64925, 64926, 64927, 64928, 64929, 64930, 64931, 64932, 64933, 64934, 64935, 64936, 64937, 64938, 64939, 64940, 64941, 64942, 64943, 64944, 64945, 64946, 64947, 64948, 64949, 64950, 64951, 64952, 64953, 64954, 64955, 64956, 64957, 64958, 64959, 64960, 64961, 64962, 64963, 64964, 64965, 64966, 64967, 65008, 65009, 65010, 65011, 65012, 65013, 65014, 65015, 65016, 65017, 65018, 65019, 65020, 65136, 65137, 65138, 65139, 65140, 65142, 65143, 65144, 65145, 65146, 65147, 65148, 65149, 65150, 65151, 65152, 65153, 65154, 65155, 65156, 65157, 65158, 65159, 65160, 65161, 65162, 65163, 65164, 65165, 65166, 65167, 65168, 65169, 65170, 65171, 65172, 65173, 65174, 65175, 65176, 65177, 65178, 65179, 65180, 65181, 65182, 65183, 65184, 65185, 65186, 65187, 65188, 65189, 65190, 65191, 65192, 65193, 65194, 65195, 65196, 65197, 65198, 65199, 65200, 65201, 65202, 65203, 65204, 65205, 65206, 65207, 65208, 65209, 65210, 65211, 65212, 65213, 65214, 65215, 65216, 65217, 65218, 65219, 65220, 65221, 65222, 65223, 65224, 65225, 65226, 65227, 65228, 65229, 65230, 65231, 65232, 65233, 65234, 65235, 65236, 65237, 65238, 65239, 65240, 65241, 65242, 65243, 65244, 65245, 65246, 65247, 65248, 65249, 65250, 65251, 65252, 65253, 65254, 65255, 65256, 65257, 65258, 65259, 65260, 65261, 65262, 65263, 65264, 65265, 65266, 65267, 65268, 65269, 65270, 65271, 65272, 65273, 65274, 65275, 65276, 67584, 67585, 67586, 67587, 67588, 67589, 67592, 67594, 67595, 67596, 67597, 67598, 67599, 67600, 67601, 67602, 67603, 67604, 67605, 67606, 67607, 67608, 67609, 67610, 67611, 67612, 67613, 67614, 67615, 67616, 67617, 67618, 67619, 67620, 67621, 67622, 67623, 67624, 67625, 67626, 67627, 67628, 67629, 67630, 67631, 67632, 67633, 67634, 67635, 67636, 67637, 67639, 67640, 67644, 67647, 67648, 67649, 67650, 67651, 67652, 67653, 67654, 67655, 67656, 67657, 67658, 67659, 67660, 67661, 67662, 67663, 67664, 67665, 67666, 67667, 67668, 67669, 67671, 67672, 67673, 67674, 67675, 67676, 67677, 67678, 67679, 67840, 67841, 67842, 67843, 67844, 67845, 67846, 67847, 67848, 67849, 67850, 67851, 67852, 67853, 67854, 67855, 67856, 67857, 67858, 67859, 67860, 67861, 67862, 67863, 67864, 67865, 67866, 67867, 67872, 67873, 67874, 67875, 67876, 67877, 67878, 67879, 67880, 67881, 67882, 67883, 67884, 67885, 67886, 67887, 67888, 67889, 67890, 67891, 67892, 67893, 67894, 67895, 67896, 67897, 67903, 67968, 67969, 67970, 67971, 67972, 67973, 67974, 67975, 67976, 67977, 67978, 67979, 67980, 67981, 67982, 67983, 67984, 67985, 67986, 67987, 67988, 67989, 67990, 67991, 67992, 67993, 67994, 67995, 67996, 67997, 67998, 67999, 68e3, 68001, 68002, 68003, 68004, 68005, 68006, 68007, 68008, 68009, 68010, 68011, 68012, 68013, 68014, 68015, 68016, 68017, 68018, 68019, 68020, 68021, 68022, 68023, 68030, 68031, 68096, 68112, 68113, 68114, 68115, 68117, 68118, 68119, 68121, 68122, 68123, 68124, 68125, 68126, 68127, 68128, 68129, 68130, 68131, 68132, 68133, 68134, 68135, 68136, 68137, 68138, 68139, 68140, 68141, 68142, 68143, 68144, 68145, 68146, 68147, 68160, 68161, 68162, 68163, 68164, 68165, 68166, 68167, 68176, 68177, 68178, 68179, 68180, 68181, 68182, 68183, 68184, 68192, 68193, 68194, 68195, 68196, 68197, 68198, 68199, 68200, 68201, 68202, 68203, 68204, 68205, 68206, 68207, 68208, 68209, 68210, 68211, 68212, 68213, 68214, 68215, 68216, 68217, 68218, 68219, 68220, 68221, 68222, 68223, 68352, 68353, 68354, 68355, 68356, 68357, 68358, 68359, 68360, 68361, 68362, 68363, 68364, 68365, 68366, 68367, 68368, 68369, 68370, 68371, 68372, 68373, 68374, 68375, 68376, 68377, 68378, 68379, 68380, 68381, 68382, 68383, 68384, 68385, 68386, 68387, 68388, 68389, 68390, 68391, 68392, 68393, 68394, 68395, 68396, 68397, 68398, 68399, 68400, 68401, 68402, 68403, 68404, 68405, 68416, 68417, 68418, 68419, 68420, 68421, 68422, 68423, 68424, 68425, 68426, 68427, 68428, 68429, 68430, 68431, 68432, 68433, 68434, 68435, 68436, 68437, 68440, 68441, 68442, 68443, 68444, 68445, 68446, 68447, 68448, 68449, 68450, 68451, 68452, 68453, 68454, 68455, 68456, 68457, 68458, 68459, 68460, 68461, 68462, 68463, 68464, 68465, 68466, 68472, 68473, 68474, 68475, 68476, 68477, 68478, 68479, 68608, 68609, 68610, 68611, 68612, 68613, 68614, 68615, 68616, 68617, 68618, 68619, 68620, 68621, 68622, 68623, 68624, 68625, 68626, 68627, 68628, 68629, 68630, 68631, 68632, 68633, 68634, 68635, 68636, 68637, 68638, 68639, 68640, 68641, 68642, 68643, 68644, 68645, 68646, 68647, 68648, 68649, 68650, 68651, 68652, 68653, 68654, 68655, 68656, 68657, 68658, 68659, 68660, 68661, 68662, 68663, 68664, 68665, 68666, 68667, 68668, 68669, 68670, 68671, 68672, 68673, 68674, 68675, 68676, 68677, 68678, 68679, 68680, 126464, 126465, 126466, 126467, 126469, 126470, 126471, 126472, 126473, 126474, 126475, 126476, 126477, 126478, 126479, 126480, 126481, 126482, 126483, 126484, 126485, 126486, 126487, 126488, 126489, 126490, 126491, 126492, 126493, 126494, 126495, 126497, 126498, 126500, 126503, 126505, 126506, 126507, 126508, 126509, 126510, 126511, 126512, 126513, 126514, 126516, 126517, 126518, 126519, 126521, 126523, 126530, 126535, 126537, 126539, 126541, 126542, 126543, 126545, 126546, 126548, 126551, 126553, 126555, 126557, 126559, 126561, 126562, 126564, 126567, 126568, 126569, 126570, 126572, 126573, 126574, 126575, 126576, 126577, 126578, 126580, 126581, 126582, 126583, 126585, 126586, 126587, 126588, 126590, 126592, 126593, 126594, 126595, 126596, 126597, 126598, 126599, 126600, 126601, 126603, 126604, 126605, 126606, 126607, 126608, 126609, 126610, 126611, 126612, 126613, 126614, 126615, 126616, 126617, 126618, 126619, 126625, 126626, 126627, 126629, 126630, 126631, 126632, 126633, 126635, 126636, 126637, 126638, 126639, 126640, 126641, 126642, 126643, 126644, 126645, 126646, 126647, 126648, 126649, 126650, 126651, 1114109 ];
    j.prototype.applyStyles = function(a, b) {
        b = b || this.div;
        for (var c in a) a.hasOwnProperty(c) && (b.style[c] = a[c]);
    }, j.prototype.formatStyle = function(a, b) {
        return 0 === a ? 0 : a + b;
    }, k.prototype = o(j.prototype), k.prototype.constructor = k, l.prototype.move = function(a, b) {
        switch (b = void 0 !== b ? b : this.lineHeight, a) {
          case "+x":
            this.left += b, this.right += b;
            break;

          case "-x":
            this.left -= b, this.right -= b;
            break;

          case "+y":
            this.top += b, this.bottom += b;
            break;

          case "-y":
            this.top -= b, this.bottom -= b;
        }
    }, l.prototype.overlaps = function(a) {
        return this.left < a.right && this.right > a.left && this.top < a.bottom && this.bottom > a.top;
    }, l.prototype.overlapsAny = function(a) {
        for (var b = 0; b < a.length; b++) if (this.overlaps(a[b])) return !0;
        return !1;
    }, l.prototype.within = function(a) {
        return this.top >= a.top && this.bottom <= a.bottom && this.left >= a.left && this.right <= a.right;
    }, l.prototype.overlapsOppositeAxis = function(a, b) {
        switch (b) {
          case "+x":
            return this.left < a.left;

          case "-x":
            return this.right > a.right;

          case "+y":
            return this.top < a.top;

          case "-y":
            return this.bottom > a.bottom;
        }
    }, l.prototype.intersectPercentage = function(a) {
        var b = Math.max(0, Math.min(this.right, a.right) - Math.max(this.left, a.left)), c = Math.max(0, Math.min(this.bottom, a.bottom) - Math.max(this.top, a.top)), d = b * c;
        return d / (this.height * this.width);
    }, l.prototype.toCSSCompatValues = function(a) {
        return {
            top: this.top - a.top,
            bottom: a.bottom - this.bottom,
            left: this.left - a.left,
            right: a.right - this.right,
            height: this.height,
            width: this.width
        };
    }, l.getSimpleBoxPosition = function(a) {
        var b = a.div ? a.div.offsetHeight : a.tagName ? a.offsetHeight : 0, c = a.div ? a.div.offsetWidth : a.tagName ? a.offsetWidth : 0, d = a.div ? a.div.offsetTop : a.tagName ? a.offsetTop : 0;
        a = a.div ? a.div.getBoundingClientRect() : a.tagName ? a.getBoundingClientRect() : a;
        var e = {
            left: a.left,
            right: a.right,
            top: a.top || d,
            height: a.height || b,
            bottom: a.bottom || d + (a.height || b),
            width: a.width || c
        };
        return e;
    }, n.StringDecoder = function() {
        return {
            decode: function(a) {
                if (!a) return "";
                if ("string" != typeof a) throw new Error("Error - expected string data.");
                return decodeURIComponent(encodeURIComponent(a));
            }
        };
    }, n.convertCueToDOMTree = function(a, b) {
        return a && b ? g(a, b) : null;
    };
    var u = .05, v = "sans-serif", w = "1.5%";
    n.processCues = function(a, b, c) {
        function d(a) {
            for (var b = 0; b < a.length; b++) if (a[b].hasBeenReset || !a[b].displayState) return !0;
            return !1;
        }
        if (!a || !b || !c) return null;
        for (;c.firstChild; ) c.removeChild(c.firstChild);
        var e = a.document.createElement("div");
        if (e.style.position = "absolute", e.style.left = "0", e.style.right = "0", e.style.top = "0", 
        e.style.bottom = "0", e.style.margin = w, c.appendChild(e), d(b)) {
            var f = [], g = l.getSimpleBoxPosition(e), h = Math.round(g.height * u * 100) / 100, i = {
                font: h + "px " + v
            };
            !function() {
                for (var c, d, h = 0; h < b.length; h++) d = b[h], c = new k(a, d, i), e.appendChild(c.div), 
                m(a, c, g, f), d.displayState = c.div, f.push(l.getSimpleBoxPosition(c));
            }();
        } else for (var j = 0; j < b.length; j++) e.appendChild(b[j].displayState);
    }, n.Parser = function(a, b, c) {
        c || (c = b, b = {}), b || (b = {}), this.window = a, this.vttjs = b, this.state = "INITIAL", 
        this.buffer = "", this.decoder = c || new TextDecoder("utf8"), this.regionList = [];
    }, n.Parser.prototype = {
        reportOrThrowError: function(a) {
            if (!(a instanceof b)) throw a;
            this.onparsingerror && this.onparsingerror(a);
        },
        parse: function(a) {
            function c() {
                for (var a = i.buffer, b = 0; b < a.length && "\r" !== a[b] && "\n" !== a[b]; ) ++b;
                var c = a.substr(0, b);
                return "\r" === a[b] && ++b, "\n" === a[b] && ++b, i.buffer = a.substr(b), c;
            }
            function g(a) {
                var b = new d();
                if (e(a, function(a, c) {
                    switch (a) {
                      case "id":
                        b.set(a, c);
                        break;

                      case "width":
                        b.percent(a, c);
                        break;

                      case "lines":
                        b.integer(a, c);
                        break;

                      case "regionanchor":
                      case "viewportanchor":
                        var e = c.split(",");
                        if (2 !== e.length) break;
                        var f = new d();
                        if (f.percent("x", e[0]), f.percent("y", e[1]), !f.has("x") || !f.has("y")) break;
                        b.set(a + "X", f.get("x")), b.set(a + "Y", f.get("y"));
                        break;

                      case "scroll":
                        b.alt(a, c, [ "up" ]);
                    }
                }, /=/, /\s/), b.has("id")) {
                    var c = new (i.vttjs.VTTRegion || i.window.VTTRegion)();
                    c.width = b.get("width", 100), c.lines = b.get("lines", 3), c.regionAnchorX = b.get("regionanchorX", 0), 
                    c.regionAnchorY = b.get("regionanchorY", 100), c.viewportAnchorX = b.get("viewportanchorX", 0), 
                    c.viewportAnchorY = b.get("viewportanchorY", 100), c.scroll = b.get("scroll", ""), 
                    i.onregion && i.onregion(c), i.regionList.push({
                        id: b.get("id"),
                        region: c
                    });
                }
            }
            function h(a) {
                e(a, function(a, b) {
                    switch (a) {
                      case "Region":
                        g(b);
                    }
                }, /:/);
            }
            var i = this;
            a && (i.buffer += i.decoder.decode(a, {
                stream: !0
            }));
            try {
                var j;
                if ("INITIAL" === i.state) {
                    if (!/\r\n|\n/.test(i.buffer)) return this;
                    j = c();
                    var k = j.match(/^WEBVTT([ \t].*)?$/);
                    if (!k || !k[0]) throw new b(b.Errors.BadSignature);
                    i.state = "HEADER";
                }
                for (var l = !1; i.buffer; ) {
                    if (!/\r\n|\n/.test(i.buffer)) return this;
                    switch (l ? l = !1 : j = c(), i.state) {
                      case "HEADER":
                        /:/.test(j) ? h(j) : j || (i.state = "ID");
                        continue;

                      case "NOTE":
                        j || (i.state = "ID");
                        continue;

                      case "ID":
                        if (/^NOTE($|[ \t])/.test(j)) {
                            i.state = "NOTE";
                            break;
                        }
                        if (!j) continue;
                        if (i.cue = new (i.vttjs.VTTCue || i.window.VTTCue)(0, 0, ""), i.state = "CUE", 
                        -1 === j.indexOf("-->")) {
                            i.cue.id = j;
                            continue;
                        }

                      case "CUE":
                        try {
                            f(j, i.cue, i.regionList);
                        } catch (m) {
                            i.reportOrThrowError(m), i.cue = null, i.state = "BADCUE";
                            continue;
                        }
                        i.state = "CUETEXT";
                        continue;

                      case "CUETEXT":
                        var n = -1 !== j.indexOf("-->");
                        if (!j || n && (l = !0)) {
                            i.oncue && i.oncue(i.cue), i.cue = null, i.state = "ID";
                            continue;
                        }
                        i.cue.text && (i.cue.text += "\n"), i.cue.text += j;
                        continue;

                      case "BADCUE":
                        j || (i.state = "ID");
                        continue;
                    }
                }
            } catch (m) {
                i.reportOrThrowError(m), "CUETEXT" === i.state && i.cue && i.oncue && i.oncue(i.cue), 
                i.cue = null, i.state = "INITIAL" === i.state ? "BADWEBVTT" : "BADCUE";
            }
            return this;
        },
        flush: function() {
            var a = this;
            try {
                if (a.buffer += a.decoder.decode(), (a.cue || "HEADER" === a.state) && (a.buffer += "\n\n", 
                a.parse()), "INITIAL" === a.state) throw new b(b.Errors.BadSignature);
            } catch (c) {
                a.reportOrThrowError(c);
            }
            return a.onflush && a.onflush(), this;
        }
    }, a.WebVTT = n;
}(this, this.vttjs || {});

function Swipe(container, options) {
    "use strict";
    var noop = function() {};
    var offloadFn = function(fn) {
        setTimeout(fn || noop, 0);
    };
    var browser = {
        addEventListener: !!window.addEventListener,
        touch: "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch,
        transitions: function(temp) {
            var props = [ "transformProperty", "WebkitTransform", "MozTransform", "OTransform", "msTransform" ];
            for (var i in props) if (temp.style[props[i]] !== undefined) return true;
            return false;
        }(document.createElement("swipe"))
    };
    if (!container) return;
    var element = container.children[0];
    var slides, slidePos, width;
    options = options || {};
    var index = parseInt(options.startSlide, 10) || 0;
    var speed = options.speed || 300;
    function setup() {
        slides = element.children;
        slidePos = new Array(slides.length);
        width = container.getBoundingClientRect().width || container.offsetWidth;
        element.style.width = slides.length * width + "px";
        var pos = slides.length;
        while (pos--) {
            var slide = slides[pos];
            slide.style.width = width + "px";
            slide.setAttribute("data-index", pos);
            if (browser.transitions) {
                slide.style.left = pos * -width + "px";
                move(pos, index > pos ? -width : index < pos ? width : 0, 0);
            }
        }
        if (!browser.transitions) element.style.left = index * -width + "px";
        container.style.visibility = "visible";
    }
    function prev() {
        if (index) slide(index - 1); else if (options.continuous) slide(slides.length - 1);
    }
    function next() {
        if (index < slides.length - 1) slide(index + 1); else if (options.continuous) slide(0);
    }
    function slide(to, slideSpeed) {
        if (index == to) return;
        if (browser.transitions) {
            var diff = Math.abs(index - to) - 1;
            var direction = Math.abs(index - to) / (index - to);
            while (diff--) move((to > index ? to : index) - diff - 1, width * direction, 0);
            move(index, width * direction, slideSpeed || speed);
            move(to, 0, slideSpeed || speed);
        } else {
            animate(index * -width, to * -width, slideSpeed || speed);
        }
        index = to;
        offloadFn(options.callback && options.callback(index, slides[index]));
    }
    function move(index, dist, speed) {
        translate(index, dist, speed);
        slidePos[index] = dist;
    }
    function translate(index, dist, speed) {
        var slide = slides[index];
        var style = slide && slide.style;
        if (!style) return;
        style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = speed + "ms";
        style.webkitTransform = "translate(" + dist + "px,0)" + "translateZ(0)";
        style.msTransform = style.MozTransform = style.OTransform = "translateX(" + dist + "px)";
    }
    function animate(from, to, speed) {
        if (!speed) {
            element.style.left = to + "px";
            return;
        }
        var start = +new Date();
        var timer = setInterval(function() {
            var timeElap = +new Date() - start;
            if (timeElap > speed) {
                element.style.left = to + "px";
                if (delay) begin();
                options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);
                clearInterval(timer);
                return;
            }
            element.style.left = (to - from) * (Math.floor(timeElap / speed * 100) / 100) + from + "px";
        }, 4);
    }
    var delay = options.auto || 0;
    var interval;
    function begin() {
        interval = setTimeout(next, delay);
    }
    function stop() {
        delay = 0;
        clearTimeout(interval);
    }
    var start = {};
    var delta = {};
    var isScrolling;
    var events = {
        handleEvent: function(event) {
            switch (event.type) {
              case "touchstart":
                this.start(event);
                break;

              case "touchmove":
                this.move(event);
                break;

              case "touchend":
                offloadFn(this.end(event));
                break;

              case "webkitTransitionEnd":
              case "msTransitionEnd":
              case "oTransitionEnd":
              case "otransitionend":
              case "transitionend":
                offloadFn(this.transitionEnd(event));
                break;

              case "resize":
                offloadFn(setup.call());
                break;
            }
            if (options.stopPropagation) event.stopPropagation();
        },
        start: function(event) {
            var touches = event.touches[0];
            start = {
                x: touches.pageX,
                y: touches.pageY,
                time: +new Date()
            };
            isScrolling = undefined;
            delta = {};
            element.addEventListener("touchmove", this, false);
            element.addEventListener("touchend", this, false);
        },
        move: function(event) {
            if (event.touches.length > 1 || event.scale && event.scale !== 1) return;
            if (options.disableScroll) event.preventDefault();
            var touches = event.touches[0];
            delta = {
                x: touches.pageX - start.x,
                y: touches.pageY - start.y
            };
            if (typeof isScrolling == "undefined") {
                isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));
            }
            if (!isScrolling) {
                event.preventDefault();
                stop();
                delta.x = delta.x / (!index && delta.x > 0 || index == slides.length - 1 && delta.x < 0 ? Math.abs(delta.x) / width + 1 : 1);
                translate(index - 1, delta.x + slidePos[index - 1], 0);
                translate(index, delta.x + slidePos[index], 0);
                translate(index + 1, delta.x + slidePos[index + 1], 0);
            }
        },
        end: function(event) {
            var duration = +new Date() - start.time;
            var isValidSlide = Number(duration) < 250 && Math.abs(delta.x) > 20 || Math.abs(delta.x) > width / 2;
            var isPastBounds = !index && delta.x > 0 || index == slides.length - 1 && delta.x < 0;
            var direction = delta.x < 0;
            if (!isScrolling) {
                if (isValidSlide && !isPastBounds) {
                    if (direction) {
                        move(index - 1, -width, 0);
                        move(index, slidePos[index] - width, speed);
                        move(index + 1, slidePos[index + 1] - width, speed);
                        index += 1;
                    } else {
                        move(index + 1, width, 0);
                        move(index, slidePos[index] + width, speed);
                        move(index - 1, slidePos[index - 1] + width, speed);
                        index += -1;
                    }
                    options.callback && options.callback(index, slides[index]);
                } else {
                    move(index - 1, -width, speed);
                    move(index, 0, speed);
                    move(index + 1, width, speed);
                }
            }
            element.removeEventListener("touchmove", events, false);
            element.removeEventListener("touchend", events, false);
        },
        transitionEnd: function(event) {
            if (parseInt(event.target.getAttribute("data-index"), 10) == index) {
                if (delay) begin();
                options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);
            }
        }
    };
    setup();
    if (delay) begin();
    if (browser.addEventListener) {
        if (browser.touch) element.addEventListener("touchstart", events, false);
        if (browser.transitions) {
            element.addEventListener("webkitTransitionEnd", events, false);
            element.addEventListener("msTransitionEnd", events, false);
            element.addEventListener("oTransitionEnd", events, false);
            element.addEventListener("otransitionend", events, false);
            element.addEventListener("transitionend", events, false);
        }
        window.addEventListener("resize", events, false);
    } else {
        window.onresize = function() {
            setup();
        };
    }
    return {
        setup: function() {
            setup();
        },
        slide: function(to, speed) {
            slide(to, speed);
        },
        prev: function() {
            stop();
            prev();
        },
        next: function() {
            stop();
            next();
        },
        getPos: function() {
            return index;
        },
        kill: function() {
            stop();
            element.style.width = "auto";
            element.style.left = 0;
            var pos = slides.length;
            while (pos--) {
                var slide = slides[pos];
                slide.style.width = "100%";
                slide.style.left = 0;
                if (browser.transitions) translate(pos, 0, 0);
            }
            if (browser.addEventListener) {
                element.removeEventListener("touchstart", events, false);
                element.removeEventListener("webkitTransitionEnd", events, false);
                element.removeEventListener("msTransitionEnd", events, false);
                element.removeEventListener("oTransitionEnd", events, false);
                element.removeEventListener("otransitionend", events, false);
                element.removeEventListener("transitionend", events, false);
                window.removeEventListener("resize", events, false);
            } else {
                window.onresize = null;
            }
        }
    };
}

if (window.jQuery || window.Zepto) {
    (function($) {
        $.fn.Swipe = function(params) {
            return this.each(function() {
                $(this).data("Swipe", new Swipe($(this)[0], params));
            });
        };
    })(window.jQuery || window.Zepto);
}

(function($) {
    var o = $({});
    $.subscribe = function() {
        o.on.apply(o, arguments);
    };
    $.unsubscribe = function() {
        o.off.apply(o, arguments);
    };
    $.publish = function() {
        o.trigger.apply(o, arguments);
    };
})(jQuery);

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof exports === "object") {
        module.exports = factory;
    } else {
        factory(jQuery);
    }
})(function($) {
    var toFix = [ "wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll" ], toBind = "onwheel" in document || document.documentMode >= 9 ? [ "wheel" ] : [ "mousewheel", "DomMouseScroll", "MozMousePixelScroll" ], slice = Array.prototype.slice, nullLowestDeltaTimeout, lowestDelta;
    if ($.event.fixHooks) {
        for (var i = toFix.length; i; ) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }
    var special = $.event.special.mousewheel = {
        version: "3.1.12",
        setup: function() {
            if (this.addEventListener) {
                for (var i = toBind.length; i; ) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
            $.data(this, "mousewheel-line-height", special.getLineHeight(this));
            $.data(this, "mousewheel-page-height", special.getPageHeight(this));
        },
        teardown: function() {
            if (this.removeEventListener) {
                for (var i = toBind.length; i; ) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
            $.removeData(this, "mousewheel-line-height");
            $.removeData(this, "mousewheel-page-height");
        },
        getLineHeight: function(elem) {
            var $elem = $(elem), $parent = $elem["offsetParent" in $.fn ? "offsetParent" : "parent"]();
            if (!$parent.length) {
                $parent = $("body");
            }
            return parseInt($parent.css("fontSize"), 10) || parseInt($elem.css("fontSize"), 10) || 16;
        },
        getPageHeight: function(elem) {
            return $(elem).height();
        },
        settings: {
            adjustOldDeltas: true,
            normalizeOffset: true
        }
    };
    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },
        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });
    function handler(event) {
        var orgEvent = event || window.event, args = slice.call(arguments, 1), delta = 0, deltaX = 0, deltaY = 0, absDelta = 0, offsetX = 0, offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";
        if ("detail" in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ("wheelDelta" in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ("wheelDeltaY" in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ("wheelDeltaX" in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }
        if ("axis" in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }
        delta = deltaY === 0 ? deltaX : deltaY;
        if ("deltaY" in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ("deltaX" in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }
        if (deltaY === 0 && deltaX === 0) {
            return;
        }
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, "mousewheel-line-height");
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, "mousewheel-page-height");
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }
        delta = Math[delta >= 1 ? "floor" : "ceil"](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? "floor" : "ceil"](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? "floor" : "ceil"](deltaY / lowestDelta);
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        event.deltaMode = 0;
        args.unshift(event, delta, deltaX, deltaY);
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
    function nullLowestDelta() {
        lowestDelta = null;
    }
    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        return special.settings.adjustOldDeltas && orgEvent.type === "mousewheel" && absDelta % 120 === 0;
    }
});

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof exports === "object") {
        module.exports = factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    $.fn.jScrollPane = function(settings) {
        function JScrollPane(elem, s) {
            var settings, jsp = this, pane, paneWidth, paneHeight, container, contentWidth, contentHeight, percentInViewH, percentInViewV, isScrollableV, isScrollableH, verticalDrag, dragMaxY, verticalDragPosition, horizontalDrag, dragMaxX, horizontalDragPosition, verticalBar, verticalTrack, scrollbarWidth, verticalTrackHeight, verticalDragHeight, arrowUp, arrowDown, horizontalBar, horizontalTrack, horizontalTrackWidth, horizontalDragWidth, arrowLeft, arrowRight, reinitialiseInterval, originalPadding, originalPaddingTotalWidth, previousContentWidth, wasAtTop = true, wasAtLeft = true, wasAtBottom = false, wasAtRight = false, originalElement = elem.clone(false, false).empty(), mwEvent = $.fn.mwheelIntent ? "mwheelIntent.jsp" : "mousewheel.jsp";
            if (elem.css("box-sizing") === "border-box") {
                originalPadding = 0;
                originalPaddingTotalWidth = 0;
            } else {
                originalPadding = elem.css("paddingTop") + " " + elem.css("paddingRight") + " " + elem.css("paddingBottom") + " " + elem.css("paddingLeft");
                originalPaddingTotalWidth = (parseInt(elem.css("paddingLeft"), 10) || 0) + (parseInt(elem.css("paddingRight"), 10) || 0);
            }
            function initialise(s) {
                var isMaintainingPositon, lastContentX, lastContentY, hasContainingSpaceChanged, originalScrollTop, originalScrollLeft, maintainAtBottom = false, maintainAtRight = false;
                settings = s;
                if (pane === undefined) {
                    originalScrollTop = elem.scrollTop();
                    originalScrollLeft = elem.scrollLeft();
                    elem.css({
                        overflow: "hidden",
                        padding: 0
                    });
                    paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
                    paneHeight = elem.innerHeight();
                    elem.width(paneWidth);
                    pane = $('<div class="jspPane" />').css("padding", originalPadding).append(elem.children());
                    container = $('<div class="jspContainer" />').css({
                        width: paneWidth + "px",
                        height: paneHeight + "px"
                    }).append(pane).appendTo(elem);
                } else {
                    elem.css("width", "");
                    maintainAtBottom = settings.stickToBottom && isCloseToBottom();
                    maintainAtRight = settings.stickToRight && isCloseToRight();
                    hasContainingSpaceChanged = elem.innerWidth() + originalPaddingTotalWidth != paneWidth || elem.outerHeight() != paneHeight;
                    if (hasContainingSpaceChanged) {
                        paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
                        paneHeight = elem.innerHeight();
                        container.css({
                            width: paneWidth + "px",
                            height: paneHeight + "px"
                        });
                    }
                    if (!hasContainingSpaceChanged && previousContentWidth == contentWidth && pane.outerHeight() == contentHeight) {
                        elem.width(paneWidth);
                        return;
                    }
                    previousContentWidth = contentWidth;
                    pane.css("width", "");
                    elem.width(paneWidth);
                    container.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end();
                }
                pane.css("overflow", "auto");
                if (s.contentWidth) {
                    contentWidth = s.contentWidth;
                } else {
                    contentWidth = pane[0].scrollWidth;
                }
                contentHeight = pane[0].scrollHeight;
                pane.css("overflow", "");
                percentInViewH = contentWidth / paneWidth;
                percentInViewV = contentHeight / paneHeight;
                isScrollableV = percentInViewV > 1;
                isScrollableH = percentInViewH > 1;
                if (!(isScrollableH || isScrollableV)) {
                    elem.removeClass("jspScrollable");
                    pane.css({
                        top: 0,
                        left: 0,
                        width: container.width() - originalPaddingTotalWidth
                    });
                    removeMousewheel();
                    removeFocusHandler();
                    removeKeyboardNav();
                    removeClickOnTrack();
                } else {
                    elem.addClass("jspScrollable");
                    isMaintainingPositon = settings.maintainPosition && (verticalDragPosition || horizontalDragPosition);
                    if (isMaintainingPositon) {
                        lastContentX = contentPositionX();
                        lastContentY = contentPositionY();
                    }
                    initialiseVerticalScroll();
                    initialiseHorizontalScroll();
                    resizeScrollbars();
                    if (isMaintainingPositon) {
                        scrollToX(maintainAtRight ? contentWidth - paneWidth : lastContentX, false);
                        scrollToY(maintainAtBottom ? contentHeight - paneHeight : lastContentY, false);
                    }
                    initFocusHandler();
                    initMousewheel();
                    initTouch();
                    if (settings.enableKeyboardNavigation) {
                        initKeyboardNav();
                    }
                    if (settings.clickOnTrack) {
                        initClickOnTrack();
                    }
                    observeHash();
                    if (settings.hijackInternalLinks) {
                        hijackInternalLinks();
                    }
                }
                if (settings.autoReinitialise && !reinitialiseInterval) {
                    reinitialiseInterval = setInterval(function() {
                        initialise(settings);
                    }, settings.autoReinitialiseDelay);
                } else if (!settings.autoReinitialise && reinitialiseInterval) {
                    clearInterval(reinitialiseInterval);
                }
                originalScrollTop && elem.scrollTop(0) && scrollToY(originalScrollTop, false);
                originalScrollLeft && elem.scrollLeft(0) && scrollToX(originalScrollLeft, false);
                elem.trigger("jsp-initialised", [ isScrollableH || isScrollableV ]);
            }
            function initialiseVerticalScroll() {
                if (isScrollableV) {
                    container.append($('<div class="jspVerticalBar" />').append($('<div class="jspCap jspCapTop" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragTop" />'), $('<div class="jspDragBottom" />'))), $('<div class="jspCap jspCapBottom" />')));
                    verticalBar = container.find(">.jspVerticalBar");
                    verticalTrack = verticalBar.find(">.jspTrack");
                    verticalDrag = verticalTrack.find(">.jspDrag");
                    if (settings.showArrows) {
                        arrowUp = $('<a class="jspArrow jspArrowUp" />').bind("mousedown.jsp", getArrowScroll(0, -1)).bind("click.jsp", nil);
                        arrowDown = $('<a class="jspArrow jspArrowDown" />').bind("mousedown.jsp", getArrowScroll(0, 1)).bind("click.jsp", nil);
                        if (settings.arrowScrollOnHover) {
                            arrowUp.bind("mouseover.jsp", getArrowScroll(0, -1, arrowUp));
                            arrowDown.bind("mouseover.jsp", getArrowScroll(0, 1, arrowDown));
                        }
                        appendArrows(verticalTrack, settings.verticalArrowPositions, arrowUp, arrowDown);
                    }
                    verticalTrackHeight = paneHeight;
                    container.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function() {
                        verticalTrackHeight -= $(this).outerHeight();
                    });
                    verticalDrag.hover(function() {
                        verticalDrag.addClass("jspHover");
                    }, function() {
                        verticalDrag.removeClass("jspHover");
                    }).bind("mousedown.jsp", function(e) {
                        $("html").bind("dragstart.jsp selectstart.jsp", nil);
                        verticalDrag.addClass("jspActive");
                        var startY = e.pageY - verticalDrag.position().top;
                        $("html").bind("mousemove.jsp", function(e) {
                            positionDragY(e.pageY - startY, false);
                        }).bind("mouseup.jsp mouseleave.jsp", cancelDrag);
                        return false;
                    });
                    sizeVerticalScrollbar();
                }
            }
            function sizeVerticalScrollbar() {
                verticalTrack.height(verticalTrackHeight + "px");
                verticalDragPosition = 0;
                scrollbarWidth = settings.verticalGutter + verticalTrack.outerWidth();
                pane.width(paneWidth - scrollbarWidth - originalPaddingTotalWidth);
                try {
                    if (verticalBar.position().left === 0) {
                        pane.css("margin-left", scrollbarWidth + "px");
                    }
                } catch (err) {}
            }
            function initialiseHorizontalScroll() {
                if (isScrollableH) {
                    container.append($('<div class="jspHorizontalBar" />').append($('<div class="jspCap jspCapLeft" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragLeft" />'), $('<div class="jspDragRight" />'))), $('<div class="jspCap jspCapRight" />')));
                    horizontalBar = container.find(">.jspHorizontalBar");
                    horizontalTrack = horizontalBar.find(">.jspTrack");
                    horizontalDrag = horizontalTrack.find(">.jspDrag");
                    if (settings.showArrows) {
                        arrowLeft = $('<a class="jspArrow jspArrowLeft" />').bind("mousedown.jsp", getArrowScroll(-1, 0)).bind("click.jsp", nil);
                        arrowRight = $('<a class="jspArrow jspArrowRight" />').bind("mousedown.jsp", getArrowScroll(1, 0)).bind("click.jsp", nil);
                        if (settings.arrowScrollOnHover) {
                            arrowLeft.bind("mouseover.jsp", getArrowScroll(-1, 0, arrowLeft));
                            arrowRight.bind("mouseover.jsp", getArrowScroll(1, 0, arrowRight));
                        }
                        appendArrows(horizontalTrack, settings.horizontalArrowPositions, arrowLeft, arrowRight);
                    }
                    horizontalDrag.hover(function() {
                        horizontalDrag.addClass("jspHover");
                    }, function() {
                        horizontalDrag.removeClass("jspHover");
                    }).bind("mousedown.jsp", function(e) {
                        $("html").bind("dragstart.jsp selectstart.jsp", nil);
                        horizontalDrag.addClass("jspActive");
                        var startX = e.pageX - horizontalDrag.position().left;
                        $("html").bind("mousemove.jsp", function(e) {
                            positionDragX(e.pageX - startX, false);
                        }).bind("mouseup.jsp mouseleave.jsp", cancelDrag);
                        return false;
                    });
                    horizontalTrackWidth = container.innerWidth();
                    sizeHorizontalScrollbar();
                }
            }
            function sizeHorizontalScrollbar() {
                container.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function() {
                    horizontalTrackWidth -= $(this).outerWidth();
                });
                horizontalTrack.width(horizontalTrackWidth + "px");
                horizontalDragPosition = 0;
            }
            function resizeScrollbars() {
                if (isScrollableH && isScrollableV) {
                    var horizontalTrackHeight = horizontalTrack.outerHeight(), verticalTrackWidth = verticalTrack.outerWidth();
                    verticalTrackHeight -= horizontalTrackHeight;
                    $(horizontalBar).find(">.jspCap:visible,>.jspArrow").each(function() {
                        horizontalTrackWidth += $(this).outerWidth();
                    });
                    horizontalTrackWidth -= verticalTrackWidth;
                    paneHeight -= verticalTrackWidth;
                    paneWidth -= horizontalTrackHeight;
                    horizontalTrack.parent().append($('<div class="jspCorner" />').css("width", horizontalTrackHeight + "px"));
                    sizeVerticalScrollbar();
                    sizeHorizontalScrollbar();
                }
                if (isScrollableH) {
                    pane.width(container.outerWidth() - originalPaddingTotalWidth + "px");
                }
                contentHeight = pane.outerHeight();
                percentInViewV = contentHeight / paneHeight;
                if (isScrollableH) {
                    horizontalDragWidth = Math.ceil(1 / percentInViewH * horizontalTrackWidth);
                    if (horizontalDragWidth > settings.horizontalDragMaxWidth) {
                        horizontalDragWidth = settings.horizontalDragMaxWidth;
                    } else if (horizontalDragWidth < settings.horizontalDragMinWidth) {
                        horizontalDragWidth = settings.horizontalDragMinWidth;
                    }
                    horizontalDrag.width(horizontalDragWidth + "px");
                    dragMaxX = horizontalTrackWidth - horizontalDragWidth;
                    _positionDragX(horizontalDragPosition);
                }
                if (isScrollableV) {
                    verticalDragHeight = Math.ceil(1 / percentInViewV * verticalTrackHeight);
                    if (verticalDragHeight > settings.verticalDragMaxHeight) {
                        verticalDragHeight = settings.verticalDragMaxHeight;
                    } else if (verticalDragHeight < settings.verticalDragMinHeight) {
                        verticalDragHeight = settings.verticalDragMinHeight;
                    }
                    verticalDrag.height(verticalDragHeight + "px");
                    dragMaxY = verticalTrackHeight - verticalDragHeight;
                    _positionDragY(verticalDragPosition);
                }
            }
            function appendArrows(ele, p, a1, a2) {
                var p1 = "before", p2 = "after", aTemp;
                if (p == "os") {
                    p = /Mac/.test(navigator.platform) ? "after" : "split";
                }
                if (p == p1) {
                    p2 = p;
                } else if (p == p2) {
                    p1 = p;
                    aTemp = a1;
                    a1 = a2;
                    a2 = aTemp;
                }
                ele[p1](a1)[p2](a2);
            }
            function getArrowScroll(dirX, dirY, ele) {
                return function() {
                    arrowScroll(dirX, dirY, this, ele);
                    this.blur();
                    return false;
                };
            }
            function arrowScroll(dirX, dirY, arrow, ele) {
                arrow = $(arrow).addClass("jspActive");
                var eve, scrollTimeout, isFirst = true, doScroll = function() {
                    if (dirX !== 0) {
                        jsp.scrollByX(dirX * settings.arrowButtonSpeed);
                    }
                    if (dirY !== 0) {
                        jsp.scrollByY(dirY * settings.arrowButtonSpeed);
                    }
                    scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.arrowRepeatFreq);
                    isFirst = false;
                };
                doScroll();
                eve = ele ? "mouseout.jsp" : "mouseup.jsp";
                ele = ele || $("html");
                ele.bind(eve, function() {
                    arrow.removeClass("jspActive");
                    scrollTimeout && clearTimeout(scrollTimeout);
                    scrollTimeout = null;
                    ele.unbind(eve);
                });
            }
            function initClickOnTrack() {
                removeClickOnTrack();
                if (isScrollableV) {
                    verticalTrack.bind("mousedown.jsp", function(e) {
                        if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
                            var clickedTrack = $(this), offset = clickedTrack.offset(), direction = e.pageY - offset.top - verticalDragPosition, scrollTimeout, isFirst = true, doScroll = function() {
                                var offset = clickedTrack.offset(), pos = e.pageY - offset.top - verticalDragHeight / 2, contentDragY = paneHeight * settings.scrollPagePercent, dragY = dragMaxY * contentDragY / (contentHeight - paneHeight);
                                if (direction < 0) {
                                    if (verticalDragPosition - dragY > pos) {
                                        jsp.scrollByY(-contentDragY);
                                    } else {
                                        positionDragY(pos);
                                    }
                                } else if (direction > 0) {
                                    if (verticalDragPosition + dragY < pos) {
                                        jsp.scrollByY(contentDragY);
                                    } else {
                                        positionDragY(pos);
                                    }
                                } else {
                                    cancelClick();
                                    return;
                                }
                                scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
                                isFirst = false;
                            }, cancelClick = function() {
                                scrollTimeout && clearTimeout(scrollTimeout);
                                scrollTimeout = null;
                                $(document).unbind("mouseup.jsp", cancelClick);
                            };
                            doScroll();
                            $(document).bind("mouseup.jsp", cancelClick);
                            return false;
                        }
                    });
                }
                if (isScrollableH) {
                    horizontalTrack.bind("mousedown.jsp", function(e) {
                        if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
                            var clickedTrack = $(this), offset = clickedTrack.offset(), direction = e.pageX - offset.left - horizontalDragPosition, scrollTimeout, isFirst = true, doScroll = function() {
                                var offset = clickedTrack.offset(), pos = e.pageX - offset.left - horizontalDragWidth / 2, contentDragX = paneWidth * settings.scrollPagePercent, dragX = dragMaxX * contentDragX / (contentWidth - paneWidth);
                                if (direction < 0) {
                                    if (horizontalDragPosition - dragX > pos) {
                                        jsp.scrollByX(-contentDragX);
                                    } else {
                                        positionDragX(pos);
                                    }
                                } else if (direction > 0) {
                                    if (horizontalDragPosition + dragX < pos) {
                                        jsp.scrollByX(contentDragX);
                                    } else {
                                        positionDragX(pos);
                                    }
                                } else {
                                    cancelClick();
                                    return;
                                }
                                scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
                                isFirst = false;
                            }, cancelClick = function() {
                                scrollTimeout && clearTimeout(scrollTimeout);
                                scrollTimeout = null;
                                $(document).unbind("mouseup.jsp", cancelClick);
                            };
                            doScroll();
                            $(document).bind("mouseup.jsp", cancelClick);
                            return false;
                        }
                    });
                }
            }
            function removeClickOnTrack() {
                if (horizontalTrack) {
                    horizontalTrack.unbind("mousedown.jsp");
                }
                if (verticalTrack) {
                    verticalTrack.unbind("mousedown.jsp");
                }
            }
            function cancelDrag() {
                $("html").unbind("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp");
                if (verticalDrag) {
                    verticalDrag.removeClass("jspActive");
                }
                if (horizontalDrag) {
                    horizontalDrag.removeClass("jspActive");
                }
            }
            function positionDragY(destY, animate) {
                if (!isScrollableV) {
                    return;
                }
                if (destY < 0) {
                    destY = 0;
                } else if (destY > dragMaxY) {
                    destY = dragMaxY;
                }
                if (animate === undefined) {
                    animate = settings.animateScroll;
                }
                if (animate) {
                    jsp.animate(verticalDrag, "top", destY, _positionDragY);
                } else {
                    verticalDrag.css("top", destY);
                    _positionDragY(destY);
                }
            }
            function _positionDragY(destY) {
                if (destY === undefined) {
                    destY = verticalDrag.position().top;
                }
                container.scrollTop(0);
                verticalDragPosition = destY || 0;
                var isAtTop = verticalDragPosition === 0, isAtBottom = verticalDragPosition == dragMaxY, percentScrolled = destY / dragMaxY, destTop = -percentScrolled * (contentHeight - paneHeight);
                if (wasAtTop != isAtTop || wasAtBottom != isAtBottom) {
                    wasAtTop = isAtTop;
                    wasAtBottom = isAtBottom;
                    elem.trigger("jsp-arrow-change", [ wasAtTop, wasAtBottom, wasAtLeft, wasAtRight ]);
                }
                updateVerticalArrows(isAtTop, isAtBottom);
                pane.css("top", destTop);
                elem.trigger("jsp-scroll-y", [ -destTop, isAtTop, isAtBottom ]).trigger("scroll");
            }
            function positionDragX(destX, animate) {
                if (!isScrollableH) {
                    return;
                }
                if (destX < 0) {
                    destX = 0;
                } else if (destX > dragMaxX) {
                    destX = dragMaxX;
                }
                if (animate === undefined) {
                    animate = settings.animateScroll;
                }
                if (animate) {
                    jsp.animate(horizontalDrag, "left", destX, _positionDragX);
                } else {
                    horizontalDrag.css("left", destX);
                    _positionDragX(destX);
                }
            }
            function _positionDragX(destX) {
                if (destX === undefined) {
                    destX = horizontalDrag.position().left;
                }
                container.scrollTop(0);
                horizontalDragPosition = destX || 0;
                var isAtLeft = horizontalDragPosition === 0, isAtRight = horizontalDragPosition == dragMaxX, percentScrolled = destX / dragMaxX, destLeft = -percentScrolled * (contentWidth - paneWidth);
                if (wasAtLeft != isAtLeft || wasAtRight != isAtRight) {
                    wasAtLeft = isAtLeft;
                    wasAtRight = isAtRight;
                    elem.trigger("jsp-arrow-change", [ wasAtTop, wasAtBottom, wasAtLeft, wasAtRight ]);
                }
                updateHorizontalArrows(isAtLeft, isAtRight);
                pane.css("left", destLeft);
                elem.trigger("jsp-scroll-x", [ -destLeft, isAtLeft, isAtRight ]).trigger("scroll");
            }
            function updateVerticalArrows(isAtTop, isAtBottom) {
                if (settings.showArrows) {
                    arrowUp[isAtTop ? "addClass" : "removeClass"]("jspDisabled");
                    arrowDown[isAtBottom ? "addClass" : "removeClass"]("jspDisabled");
                }
            }
            function updateHorizontalArrows(isAtLeft, isAtRight) {
                if (settings.showArrows) {
                    arrowLeft[isAtLeft ? "addClass" : "removeClass"]("jspDisabled");
                    arrowRight[isAtRight ? "addClass" : "removeClass"]("jspDisabled");
                }
            }
            function scrollToY(destY, animate) {
                var percentScrolled = destY / (contentHeight - paneHeight);
                positionDragY(percentScrolled * dragMaxY, animate);
            }
            function scrollToX(destX, animate) {
                var percentScrolled = destX / (contentWidth - paneWidth);
                positionDragX(percentScrolled * dragMaxX, animate);
            }
            function scrollToElement(ele, stickToTop, animate) {
                var e, eleHeight, eleWidth, eleTop = 0, eleLeft = 0, viewportTop, viewportLeft, maxVisibleEleTop, maxVisibleEleLeft, destY, destX;
                try {
                    e = $(ele);
                } catch (err) {
                    return;
                }
                eleHeight = e.outerHeight();
                eleWidth = e.outerWidth();
                container.scrollTop(0);
                container.scrollLeft(0);
                while (!e.is(".jspPane")) {
                    eleTop += e.position().top;
                    eleLeft += e.position().left;
                    e = e.offsetParent();
                    if (/^body|html$/i.test(e[0].nodeName)) {
                        return;
                    }
                }
                viewportTop = contentPositionY();
                maxVisibleEleTop = viewportTop + paneHeight;
                if (eleTop < viewportTop || stickToTop) {
                    destY = eleTop - settings.horizontalGutter;
                } else if (eleTop + eleHeight > maxVisibleEleTop) {
                    destY = eleTop - paneHeight + eleHeight + settings.horizontalGutter;
                }
                if (!isNaN(destY)) {
                    scrollToY(destY, animate);
                }
                viewportLeft = contentPositionX();
                maxVisibleEleLeft = viewportLeft + paneWidth;
                if (eleLeft < viewportLeft || stickToTop) {
                    destX = eleLeft - settings.horizontalGutter;
                } else if (eleLeft + eleWidth > maxVisibleEleLeft) {
                    destX = eleLeft - paneWidth + eleWidth + settings.horizontalGutter;
                }
                if (!isNaN(destX)) {
                    scrollToX(destX, animate);
                }
            }
            function contentPositionX() {
                return -pane.position().left;
            }
            function contentPositionY() {
                return -pane.position().top;
            }
            function isCloseToBottom() {
                var scrollableHeight = contentHeight - paneHeight;
                return scrollableHeight > 20 && scrollableHeight - contentPositionY() < 10;
            }
            function isCloseToRight() {
                var scrollableWidth = contentWidth - paneWidth;
                return scrollableWidth > 20 && scrollableWidth - contentPositionX() < 10;
            }
            function initMousewheel() {
                container.unbind(mwEvent).bind(mwEvent, function(event, delta, deltaX, deltaY) {
                    if (!horizontalDragPosition) horizontalDragPosition = 0;
                    if (!verticalDragPosition) verticalDragPosition = 0;
                    var dX = horizontalDragPosition, dY = verticalDragPosition, factor = event.deltaFactor || settings.mouseWheelSpeed;
                    jsp.scrollBy(deltaX * factor, -deltaY * factor, false);
                    return dX == horizontalDragPosition && dY == verticalDragPosition;
                });
            }
            function removeMousewheel() {
                container.unbind(mwEvent);
            }
            function nil() {
                return false;
            }
            function initFocusHandler() {
                pane.find(":input,a").unbind("focus.jsp").bind("focus.jsp", function(e) {
                    scrollToElement(e.target, false);
                });
            }
            function removeFocusHandler() {
                pane.find(":input,a").unbind("focus.jsp");
            }
            function initKeyboardNav() {
                var keyDown, elementHasScrolled, validParents = [];
                isScrollableH && validParents.push(horizontalBar[0]);
                isScrollableV && validParents.push(verticalBar[0]);
                pane.bind("focus.jsp", function() {
                    elem.focus();
                });
                elem.attr("tabindex", 0).unbind("keydown.jsp keypress.jsp").bind("keydown.jsp", function(e) {
                    if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)) {
                        return;
                    }
                    var dX = horizontalDragPosition, dY = verticalDragPosition;
                    switch (e.keyCode) {
                      case 40:
                      case 38:
                      case 34:
                      case 32:
                      case 33:
                      case 39:
                      case 37:
                        keyDown = e.keyCode;
                        keyDownHandler();
                        break;

                      case 35:
                        scrollToY(contentHeight - paneHeight);
                        keyDown = null;
                        break;

                      case 36:
                        scrollToY(0);
                        keyDown = null;
                        break;
                    }
                    elementHasScrolled = e.keyCode == keyDown && dX != horizontalDragPosition || dY != verticalDragPosition;
                    return !elementHasScrolled;
                }).bind("keypress.jsp", function(e) {
                    if (e.keyCode == keyDown) {
                        keyDownHandler();
                    }
                    return !elementHasScrolled;
                });
                if (settings.hideFocus) {
                    elem.css("outline", "none");
                    if ("hideFocus" in container[0]) {
                        elem.attr("hideFocus", true);
                    }
                } else {
                    elem.css("outline", "");
                    if ("hideFocus" in container[0]) {
                        elem.attr("hideFocus", false);
                    }
                }
                function keyDownHandler() {
                    var dX = horizontalDragPosition, dY = verticalDragPosition;
                    switch (keyDown) {
                      case 40:
                        jsp.scrollByY(settings.keyboardSpeed, false);
                        break;

                      case 38:
                        jsp.scrollByY(-settings.keyboardSpeed, false);
                        break;

                      case 34:
                      case 32:
                        jsp.scrollByY(paneHeight * settings.scrollPagePercent, false);
                        break;

                      case 33:
                        jsp.scrollByY(-paneHeight * settings.scrollPagePercent, false);
                        break;

                      case 39:
                        jsp.scrollByX(settings.keyboardSpeed, false);
                        break;

                      case 37:
                        jsp.scrollByX(-settings.keyboardSpeed, false);
                        break;
                    }
                    elementHasScrolled = dX != horizontalDragPosition || dY != verticalDragPosition;
                    return elementHasScrolled;
                }
            }
            function removeKeyboardNav() {
                elem.attr("tabindex", "-1").removeAttr("tabindex").unbind("keydown.jsp keypress.jsp");
                pane.unbind(".jsp");
            }
            function observeHash() {
                if (location.hash && location.hash.length > 1) {
                    var e, retryInt, hash = escape(location.hash.substr(1));
                    try {
                        e = $("#" + hash + ', a[name="' + hash + '"]');
                    } catch (err) {
                        return;
                    }
                    if (e.length && pane.find(hash)) {
                        if (container.scrollTop() === 0) {
                            retryInt = setInterval(function() {
                                if (container.scrollTop() > 0) {
                                    scrollToElement(e, true);
                                    $(document).scrollTop(container.position().top);
                                    clearInterval(retryInt);
                                }
                            }, 50);
                        } else {
                            scrollToElement(e, true);
                            $(document).scrollTop(container.position().top);
                        }
                    }
                }
            }
            function hijackInternalLinks() {
                if ($(document.body).data("jspHijack")) {
                    return;
                }
                $(document.body).data("jspHijack", true);
                $(document.body).delegate("a[href*=#]", "click", function(event) {
                    var href = this.href.substr(0, this.href.indexOf("#")), locationHref = location.href, hash, element, container, jsp, scrollTop, elementTop;
                    if (location.href.indexOf("#") !== -1) {
                        locationHref = location.href.substr(0, location.href.indexOf("#"));
                    }
                    if (href !== locationHref) {
                        return;
                    }
                    hash = escape(this.href.substr(this.href.indexOf("#") + 1));
                    element;
                    try {
                        element = $("#" + hash + ', a[name="' + hash + '"]');
                    } catch (e) {
                        return;
                    }
                    if (!element.length) {
                        return;
                    }
                    container = element.closest(".jspScrollable");
                    jsp = container.data("jsp");
                    jsp.scrollToElement(element, true);
                    if (container[0].scrollIntoView) {
                        scrollTop = $(window).scrollTop();
                        elementTop = element.offset().top;
                        if (elementTop < scrollTop || elementTop > scrollTop + $(window).height()) {
                            container[0].scrollIntoView();
                        }
                    }
                    event.preventDefault();
                });
            }
            function initTouch() {
                var startX, startY, touchStartX, touchStartY, moved, moving = false;
                container.unbind("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").bind("touchstart.jsp", function(e) {
                    var touch = e.originalEvent.touches[0];
                    startX = contentPositionX();
                    startY = contentPositionY();
                    touchStartX = touch.pageX;
                    touchStartY = touch.pageY;
                    moved = false;
                    moving = true;
                }).bind("touchmove.jsp", function(ev) {
                    if (!moving) {
                        return;
                    }
                    var touchPos = ev.originalEvent.touches[0], dX = horizontalDragPosition, dY = verticalDragPosition;
                    jsp.scrollTo(startX + touchStartX - touchPos.pageX, startY + touchStartY - touchPos.pageY);
                    moved = moved || Math.abs(touchStartX - touchPos.pageX) > 5 || Math.abs(touchStartY - touchPos.pageY) > 5;
                    return dX == horizontalDragPosition && dY == verticalDragPosition;
                }).bind("touchend.jsp", function(e) {
                    moving = false;
                }).bind("click.jsp-touchclick", function(e) {
                    if (moved) {
                        moved = false;
                        return false;
                    }
                });
            }
            function destroy() {
                var currentY = contentPositionY(), currentX = contentPositionX();
                elem.removeClass("jspScrollable").unbind(".jsp");
                pane.unbind(".jsp");
                elem.replaceWith(originalElement.append(pane.children()));
                originalElement.scrollTop(currentY);
                originalElement.scrollLeft(currentX);
                if (reinitialiseInterval) {
                    clearInterval(reinitialiseInterval);
                }
            }
            $.extend(jsp, {
                reinitialise: function(s) {
                    s = $.extend({}, settings, s);
                    initialise(s);
                },
                scrollToElement: function(ele, stickToTop, animate) {
                    scrollToElement(ele, stickToTop, animate);
                },
                scrollTo: function(destX, destY, animate) {
                    scrollToX(destX, animate);
                    scrollToY(destY, animate);
                },
                scrollToX: function(destX, animate) {
                    scrollToX(destX, animate);
                },
                scrollToY: function(destY, animate) {
                    scrollToY(destY, animate);
                },
                scrollToPercentX: function(destPercentX, animate) {
                    scrollToX(destPercentX * (contentWidth - paneWidth), animate);
                },
                scrollToPercentY: function(destPercentY, animate) {
                    scrollToY(destPercentY * (contentHeight - paneHeight), animate);
                },
                scrollBy: function(deltaX, deltaY, animate) {
                    jsp.scrollByX(deltaX, animate);
                    jsp.scrollByY(deltaY, animate);
                },
                scrollByX: function(deltaX, animate) {
                    var destX = contentPositionX() + Math[deltaX < 0 ? "floor" : "ceil"](deltaX), percentScrolled = destX / (contentWidth - paneWidth);
                    positionDragX(percentScrolled * dragMaxX, animate);
                },
                scrollByY: function(deltaY, animate) {
                    var destY = contentPositionY() + Math[deltaY < 0 ? "floor" : "ceil"](deltaY), percentScrolled = destY / (contentHeight - paneHeight);
                    positionDragY(percentScrolled * dragMaxY, animate);
                },
                positionDragX: function(x, animate) {
                    positionDragX(x, animate);
                },
                positionDragY: function(y, animate) {
                    positionDragY(y, animate);
                },
                animate: function(ele, prop, value, stepCallback) {
                    var params = {};
                    params[prop] = value;
                    ele.animate(params, {
                        duration: settings.animateDuration,
                        easing: settings.animateEase,
                        queue: false,
                        step: stepCallback
                    });
                },
                getContentPositionX: function() {
                    return contentPositionX();
                },
                getContentPositionY: function() {
                    return contentPositionY();
                },
                getContentWidth: function() {
                    return contentWidth;
                },
                getContentHeight: function() {
                    return contentHeight;
                },
                getPercentScrolledX: function() {
                    return contentPositionX() / (contentWidth - paneWidth);
                },
                getPercentScrolledY: function() {
                    return contentPositionY() / (contentHeight - paneHeight);
                },
                getIsScrollableH: function() {
                    return isScrollableH;
                },
                getIsScrollableV: function() {
                    return isScrollableV;
                },
                getContentPane: function() {
                    return pane;
                },
                scrollToBottom: function(animate) {
                    positionDragY(dragMaxY, animate);
                },
                hijackInternalLinks: $.noop,
                destroy: function() {
                    destroy();
                }
            });
            initialise(s);
        }
        settings = $.extend({}, $.fn.jScrollPane.defaults, settings);
        $.each([ "arrowButtonSpeed", "trackClickSpeed", "keyboardSpeed" ], function() {
            settings[this] = settings[this] || settings.speed;
        });
        return this.each(function() {
            var elem = $(this), jspApi = elem.data("jsp");
            if (jspApi) {
                jspApi.reinitialise(settings);
            } else {
                $("script", elem).filter('[type="text/javascript"],:not([type])').remove();
                jspApi = new JScrollPane(elem, settings);
                elem.data("jsp", jspApi);
            }
        });
    };
    $.fn.jScrollPane.defaults = {
        showArrows: false,
        maintainPosition: true,
        stickToBottom: false,
        stickToRight: false,
        clickOnTrack: true,
        autoReinitialise: false,
        autoReinitialiseDelay: 500,
        verticalDragMinHeight: 0,
        verticalDragMaxHeight: 99999,
        horizontalDragMinWidth: 0,
        horizontalDragMaxWidth: 99999,
        contentWidth: undefined,
        animateScroll: false,
        animateDuration: 300,
        animateEase: "linear",
        hijackInternalLinks: false,
        verticalGutter: 4,
        horizontalGutter: 4,
        mouseWheelSpeed: 3,
        arrowButtonSpeed: 0,
        arrowRepeatFreq: 50,
        arrowScrollOnHover: false,
        trackClickSpeed: 0,
        trackClickRepeatFreq: 70,
        verticalArrowPositions: "split",
        horizontalArrowPositions: "split",
        enableKeyboardNavigation: true,
        hideFocus: false,
        keyboardSpeed: 0,
        initialDelay: 300,
        speed: 30,
        scrollPagePercent: .8
    };
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof exports !== "undefined") {
        module.exports = factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var Slick = window.Slick || {};
    Slick = function() {
        var instanceUid = 0;
        function Slick(element, settings) {
            var _ = this, dataSettings;
            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3e3,
                centerMode: false,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(slider, i) {
                    return '<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">' + (i + 1) + "</button>";
                },
                dots: false,
                dotsClass: "slick-dots",
                draggable: true,
                easing: "linear",
                edgeFriction: .35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnDotsHover: false,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: false,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1e3
            };
            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };
            $.extend(_, _.initials);
            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.hidden = "hidden";
            _.paused = false;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = "visibilitychange";
            _.windowWidth = 0;
            _.windowTimer = null;
            dataSettings = $(element).data("slick") || {};
            _.options = $.extend({}, _.defaults, dataSettings, settings);
            _.currentSlide = _.options.initialSlide;
            _.originalSettings = _.options;
            if (typeof document.mozHidden !== "undefined") {
                _.hidden = "mozHidden";
                _.visibilityChange = "mozvisibilitychange";
            } else if (typeof document.webkitHidden !== "undefined") {
                _.hidden = "webkitHidden";
                _.visibilityChange = "webkitvisibilitychange";
            }
            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.instanceUid = instanceUid++;
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
            _.registerBreakpoints();
            _.init(true);
            _.checkResponsive(true);
        }
        return Slick;
    }();
    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
        var _ = this;
        if (typeof index === "boolean") {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }
        _.unload();
        if (typeof index === "number") {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }
        _.$slides = _.$slideTrack.children(this.options.slide);
        _.$slideTrack.children(this.options.slide).detach();
        _.$slideTrack.append(_.$slides);
        _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index);
        });
        _.$slidesCache = _.$slides;
        _.reinit();
    };
    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };
    Slick.prototype.animateSlide = function(targetLeft, callback) {
        var animProps = {}, _ = this;
        _.animateHeight();
        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {
            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = "translate(" + now + "px, 0px)";
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = "translate(0px," + now + "px)";
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {
                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);
                if (_.options.vertical === false) {
                    animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)";
                } else {
                    animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)";
                }
                _.$slideTrack.css(animProps);
                if (callback) {
                    setTimeout(function() {
                        _.disableTransition();
                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };
    Slick.prototype.asNavFor = function(index) {
        var _ = this, asNavFor = _.options.asNavFor;
        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }
        if (asNavFor !== null && typeof asNavFor === "object") {
            asNavFor.each(function() {
                var target = $(this).slick("getSlick");
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };
    Slick.prototype.applyTransition = function(slide) {
        var _ = this, transition = {};
        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase;
        } else {
            transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase;
        }
        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };
    Slick.prototype.autoPlay = function() {
        var _ = this;
        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
        if (_.slideCount > _.options.slidesToShow && _.paused !== true) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };
    Slick.prototype.autoPlayClear = function() {
        var _ = this;
        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };
    Slick.prototype.autoPlayIterator = function() {
        var _ = this;
        if (_.options.infinite === false) {
            if (_.direction === 1) {
                if (_.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                }
                _.slideHandler(_.currentSlide + _.options.slidesToScroll);
            } else {
                if (_.currentSlide - 1 === 0) {
                    _.direction = 1;
                }
                _.slideHandler(_.currentSlide - _.options.slidesToScroll);
            }
        } else {
            _.slideHandler(_.currentSlide + _.options.slidesToScroll);
        }
    };
    Slick.prototype.buildArrows = function() {
        var _ = this;
        if (_.options.arrows === true) {
            _.$prevArrow = $(_.options.prevArrow).addClass("slick-arrow");
            _.$nextArrow = $(_.options.nextArrow).addClass("slick-arrow");
            if (_.slideCount > _.options.slidesToShow) {
                _.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                _.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }
                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }
                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                }
            } else {
                _.$prevArrow.add(_.$nextArrow).addClass("slick-hidden").attr({
                    "aria-disabled": "true",
                    tabindex: "-1"
                });
            }
        }
    };
    Slick.prototype.buildDots = function() {
        var _ = this, i, dotString;
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            dotString = '<ul class="' + _.options.dotsClass + '">';
            for (i = 0; i <= _.getDotCount(); i += 1) {
                dotString += "<li>" + _.options.customPaging.call(this, _, i) + "</li>";
            }
            dotString += "</ul>";
            _.$dots = $(dotString).appendTo(_.options.appendDots);
            _.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
        }
    };
    Slick.prototype.buildOut = function() {
        var _ = this;
        _.$slides = _.$slider.children(_.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
        _.slideCount = _.$slides.length;
        _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index).data("originalStyling", $(element).attr("style") || "");
        });
        _.$slidesCache = _.$slides;
        _.$slider.addClass("slick-slider");
        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css("opacity", 0);
        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }
        $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading");
        _.setupInfinite();
        _.buildArrows();
        _.buildDots();
        _.updateDots();
        _.setSlideClasses(typeof _.currentSlide === "number" ? _.currentSlide : 0);
        if (_.options.draggable === true) {
            _.$list.addClass("draggable");
        }
    };
    Slick.prototype.buildRows = function() {
        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;
        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();
        if (_.options.rows > 1) {
            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);
            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement("div");
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement("div");
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }
            _.$slider.html(newSlides);
            _.$slider.children().children().children().css({
                width: 100 / _.options.slidesPerRow + "%",
                display: "inline-block"
            });
        }
    };
    Slick.prototype.checkResponsive = function(initial, forceUpdate) {
        var _ = this, breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();
        if (_.respondTo === "window") {
            respondToWidth = windowWidth;
        } else if (_.respondTo === "slider") {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === "min") {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }
        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {
            targetBreakpoint = null;
            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }
            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === "unslick") {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === "unslick") {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger("breakpoint", [ _, triggerBreakpoint ]);
            }
        }
    };
    Slick.prototype.changeSlide = function(event, dontAnimate) {
        var _ = this, $target = $(event.target), indexOffset, slideOffset, unevenOffset;
        if ($target.is("a")) {
            event.preventDefault();
        }
        if (!$target.is("li")) {
            $target = $target.closest("li");
        }
        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
        switch (event.data.message) {
          case "previous":
            slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
            if (_.slideCount > _.options.slidesToShow) {
                _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
            }
            break;

          case "next":
            slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
            if (_.slideCount > _.options.slidesToShow) {
                _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
            }
            break;

          case "index":
            var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;
            _.slideHandler(_.checkNavigable(index), false, dontAnimate);
            $target.children().trigger("focus");
            break;

          default:
            return;
        }
    };
    Slick.prototype.checkNavigable = function(index) {
        var _ = this, navigables, prevNavigable;
        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }
        return index;
    };
    Slick.prototype.cleanUpEvents = function() {
        var _ = this;
        if (_.options.dots && _.$dots !== null) {
            $("li", _.$dots).off("click.slick", _.changeSlide);
            if (_.options.pauseOnDotsHover === true && _.options.autoplay === true) {
                $("li", _.$dots).off("mouseenter.slick", $.proxy(_.setPaused, _, true)).off("mouseleave.slick", $.proxy(_.setPaused, _, false));
            }
        }
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off("click.slick", _.changeSlide);
            _.$nextArrow && _.$nextArrow.off("click.slick", _.changeSlide);
        }
        _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler);
        _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler);
        _.$list.off("touchend.slick mouseup.slick", _.swipeHandler);
        _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler);
        _.$list.off("click.slick", _.clickHandler);
        $(document).off(_.visibilityChange, _.visibility);
        _.$list.off("mouseenter.slick", $.proxy(_.setPaused, _, true));
        _.$list.off("mouseleave.slick", $.proxy(_.setPaused, _, false));
        if (_.options.accessibility === true) {
            _.$list.off("keydown.slick", _.keyHandler);
        }
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off("click.slick", _.selectHandler);
        }
        $(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange);
        $(window).off("resize.slick.slick-" + _.instanceUid, _.resize);
        $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault);
        $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition);
        $(document).off("ready.slick.slick-" + _.instanceUid, _.setPosition);
    };
    Slick.prototype.cleanUpRows = function() {
        var _ = this, originalSlides;
        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr("style");
            _.$slider.html(originalSlides);
        }
    };
    Slick.prototype.clickHandler = function(event) {
        var _ = this;
        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };
    Slick.prototype.destroy = function(refresh) {
        var _ = this;
        _.autoPlayClear();
        _.touchObject = {};
        _.cleanUpEvents();
        $(".slick-cloned", _.$slider).detach();
        if (_.$dots) {
            _.$dots.remove();
        }
        if (_.$prevArrow && _.$prevArrow.length) {
            _.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }
        if (_.$nextArrow && _.$nextArrow.length) {
            _.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }
        if (_.$slides) {
            _.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
                $(this).attr("style", $(this).data("originalStyling"));
            });
            _.$slideTrack.children(this.options.slide).detach();
            _.$slideTrack.detach();
            _.$list.detach();
            _.$slider.append(_.$slides);
        }
        _.cleanUpRows();
        _.$slider.removeClass("slick-slider");
        _.$slider.removeClass("slick-initialized");
        _.unslicked = true;
        if (!refresh) {
            _.$slider.trigger("destroy", [ _ ]);
        }
    };
    Slick.prototype.disableTransition = function(slide) {
        var _ = this, transition = {};
        transition[_.transitionType] = "";
        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };
    Slick.prototype.fadeSlide = function(slideIndex, callback) {
        var _ = this;
        if (_.cssTransitions === false) {
            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });
            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {
            _.applyTransition(slideIndex);
            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });
            if (callback) {
                setTimeout(function() {
                    _.disableTransition(slideIndex);
                    callback.call();
                }, _.options.speed);
            }
        }
    };
    Slick.prototype.fadeSlideOut = function(slideIndex) {
        var _ = this;
        if (_.cssTransitions === false) {
            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {
            _.applyTransition(slideIndex);
            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };
    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
        var _ = this;
        if (filter !== null) {
            _.unload();
            _.$slideTrack.children(this.options.slide).detach();
            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
            _.reinit();
        }
    };
    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
        var _ = this;
        return _.currentSlide;
    };
    Slick.prototype.getDotCount = function() {
        var _ = this;
        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;
        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToShow;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToShow;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }
        return pagerQty - 1;
    };
    Slick.prototype.getLeft = function(slideIndex) {
        var _ = this, targetLeft, verticalHeight, verticalOffset = 0, targetSlide;
        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);
        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }
        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }
        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }
        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }
        if (_.options.variableWidth === true) {
            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow);
            }
            targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            if (_.options.centerMode === true) {
                if (_.options.infinite === false) {
                    targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1);
                }
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }
        return targetLeft;
    };
    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
        var _ = this;
        return _.options[option];
    };
    Slick.prototype.getNavigableIndexes = function() {
        var _ = this, breakPoint = 0, counter = 0, indexes = [], max;
        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }
        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }
        return indexes;
    };
    Slick.prototype.getSlick = function() {
        return this;
    };
    Slick.prototype.getSlideCount = function() {
        var _ = this, slidesTraversed, swipedSlide, centerOffset;
        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find(".slick-slide").each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });
            slidesTraversed = Math.abs($(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1;
            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };
    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
        var _ = this;
        _.changeSlide({
            data: {
                message: "index",
                index: parseInt(slide)
            }
        }, dontAnimate);
    };
    Slick.prototype.init = function(creation) {
        var _ = this;
        if (!$(_.$slider).hasClass("slick-initialized")) {
            $(_.$slider).addClass("slick-initialized");
            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
        }
        if (creation) {
            _.$slider.trigger("init", [ _ ]);
        }
        if (_.options.accessibility === true) {
            _.initADA();
        }
    };
    Slick.prototype.initArrowEvents = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.on("click.slick", {
                message: "previous"
            }, _.changeSlide);
            _.$nextArrow.on("click.slick", {
                message: "next"
            }, _.changeSlide);
        }
    };
    Slick.prototype.initDotEvents = function() {
        var _ = this;
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $("li", _.$dots).on("click.slick", {
                message: "index"
            }, _.changeSlide);
        }
        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.options.autoplay === true) {
            $("li", _.$dots).on("mouseenter.slick", $.proxy(_.setPaused, _, true)).on("mouseleave.slick", $.proxy(_.setPaused, _, false));
        }
    };
    Slick.prototype.initializeEvents = function() {
        var _ = this;
        _.initArrowEvents();
        _.initDotEvents();
        _.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, _.swipeHandler);
        _.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, _.swipeHandler);
        _.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, _.swipeHandler);
        _.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, _.swipeHandler);
        _.$list.on("click.slick", _.clickHandler);
        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
        _.$list.on("mouseenter.slick", $.proxy(_.setPaused, _, true));
        _.$list.on("mouseleave.slick", $.proxy(_.setPaused, _, false));
        if (_.options.accessibility === true) {
            _.$list.on("keydown.slick", _.keyHandler);
        }
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on("click.slick", _.selectHandler);
        }
        $(window).on("orientationchange.slick.slick-" + _.instanceUid, $.proxy(_.orientationChange, _));
        $(window).on("resize.slick.slick-" + _.instanceUid, $.proxy(_.resize, _));
        $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault);
        $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition);
        $(document).on("ready.slick.slick-" + _.instanceUid, _.setPosition);
    };
    Slick.prototype.initUI = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.show();
            _.$nextArrow.show();
        }
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            _.$dots.show();
        }
        if (_.options.autoplay === true) {
            _.autoPlay();
        }
    };
    Slick.prototype.keyHandler = function(event) {
        var _ = this;
        if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: "previous"
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: "next"
                    }
                });
            }
        }
    };
    Slick.prototype.lazyLoad = function() {
        var _ = this, loadRange, cloneRange, rangeStart, rangeEnd;
        function loadImages(imagesScope) {
            $("img[data-lazy]", imagesScope).each(function() {
                var image = $(this), imageSource = $(this).attr("data-lazy"), imageToLoad = document.createElement("img");
                imageToLoad.onload = function() {
                    image.animate({
                        opacity: 0
                    }, 100, function() {
                        image.attr("src", imageSource).animate({
                            opacity: 1
                        }, 200, function() {
                            image.removeAttr("data-lazy").removeClass("slick-loading");
                        });
                    });
                };
                imageToLoad.src = imageSource;
            });
        }
        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = rangeStart + _.options.slidesToShow;
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }
        loadRange = _.$slider.find(".slick-slide").slice(rangeStart, rangeEnd);
        loadImages(loadRange);
        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find(".slick-slide");
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find(".slick-cloned").slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };
    Slick.prototype.loadSlider = function() {
        var _ = this;
        _.setPosition();
        _.$slideTrack.css({
            opacity: 1
        });
        _.$slider.removeClass("slick-loading");
        _.initUI();
        if (_.options.lazyLoad === "progressive") {
            _.progressiveLazyLoad();
        }
    };
    Slick.prototype.next = Slick.prototype.slickNext = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "next"
            }
        });
    };
    Slick.prototype.orientationChange = function() {
        var _ = this;
        _.checkResponsive();
        _.setPosition();
    };
    Slick.prototype.pause = Slick.prototype.slickPause = function() {
        var _ = this;
        _.autoPlayClear();
        _.paused = true;
    };
    Slick.prototype.play = Slick.prototype.slickPlay = function() {
        var _ = this;
        _.paused = false;
        _.autoPlay();
    };
    Slick.prototype.postSlide = function(index) {
        var _ = this;
        _.$slider.trigger("afterChange", [ _, index ]);
        _.animating = false;
        _.setPosition();
        _.swipeLeft = null;
        if (_.options.autoplay === true && _.paused === false) {
            _.autoPlay();
        }
        if (_.options.accessibility === true) {
            _.initADA();
        }
    };
    Slick.prototype.prev = Slick.prototype.slickPrev = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "previous"
            }
        });
    };
    Slick.prototype.preventDefault = function(event) {
        event.preventDefault();
    };
    Slick.prototype.progressiveLazyLoad = function() {
        var _ = this, imgCount, targetImage;
        imgCount = $("img[data-lazy]", _.$slider).length;
        if (imgCount > 0) {
            targetImage = $("img[data-lazy]", _.$slider).first();
            targetImage.attr("src", targetImage.attr("data-lazy")).removeClass("slick-loading").load(function() {
                targetImage.removeAttr("data-lazy");
                _.progressiveLazyLoad();
                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }
            }).error(function() {
                targetImage.removeAttr("data-lazy");
                _.progressiveLazyLoad();
            });
        }
    };
    Slick.prototype.refresh = function(initializing) {
        var _ = this, currentSlide = _.currentSlide;
        _.destroy(true);
        $.extend(_, _.initials, {
            currentSlide: currentSlide
        });
        _.init();
        if (!initializing) {
            _.changeSlide({
                data: {
                    message: "index",
                    index: currentSlide
                }
            }, false);
        }
    };
    Slick.prototype.registerBreakpoints = function() {
        var _ = this, breakpoint, currentBreakpoint, l, responsiveSettings = _.options.responsive || null;
        if ($.type(responsiveSettings) === "array" && responsiveSettings.length) {
            _.respondTo = _.options.respondTo || "window";
            for (breakpoint in responsiveSettings) {
                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }
                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }
            _.breakpoints.sort(function(a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };
    Slick.prototype.reinit = function() {
        var _ = this;
        _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide");
        _.slideCount = _.$slides.length;
        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }
        _.registerBreakpoints();
        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.checkResponsive(false, true);
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on("click.slick", _.selectHandler);
        }
        _.setSlideClasses(0);
        _.setPosition();
        _.$slider.trigger("reInit", [ _ ]);
        if (_.options.autoplay === true) {
            _.focusHandler();
        }
    };
    Slick.prototype.resize = function() {
        var _ = this;
        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };
    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
        var _ = this;
        if (typeof index === "boolean") {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }
        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }
        _.unload();
        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }
        _.$slides = _.$slideTrack.children(this.options.slide);
        _.$slideTrack.children(this.options.slide).detach();
        _.$slideTrack.append(_.$slides);
        _.$slidesCache = _.$slides;
        _.reinit();
    };
    Slick.prototype.setCSS = function(position) {
        var _ = this, positionProps = {}, x, y;
        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == "left" ? Math.ceil(position) + "px" : "0px";
        y = _.positionProp == "top" ? Math.ceil(position) + "px" : "0px";
        positionProps[_.positionProp] = position;
        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = "translate(" + x + ", " + y + ")";
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)";
                _.$slideTrack.css(positionProps);
            }
        }
    };
    Slick.prototype.setDimensions = function() {
        var _ = this;
        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: "0px " + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + " 0px"
                });
            }
        }
        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();
        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5e3 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children(".slick-slide").length));
        }
        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset);
    };
    Slick.prototype.setFade = function() {
        var _ = this, targetLeft;
        _.$slides.each(function(index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: "relative",
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: "relative",
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });
        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };
    Slick.prototype.setHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css("height", targetHeight);
        }
    };
    Slick.prototype.setOption = Slick.prototype.slickSetOption = function(option, value, refresh) {
        var _ = this, l, item;
        if (option === "responsive" && $.type(value) === "array") {
            for (item in value) {
                if ($.type(_.options.responsive) !== "array") {
                    _.options.responsive = [ value[item] ];
                } else {
                    l = _.options.responsive.length - 1;
                    while (l >= 0) {
                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {
                            _.options.responsive.splice(l, 1);
                        }
                        l--;
                    }
                    _.options.responsive.push(value[item]);
                }
            }
        } else {
            _.options[option] = value;
        }
        if (refresh === true) {
            _.unload();
            _.reinit();
        }
    };
    Slick.prototype.setPosition = function() {
        var _ = this;
        _.setDimensions();
        _.setHeight();
        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }
        _.$slider.trigger("setPosition", [ _ ]);
    };
    Slick.prototype.setProps = function() {
        var _ = this, bodyStyle = document.body.style;
        _.positionProp = _.options.vertical === true ? "top" : "left";
        if (_.positionProp === "top") {
            _.$slider.addClass("slick-vertical");
        } else {
            _.$slider.removeClass("slick-vertical");
        }
        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }
        if (_.options.fade) {
            if (typeof _.options.zIndex === "number") {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }
        if (bodyStyle.OTransform !== undefined) {
            _.animType = "OTransform";
            _.transformType = "-o-transform";
            _.transitionType = "OTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = "MozTransform";
            _.transformType = "-moz-transform";
            _.transitionType = "MozTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = "webkitTransform";
            _.transformType = "-webkit-transform";
            _.transitionType = "webkitTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = "msTransform";
            _.transformType = "-ms-transform";
            _.transitionType = "msTransition";
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = "transform";
            _.transformType = "transform";
            _.transitionType = "transition";
        }
        _.transformsEnabled = _.animType !== null && _.animType !== false;
    };
    Slick.prototype.setSlideClasses = function(index) {
        var _ = this, centerOffset, allSlides, indexOffset, remainder;
        allSlides = _.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true");
        _.$slides.eq(index).addClass("slick-current");
        if (_.options.centerMode === true) {
            centerOffset = Math.floor(_.options.slidesToShow / 2);
            if (_.options.infinite === true) {
                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false");
                } else {
                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false");
                }
                if (index === 0) {
                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center");
                } else if (index === _.slideCount - 1) {
                    allSlides.eq(_.options.slidesToShow).addClass("slick-center");
                }
            }
            _.$slides.eq(index).addClass("slick-center");
        } else {
            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
                _.$slides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
            } else if (allSlides.length <= _.options.slidesToShow) {
                allSlides.addClass("slick-active").attr("aria-hidden", "false");
            } else {
                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false");
                } else {
                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
                }
            }
        }
        if (_.options.lazyLoad === "ondemand") {
            _.lazyLoad();
        }
    };
    Slick.prototype.setupInfinite = function() {
        var _ = this, i, slideIndex, infiniteCount;
        if (_.options.fade === true) {
            _.options.centerMode = false;
        }
        if (_.options.infinite === true && _.options.fade === false) {
            slideIndex = null;
            if (_.slideCount > _.options.slidesToShow) {
                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }
                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass("slick-cloned");
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass("slick-cloned");
                }
                _.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                    $(this).attr("id", "");
                });
            }
        }
    };
    Slick.prototype.setPaused = function(paused) {
        var _ = this;
        if (_.options.autoplay === true && _.options.pauseOnHover === true) {
            _.paused = paused;
            if (!paused) {
                _.autoPlay();
            } else {
                _.autoPlayClear();
            }
        }
    };
    Slick.prototype.selectHandler = function(event) {
        var _ = this;
        var targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide");
        var index = parseInt(targetElement.attr("data-slick-index"));
        if (!index) index = 0;
        if (_.slideCount <= _.options.slidesToShow) {
            _.setSlideClasses(index);
            _.asNavFor(index);
            return;
        }
        _.slideHandler(index);
    };
    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null, _ = this;
        sync = sync || false;
        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }
        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }
        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }
        if (sync === false) {
            _.asNavFor(index);
        }
        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);
        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }
        if (_.options.autoplay === true) {
            clearInterval(_.autoPlayTimer);
        }
        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }
        _.animating = true;
        _.$slider.trigger("beforeChange", [ _, _.currentSlide, animSlide ]);
        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;
        _.setSlideClasses(_.currentSlide);
        _.updateDots();
        _.updateArrows();
        if (_.options.fade === true) {
            if (dontAnimate !== true) {
                _.fadeSlideOut(oldSlide);
                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }
        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };
    Slick.prototype.startLoad = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            _.$dots.hide();
        }
        _.$slider.addClass("slick-loading");
    };
    Slick.prototype.swipeDirection = function() {
        var xDist, yDist, r, swipeAngle, _ = this;
        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);
        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? "left" : "right";
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? "left" : "right";
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? "right" : "left";
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return "left";
            } else {
                return "right";
            }
        }
        return "vertical";
    };
    Slick.prototype.swipeEnd = function(event) {
        var _ = this, slideCount;
        _.dragging = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;
        if (_.touchObject.curX === undefined) {
            return false;
        }
        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger("edge", [ _, _.swipeDirection() ]);
        }
        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
            switch (_.swipeDirection()) {
              case "left":
                slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
                _.slideHandler(slideCount);
                _.currentDirection = 0;
                _.touchObject = {};
                _.$slider.trigger("swipe", [ _, "left" ]);
                break;

              case "right":
                slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
                _.slideHandler(slideCount);
                _.currentDirection = 1;
                _.touchObject = {};
                _.$slider.trigger("swipe", [ _, "right" ]);
                break;
            }
        } else {
            if (_.touchObject.startX !== _.touchObject.curX) {
                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };
    Slick.prototype.swipeHandler = function(event) {
        var _ = this;
        if (_.options.swipe === false || "ontouchend" in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf("mouse") !== -1) {
            return;
        }
        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;
        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;
        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }
        switch (event.data.action) {
          case "start":
            _.swipeStart(event);
            break;

          case "move":
            _.swipeMove(event);
            break;

          case "end":
            _.swipeEnd(event);
            break;
        }
    };
    Slick.prototype.swipeMove = function(event) {
        var _ = this, edgeWasHit = false, curLeft, swipeDirection, swipeLength, positionOffset, touches;
        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }
        curLeft = _.getLeft(_.currentSlide);
        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }
        swipeDirection = _.swipeDirection();
        if (swipeDirection === "vertical") {
            return;
        }
        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }
        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }
        swipeLength = _.touchObject.swipeLength;
        _.touchObject.edgeHit = false;
        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === "right" || _.currentSlide >= _.getDotCount() && swipeDirection === "left") {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }
        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }
        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }
        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }
        _.setCSS(_.swipeLeft);
    };
    Slick.prototype.swipeStart = function(event) {
        var _ = this, touches;
        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }
        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }
        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
        _.dragging = true;
    };
    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
        var _ = this;
        if (_.$slidesCache !== null) {
            _.unload();
            _.$slideTrack.children(this.options.slide).detach();
            _.$slidesCache.appendTo(_.$slideTrack);
            _.reinit();
        }
    };
    Slick.prototype.unload = function() {
        var _ = this;
        $(".slick-cloned", _.$slider).remove();
        if (_.$dots) {
            _.$dots.remove();
        }
        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }
        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }
        _.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
    };
    Slick.prototype.unslick = function(fromBreakpoint) {
        var _ = this;
        _.$slider.trigger("unslick", [ _, fromBreakpoint ]);
        _.destroy();
    };
    Slick.prototype.updateArrows = function() {
        var _ = this, centerOffset;
        centerOffset = Math.floor(_.options.slidesToShow / 2);
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {
            _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            if (_.currentSlide === 0) {
                _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
                _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
                _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            }
        }
    };
    Slick.prototype.updateDots = function() {
        var _ = this;
        if (_.$dots !== null) {
            _.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true");
            _.$dots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false");
        }
    };
    Slick.prototype.visibility = function() {
        var _ = this;
        if (document[_.hidden]) {
            _.paused = true;
            _.autoPlayClear();
        } else {
            if (_.options.autoplay === true) {
                _.paused = false;
                _.autoPlay();
            }
        }
    };
    Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        });
        _.$slideTrack.attr("role", "listbox");
        _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function(i) {
            $(this).attr({
                role: "option",
                "aria-describedby": "slick-slide" + _.instanceUid + i + ""
            });
        });
        if (_.$dots !== null) {
            _.$dots.attr("role", "tablist").find("li").each(function(i) {
                $(this).attr({
                    role: "presentation",
                    "aria-selected": "false",
                    "aria-controls": "navigation" + _.instanceUid + i + "",
                    id: "slick-slide" + _.instanceUid + i + ""
                });
            }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar");
        }
        _.activateADA();
    };
    Slick.prototype.activateADA = function() {
        var _ = this, _isSlideOnFocus = _.$slider.find("*").is(":focus");
        _.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false",
            tabindex: "0"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        });
        _isSlideOnFocus && _.$slideTrack.find(".slick-active").focus();
    };
    Slick.prototype.focusHandler = function() {
        var _ = this;
        _.$slider.on("focus.slick blur.slick", "*", function(event) {
            event.stopImmediatePropagation();
            var sf = $(this);
            setTimeout(function() {
                if (_.isPlay) {
                    if (sf.is(":focus")) {
                        _.autoPlayClear();
                        _.paused = true;
                    } else {
                        _.paused = false;
                        _.autoPlay();
                    }
                }
            }, 0);
        });
    };
    $.fn.slick = function() {
        var _ = this, opt = arguments[0], args = Array.prototype.slice.call(arguments, 1), l = _.length, i = 0, ret;
        for (i; i < l; i++) {
            if (typeof opt == "object" || typeof opt == "undefined") _[i].slick = new Slick(_[i], opt); else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != "undefined") return ret;
        }
        return _;
    };
});

showLog = true;

function log(m) {
    if (window.console && showLog) {
        console.log(m);
    }
}

function css_browser_selector(u) {
    var uaInfo = {}, screens = [ 320, 480, 640, 768, 1024, 1152, 1280, 1440, 1680, 1920, 2560 ], allScreens = screens.length, ua = u.toLowerCase(), is = function(t) {
        return RegExp(t, "i").test(ua);
    }, version = function(p, n) {
        n = n.replace(".", "_");
        var i = n.indexOf("_"), ver = "";
        while (i > 0) {
            ver += " " + p + n.substring(0, i);
            i = n.indexOf("_", i + 1);
        }
        ver += " " + p + n;
        return ver;
    }, g = "gecko", w = "webkit", c = "chrome", f = "firefox", s = "safari", o = "opera", m = "mobile", a = "android", bb = "blackberry", lang = "lang_", dv = "device_", html = document.documentElement, b = [ !/opera|webtv/i.test(ua) && /msie\s(\d+)/.test(ua) ? "ie ie" + (/trident\/4\.0/.test(ua) ? "8" : RegExp.$1) : is("firefox/") ? g + " " + f + (/firefox\/((\d+)(\.(\d+))(\.\d+)*)/.test(ua) ? " " + f + RegExp.$2 + " " + f + RegExp.$2 + "_" + RegExp.$4 : "") : is("gecko/") ? g : is("opera") ? o + (/version\/((\d+)(\.(\d+))(\.\d+)*)/.test(ua) ? " " + o + RegExp.$2 + " " + o + RegExp.$2 + "_" + RegExp.$4 : /opera(\s|\/)(\d+)\.(\d+)/.test(ua) ? " " + o + RegExp.$2 + " " + o + RegExp.$2 + "_" + RegExp.$3 : "") : is("konqueror") ? "konqueror" : is("blackberry") ? bb + (/Version\/(\d+)(\.(\d+)+)/i.test(ua) ? " " + bb + RegExp.$1 + " " + bb + RegExp.$1 + RegExp.$2.replace(".", "_") : /Blackberry ?(([0-9]+)([a-z]?))[\/|;]/gi.test(ua) ? " " + bb + RegExp.$2 + (RegExp.$3 ? " " + bb + RegExp.$2 + RegExp.$3 : "") : "") : is("android") ? a + (/Version\/(\d+)(\.(\d+))+/i.test(ua) ? " " + a + RegExp.$1 + " " + a + RegExp.$1 + RegExp.$2.replace(".", "_") : "") + (/Android (.+); (.+) Build/i.test(ua) ? " " + dv + RegExp.$2.replace(/ /g, "_").replace(/-/g, "_") : "") : is("chrome") ? w + " " + c + (/chrome\/((\d+)(\.(\d+))(\.\d+)*)/.test(ua) ? " " + c + RegExp.$2 + (RegExp.$4 > 0 ? " " + c + RegExp.$2 + "_" + RegExp.$4 : "") : "") : is("iron") ? w + " iron" : is("applewebkit/") ? w + " " + s + (/version\/((\d+)(\.(\d+))(\.\d+)*)/.test(ua) ? " " + s + RegExp.$2 + " " + s + RegExp.$2 + RegExp.$3.replace(".", "_") : / Safari\/(\d+)/i.test(ua) ? RegExp.$1 == "419" || RegExp.$1 == "417" || RegExp.$1 == "416" || RegExp.$1 == "412" ? " " + s + "2_0" : RegExp.$1 == "312" ? " " + s + "1_3" : RegExp.$1 == "125" ? " " + s + "1_2" : RegExp.$1 == "85" ? " " + s + "1_0" : "" : "") : is("mozilla/") ? g : "", is("android|mobi|mobile|j2me|iphone|ipod|ipad|blackberry|playbook|kindle|silk") ? m : "", is("j2me") ? "j2me" : is("ipad|ipod|iphone") ? (/CPU( iPhone)? OS (\d+[_|\.]\d+([_|\.]\d+)*)/i.test(ua) ? "ios" + version("ios", RegExp.$2) : "") + " " + (/(ip(ad|od|hone))/gi.test(ua) ? RegExp.$1 : "") : is("playbook") ? "playbook" : is("kindle|silk") ? "kindle" : is("playbook") ? "playbook" : is("mac") ? "mac" + (/mac os x ((\d+)[.|_](\d+))/.test(ua) ? " mac" + RegExp.$2 + " mac" + RegExp.$1.replace(".", "_") : "") : is("win") ? "win" + (is("windows nt 6.2") ? " win8" : is("windows nt 6.1") ? " win7" : is("windows nt 6.0") ? " vista" : is("windows nt 5.2") || is("windows nt 5.1") ? " win_xp" : is("windows nt 5.0") ? " win_2k" : is("windows nt 4.0") || is("WinNT4.0") ? " win_nt" : "") : is("freebsd") ? "freebsd" : is("x11|linux") ? "linux" : "", /[; |\[](([a-z]{2})(\-[a-z]{2})?)[)|;|\]]/i.test(ua) ? (lang + RegExp.$2).replace("-", "_") + (RegExp.$3 != "" ? (" " + lang + RegExp.$1).replace("-", "_") : "") : "", is("ipad|iphone|ipod") && !is("safari") ? "ipad_app" : "" ];
    function screenSize() {
        var w = window.outerWidth || html.clientWidth;
        var h = window.outerHeight || html.clientHeight;
        uaInfo.orientation = w < h ? "portrait" : "landscape";
        html.className = html.className.replace(/ ?orientation_\w+/g, "").replace(/ [min|max|cl]+[w|h]_\d+/g, "");
        for (var i = allScreens - 1; i >= 0; i--) {
            if (w >= screens[i]) {
                uaInfo.maxw = screens[i];
                break;
            }
        }
        widthClasses = "";
        for (var info in uaInfo) {
            widthClasses += " " + info + "_" + uaInfo[info];
        }
        html.className = html.className + widthClasses;
        return widthClasses;
    }
    window.onresize = screenSize;
    screenSize();
    var cssbs = b.join(" ") + " js ";
    html.className = (cssbs + html.className.replace(/\b(no[-|_]?)?js\b/g, "")).replace(/^ /, "").replace(/ +/g, " ");
    return cssbs;
}

css_browser_selector(navigator.userAgent);

$.scrollLock = function scrollLockClosure() {
    "use strict";
    var $html = $("html"), locked = false, prevScroll = {
        scrollLeft: $(window).scrollLeft(),
        scrollTop: $(window).scrollTop()
    }, prevStyles = {}, lockStyles = {
        "overflow-y": "scroll",
        position: "fixed",
        width: "100%"
    };
    saveStyles();
    function saveStyles() {
        var styleAttr = $html.attr("style"), styleStrs = [], styleHash = {};
        if (!styleAttr) {
            return;
        }
        styleStrs = styleAttr.split(/;\s/);
        $.each(styleStrs, function serializeStyleProp(styleString) {
            if (!styleString) {
                return;
            }
            var keyValue = styleString.split(/\s:\s/);
            if (keyValue.length < 2) {
                return;
            }
            styleHash[keyValue[0]] = keyValue[1];
        });
        $.extend(prevStyles, styleHash);
    }
    function lock() {
        var appliedLock = {};
        if (locked) {
            return;
        }
        prevScroll = {
            scrollLeft: $(window).scrollLeft(),
            scrollTop: $(window).scrollTop()
        };
        saveStyles();
        $.extend(appliedLock, lockStyles, {
            left: -prevScroll.scrollLeft + "px",
            top: -prevScroll.scrollTop + "px"
        });
        $html.css(appliedLock);
        $(window).scrollLeft(0).scrollTop(0);
        locked = true;
    }
    function unlock() {
        if (!locked) {
            return;
        }
        $html.attr("style", $("<x>").css(prevStyles).attr("style") || "");
        $(window).scrollLeft(prevScroll.scrollLeft).scrollTop(prevScroll.scrollTop);
        locked = false;
    }
    return function scrollLock(on) {
        if (arguments.length) {
            if (on) {
                lock();
            } else {
                unlock();
            }
        } else {
            if (locked) {
                unlock();
            } else {
                lock();
            }
        }
    };
}();